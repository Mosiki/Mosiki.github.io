<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeJan&#39;s Blog</title>
  
  <subtitle>实战为王，记录在工作中技术使用的点点滴滴。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nullpointer.pw/"/>
  <updated>2018-01-27T13:07:10.069Z</updated>
  <id>http://nullpointer.pw/</id>
  
  <author>
    <name>WeJan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>SpringDataJPA快速入门</title>
    <link href="http://nullpointer.pw/SpringDataJPA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>http://nullpointer.pw/SpringDataJPA快速入门.html</id>
    <published>2018-01-27T13:02:48.000Z</published>
    <updated>2018-01-27T13:07:10.069Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在学习 SpringBoot 框架的时候，使用到了 SpringData JPA，但是当时只是简单的查询，没有用到稍微复杂的查询。  </p><p>JPA 的 JPQL 语法规则对于简单的查询实属利器，大大加快了开发速度。不久前，在公司将用户推荐功能单独抽取出为一个独立项目，由于公司一直沿用的底层框架太老，只能使用 JDK1.6，JDK 1.9都出来了，实在不能忍😅，果断引入了 SpringData JPA。  </p><p>然后最近公司其他同事接手了该项目，但是不太了解 SpringData JPA 的使用，于是有了此文，不会就可以直接让他看本篇博客了哈哈。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里不讲解 SpringData JPA 与框架的整合，只讲解 JPA 语法的使用</p><h3 id="Entity-实体类"><a href="#Entity-实体类" class="headerlink" title="Entity 实体类"></a>Entity 实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> <span class="comment">// 表示为一个实体类</span></span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"employee"</span>) <span class="comment">// 表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//主键标识注解</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">// 主键生成方式</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter/Setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 JpaRepository 接口，第一个参数为查询的实体类，第二个为实体类的主键数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setAge(i++);</span><br><span class="line">        employee.setName(<span class="string">"test"</span> + i);</span><br><span class="line">        employeeRepository.save(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JPA-查询语法讲解"><a href="#JPA-查询语法讲解" class="headerlink" title="JPA 查询语法讲解"></a>JPA 查询语法讲解</h2><h3 id="使用-JPQL-进行查询"><a href="#使用-JPQL-进行查询" class="headerlink" title="使用 JPQL 进行查询"></a>使用 JPQL 进行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增</span></span><br><span class="line">employeeRepository.save(employee);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1</span></span><br><span class="line">employeeRepository.findByName(<span class="string">"test1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1 and age = ?2</span></span><br><span class="line">employeeRepository.findByNameAndAge(<span class="string">"test1"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age between ?1 and ?2 【包含头尾】</span></span><br><span class="line">List&lt;Employee&gt; byAgeBetween = employeeRepository.findByAgeBetween(<span class="number">10</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &lt; ?1</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByAgeLessThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &gt; ?1</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByAgeGreaterThan(<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name is null  【不包含为空字符串的数据】</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByNameIsNull();</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "test9%" 以test9为开头的name</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByNameLike(<span class="string">"test9%"</span>);</span><br><span class="line">或者</span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "test_" 以test开头，且后面只模糊匹配一位</span></span><br><span class="line">List&lt;Employee&gt; list2 = employeeRepository.findByNameLike(<span class="string">"test_"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "%6" 模糊匹配以6结尾的</span></span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameEndingWith(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name in (?1, ?2)</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"test1"</span>, <span class="string">"test2"</span>);</span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameIn(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &lt;&gt; ?1</span></span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByAgeNot(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1 order by age desc </span></span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">findByNameOrderByAgeDesc</span><span class="params">(String name)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="使用自定义-Sql-以及-原生-Sql-查询"><a href="#使用自定义-Sql-以及-原生-Sql-查询" class="headerlink" title="使用自定义 Sql 以及 原生 Sql 查询"></a>使用自定义 Sql 以及 原生 Sql 查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** EmployeeRepository.java 添加方法 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据姓名与年龄查找，[通过占位符获取参数值]</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select o from Employee o where name = ?1 and age = ?2"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据姓名与年龄查找，[通过命名参数获取参数值]，必须使用 @Param 注解</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select o from Employee o where name = :name and age = :age"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams2</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生SQL，与上面不同的是，上面使用的是对象名称以及对象属性名称，Native SQL使用数据库表名以及字段名</span></span><br><span class="line"><span class="meta">@Query</span>(nativeQuery = <span class="keyword">true</span>, value = <span class="string">"select * from employee where name = :name and age = :age"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams3</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="JPA-更新操作"><a href="#JPA-更新操作" class="headerlink" title="JPA 更新操作"></a>JPA 更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 需要搭配使用 <span class="doctag">@Query</span> 与 <span class="doctag">@Modifying</span> 和 <span class="doctag">@Transactional</span> 注解使用*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"update Employee o set o.age = ?2 where o.id = ?1"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">updateAge</span><span class="params">(Integer id, Integer age)</span></span>;</span><br></pre></td></tr></table></figure><p>在 Service 层调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 必须开启事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer id, Integer age)</span> </span>&#123;</span><br><span class="line">    employeeRepository.update(id, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EmployeeRepository 接口定义</span></span><br><span class="line"><span class="function">Page&lt;Employee&gt; <span class="title">findByNameStartingWith</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类 EmployeeRepositoryTest.java</span></span><br><span class="line"><span class="comment">// 普通分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNameStartingWith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意 page 从 0 开始</span></span><br><span class="line">    Pageable request = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    Page&lt;Employee&gt; result = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>, request);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : result.getContent()) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带排序条件的分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNameStartingWith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Sort.Order order = <span class="keyword">new</span> Sort.Order(Sort.Direction.DESC, <span class="string">"id"</span>);</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(order);</span><br><span class="line">    Pageable request = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line">    Page&lt;Employee&gt; result = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>, request);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : result.getContent()) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态-SQL-查询"><a href="#动态-SQL-查询" class="headerlink" title="动态 SQL 查询"></a>动态 SQL 查询</h3><p>在 Java 开发中，动态 SQL 是必不可少的，JPA 也可以实现，Repository 多继承一个接口 <code>JpaSpecificationExecutor</code> 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 修改之前的 EmployeeRepository, 使其多继承 JpaSpecificationExecutor 接口</span><br><span class="line">public interface EmployeeRepository extends JpaRepository&lt;Employee, Integer&gt;, JpaSpecificationExecutor&lt;Employee&gt;&#123;</span><br><span class="line"></span><br><span class="line">    // ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pageable request = new PageRequest(0, 10);</span><br><span class="line">Specification&lt;Employee&gt; specification = new Specification&lt;Employee&gt;() &#123;</span><br><span class="line">public Predicate toPredicate(Root&lt;Employee&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123;</span><br><span class="line">        Path&lt;Integer&gt; path = root.get(&quot;age&quot;);</span><br><span class="line">                return cb.gt(path, 50);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">Page&lt;Employee&gt; all = employeeRepository.findAll(specification, request);</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里感谢一下<a href="https://www.imooc.com" target="_blank" rel="noopener">慕课网</a>，快速入门多亏了 imooc 上的课程。</p><p>参考课程：    </p><ul><li><a href="https://www.imooc.com/learn/821" target="_blank" rel="noopener">https://www.imooc.com/learn/821</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在学习 SpringBoot 框架的时候，使用到了 SpringData JPA，但是当时只是简单的查询，没有用到稍微复杂的查询。  &lt;/p&gt;
&lt;p&gt;JPA 的 JPQL 语法规则对于简单的查询实属利器，大大加快了开发速度。不久前，在公司将用户推荐功能单独抽取出为一个独立项目，由于公司一直沿用的底层框架太老，只能使用 JDK1.6，JDK 1.9都出来了，实在不能忍😅，果断引入了 SpringData JPA。  &lt;/p&gt;
&lt;p&gt;然后最近公司其他同事接手了该项目，但是不太了解 SpringData JPA 的使用，于是有了此文，不会就可以直接让他看本篇博客了哈哈。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringData" scheme="http://nullpointer.pw/categories/SpringData/"/>
    
    
      <category term="JPA" scheme="http://nullpointer.pw/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Mac下VMwareFusion安装CentOS并设置静态IP</title>
    <link href="http://nullpointer.pw/Mac%E4%B8%8BVMwareFusion%E5%AE%89%E8%A3%85CentOS%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP.html"/>
    <id>http://nullpointer.pw/Mac下VMwareFusion安装CentOS并设置静态IP.html</id>
    <published>2018-01-21T09:03:09.000Z</published>
    <updated>2018-01-21T09:03:57.138Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MAC下VMwareFusion安装CentOS及设置固定IP<br>之前写过一篇文章，关于虚拟机的快速安装的教程 <a href="http://nullpointer.pw/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85.html">CentOS快速安装</a>，当时是学习中用到了 Linux 环境，为了以后无需重复进行虚拟机繁杂配置，比如配置网络连接外网，才制作的镜像。为了开发调试方便，镜像设置为了固定 IP，所以导入该镜像的时候，需要简单设置以下即可 访问外网环境。<br>当时使用的是 Windows 环境，前不久入手了 MBP，也需要用到虚拟机环境，但是 MAC 环境下并没有 <code>虚拟网络编辑器</code>,所以设置静态 IP 费了好一般功夫。本文介绍虚拟机快速导入镜像，修改静态IP。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>VMware Fusion </li><li>CentOS 镜像(链接：<a href="http://pan.baidu.com/s/1nuKxhpf" target="_blank" rel="noopener">http://pan.baidu.com/s/1nuKxhpf</a> 密码：8dt8)</li></ul><h2 id="导入虚拟机镜像"><a href="#导入虚拟机镜像" class="headerlink" title="导入虚拟机镜像"></a>导入虚拟机镜像</h2><p>下载镜像后解压，打开 Vmware Fusion 软件，选择导入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151651476447145.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择镜像文件，选择 ovf 文件后打开。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/2018012115165148637891.png" alt=""></p><p>导入过程不再赘述。</p><hr><h2 id="为静态IP做准备"><a href="#为静态IP做准备" class="headerlink" title="为静态IP做准备"></a>为静态IP做准备</h2><p>打开 VMware Fusion 设置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151652247955860.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>进入网络选项卡，添加一个网卡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151652276054517.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开终端，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Preferences/VMware\ Fusion/</span><br><span class="line"></span><br><span class="line">sudo vim networking</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151652307377122.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>红色圈内是我们需要关注的地方,修改完之后保存退出。</p><p>再修改另外一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Preferences/VMware\ Fusion/vmnet2</span><br><span class="line">sudo vim nat.conf</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/2018012115165233457757.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="使网络配置生效"><a href="#使网络配置生效" class="headerlink" title="使网络配置生效"></a>使网络配置生效</h2><p>重新打开VMware的网络配置，为了使刚才的修改生效，我们重新设置保存一下。步骤是，先取消勾选<code>将 Mac 主机连接到该网络</code> 点击应用；再勾选上 <code>将 Mac 主机连接到该网络</code>，点击应用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/2018012115165234489139.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="修改虚拟机的静态-IP"><a href="#修改虚拟机的静态-IP" class="headerlink" title="修改虚拟机的静态 IP"></a>修改虚拟机的静态 IP</h2><p>打开虚拟机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号: root</span><br><span class="line">密码: 123456</span><br></pre></td></tr></table></figure></p><p>修改第一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure></p><p>修改 <code>DEVICE</code> 为 <code>eth1</code>;<br>修改 <code>IPADDR</code> 地址为 <code>192.168.200.3 ~ 192.168.200.254</code> 之间的值;<br>修改 <code>GATEWAY</code> 为 <code>nat.conf</code> 中配置的 ip 地址 <code>192.168.200.2</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151652365148908.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改另外一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注释掉 eth0 所在行，结果是</span><br><span class="line"># PCI device 0x8086:0x100f (e1000)</span><br><span class="line">#SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;00:0c:29:30:a4:b5&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth0&quot;</span><br><span class="line"># PCI device 0x8086:0x100f (e1000)</span><br><span class="line">SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;00:0c:29:cd:05:ea&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth1&quot;</span><br></pre></td></tr></table></figure><p>重启 虚拟机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启成功后，输入 <code>ifconfig</code> 提示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151652403427361.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时已经也可以 ping 通外网了，在 mac 的终端中也可以 ping 通虚拟机。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为了在使用过程中，虚拟机环境被折腾坏，可以做一下快照。到时候可以直接恢复到此快照，免去再次安装的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180121151651578018201.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/zhishengqianjun/article/details/77046796" target="_blank" rel="noopener">http://blog.csdn.net/zhishengqianjun/article/details/77046796</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MAC下VMwareFusion安装CentOS及设置固定IP&lt;br&gt;之前写过一篇文章，关于虚拟机的快速安装的教程 &lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="服务器" scheme="http://nullpointer.pw/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="VMware Fusion" scheme="http://nullpointer.pw/tags/VMware-Fusion/"/>
    
      <category term="静态IP" scheme="http://nullpointer.pw/tags/%E9%9D%99%E6%80%81IP/"/>
    
      <category term="mac" scheme="http://nullpointer.pw/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>基于微信事件二维码推广</title>
    <link href="http://nullpointer.pw/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E4%BF%A1%E4%BA%8B%E4%BB%B6%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A8%E5%B9%BF.html"/>
    <id>http://nullpointer.pw/基于微信事件二维码推广.html</id>
    <published>2018-01-06T11:53:36.000Z</published>
    <updated>2018-01-06T12:32:33.708Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇关于推广系统设计的博客，在那篇博客中介绍了统一的推广地址生成的方法，只举例说明了一种推广的方式，本篇博客讲解另外一种推广方式，基于<strong>微信事件二维码</strong>的方式。需要注意的是，事件二维码<strong>只有服务号有此接口权限，订阅号是没有该接口权限的</strong>，当然如果没有服务号的话，想学习一下接口的使用，微信官方提供的<strong>测试号</strong>可以使用该接口。</p><a id="more"></a><h2 id="谈谈事件二维码"><a href="#谈谈事件二维码" class="headerlink" title="谈谈事件二维码"></a>谈谈事件二维码</h2><p>二维码的便利性毋庸置疑，尤其是在微信中可以通过长按识别的方式识别二维码，让二维码的使用更加便捷频繁。微信推出的事件二维码大大提高二维码的交互能力，以下内容摘自官网介绍。</p><blockquote><p>为了满足用户渠道推广分析和用户帐号绑定等场景的需要，公众平台提供了生成带参数二维码的接口。使用该接口可以获得多个带不同场景值的二维码，用户扫描后，公众号可以接收到事件推送。</p></blockquote><p>事件二维码可以产生事件，并且二维码是可以携带参数的，这就可以用作推广。比如我司，针对某一本书的某一章节生成事件二维码，用户扫描二维码后，如果未关注公众号，会进入关注公众号页面，方便用户进行关注，关注后，后台接收到微信的事件推送，得到了存储的书与章节的信息，则可以直接发送消息，引导用户进入推广的章节页面，以下为我司微信推广的流程图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/2018010615152212998383.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="创建事件二维码"><a href="#创建事件二维码" class="headerlink" title="创建事件二维码"></a>创建事件二维码</h2><p>为了便于演示，我的项目是基于 SpringBoot 搭建。本项目使用的是微信测试号，可以在此处进行申请 <strong><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index" target="_blank" rel="noopener">微信测试号</a></strong>。appID 与 appsecret 在微信测试号中可以得到。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/2018010615152200274759.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>之前在公司写这套推广系统的时候，都是自己看微信公众平台文档，自己写的基础代码，比如封装请求参数，参数拼接，最近在 Github 上发现了一个封装得不错的 微信开发 SDK，对微信的开放平台、公众平台、小程序都有对应的子项目。秉着不重复造轮子的原则，我们引入这套 SDK，也就无需自己再进行封装了，还可以学习封装的源代码。</p><ol><li><p>首先添加 Maven 依赖，这里引入操作微信公众号的 SDK</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后配置微信公众平台参数 appID 与 appsecret，<br>新建微信平台配置信息 Properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wechat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String seecret;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml 中添加 appID 与 appsecret</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">wx1234567890</span></span><br><span class="line"><span class="attr">  seecret:</span> <span class="string">c912345678900987654321</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">QAnEo9760zDywWMvTKCxx</span></span><br></pre></td></tr></table></figure></li><li><p>创建微信配置类，声明两个 Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WechatProperties wechatProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxMpService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpService wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxMpConfigStorage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(wechatProperties.getAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(wechatProperties.getSeecret());</span><br><span class="line">        wxMpConfigStorage.setToken(wechatProperties.getToken());</span><br><span class="line">        <span class="keyword">return</span> wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 WechaptService 以及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechapServiceImpl</span> <span class="keyword">implements</span> <span class="title">WechatService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建永久事件二维码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 附加的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needShortUrl 是否转换为短链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 微信二维码地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createQrCode</span><span class="params">(String param, <span class="keyword">boolean</span> needShortUrl)</span> </span>&#123;</span><br><span class="line">        WxMpQrcodeService qrService = wxMpService.getQrcodeService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WxMpQrCodeTicket ticket = qrService.qrCodeCreateLastTicket(param);</span><br><span class="line">            String url = qrService.qrCodePictureUrl(ticket.getTicket(), needShortUrl);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建临时事件二维码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 附加的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireSeconds 有效时间 单位为秒，最大2592000（即30天）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needShortUrl 是否转换为短链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 微信二维码地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createTempQrCode</span><span class="params">(String param, Integer expireSeconds, <span class="keyword">boolean</span> needShortUrl)</span> </span>&#123;</span><br><span class="line">        WxMpQrcodeService qrService = wxMpService.getQrcodeService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WxMpQrCodeTicket ticket = qrService.qrCodeCreateTmpTicket(param, expireSeconds);</span><br><span class="line">            String url = qrService.qrCodePictureUrl(ticket.getTicket(), needShortUrl);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，简单的几行语句就可以生成事件二维码了。这里的参数 param 就是附加到二维码中的参数（可以放入推广相关参数，如推广链接ID），用户扫描后，微信服务器会推送相应的事件，可以在事件参数中可以获得 param。</p><ol><li>创建 Spring Junit 测试该方法，生成事件二维码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechapServiceImplTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WechatService wechatService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createQrCode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = wechatService.createQrCode(<span class="string">"hello wechat"</span>, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开生成的二维码链接，短链接 URL 格式如： <strong><a href="https://w.url.cn/s/xxxxx" target="_blank" rel="noopener">https://w.url.cn/s/xxxxx</a></strong> 使用微信进行扫描，会进入提示关注的页面。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/2018010615152206445930.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><h2 id="接收微信事件推送"><a href="#接收微信事件推送" class="headerlink" title="接收微信事件推送"></a>接收微信事件推送</h2><p>参数二维码已经生成了，但是你发现扫描关注之后，神马事情也没有发生，说好的发送消息呢！这是因为你没有接收微信的扫码关注事件推送和对其进行处理呢。</p><ol><li><p>创建 Controller 用于微信接口请求校验，然后启动项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/wechat/auth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpMessageRouter router;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(produces = <span class="string">"text/plain;charset=utf-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">authGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(name = <span class="string">"signature"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    required = <span class="keyword">false</span>)</span> String signature,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"timestamp"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    required = <span class="keyword">false</span>)</span> String timestamp,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"nonce"</span>, required = <span class="keyword">false</span>)</span> String nonce,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"echostr"</span>, required = <span class="keyword">false</span>)</span> String echostr,</span></span><br><span class="line"><span class="function">            HttpServletResponse response) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"请求参数非法，请核实!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.getWriter().print(echostr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="number">1111</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(produces = <span class="string">"application/xml; charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(@RequestBody String requestBody,</span></span></span><br><span class="line"><span class="function"><span class="params">                       @RequestParam(<span class="string">"signature"</span>)</span> String signature,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(<span class="string">"timestamp"</span>)</span> String timestamp,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(<span class="string">"nonce"</span>)</span> String nonce,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"encrypt_type"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                               required = <span class="keyword">false</span>)</span> String encType,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"msg_signature"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                               required = <span class="keyword">false</span>)</span> String msgSignature) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"非法请求，可能属于伪造的请求！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (encType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 明文传输的消息</span></span><br><span class="line">            WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">            WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">            <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out = outMessage.toXml();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"aes"</span>.equals(encType)) &#123;</span><br><span class="line">            <span class="comment">// aes加密的消息</span></span><br><span class="line">            <span class="comment">/*WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(</span></span><br><span class="line"><span class="comment">                    requestBody, this.wxService.getWxMpConfigStorage(), timestamp,</span></span><br><span class="line"><span class="comment">                    nonce, msgSignature);</span></span><br><span class="line"><span class="comment">            WxMpXmlOutMessage outMessage = this.route(inMessage);</span></span><br><span class="line"><span class="comment">            if (outMessage == null) &#123;</span></span><br><span class="line"><span class="comment">                return "";</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            out = outMessage</span></span><br><span class="line"><span class="comment">                    .toEncryptedXml(this.wxService.getWxMpConfigStorage());*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">route</span><span class="params">(WxMpXmlMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.router.route(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置微信消息推送接口，用于接收微信推送的请求，这里需要填写外网域名，如果你有自己的服务器和域名，可以直接填入；如果你没有，可以使用 <a href="https://ngrok.cc" target="_blank" rel="noopener">ngrok</a> 进行内网穿透，得到一个外网域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20180106151522725276515.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>比如我的微信请求校验地址为 <code>127.0.0.1:8080/wechat/auth</code>， 通过内网映射转发后得到的外网地址为 <code>http://vcmq.free.ngrok.cc/wechat/auth</code>，填写这个域名， Token 用于校验服务器，之前的 yml 文件中已指定了 token 的值，填写该值即可，点击确认。</p></li><li><p>微信扫描事件二维码，微信服务器推送请求到 post 方法，调用 route 方法，进行处理。<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454" target="_blank" rel="noopener">事件二维码文档地址</a></p><blockquote><p>事件KEY值，qrscene_为前缀，后面为二维码的参数值。</p></blockquote></li></ol><p>可以针对这种情况的进行处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Map&lt;String, Object&gt; context, WxMpService weixinService,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.logger.info(<span class="string">"新关注用户 OPENID: "</span> + wxMessage.getFromUser());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*// 获取微信用户基本信息</span></span><br><span class="line"><span class="comment">    WxMpUser userWxInfo = weixinService.getUserService()</span></span><br><span class="line"><span class="comment">        .userInfo(wxMessage.getFromUser(), null);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if (userWxInfo != null) &#123;</span></span><br><span class="line"><span class="comment">      // TODO 可以添加关注用户到本地</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    WxMpXmlOutMessage responseResult = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      responseResult = handleSpecial(wxMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TextBuilder().build(<span class="string">"感谢关注"</span>, wxMessage, weixinService);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理特殊请求，比如如果是扫码进来的，可以做相应处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">handleSpecial</span><span class="params">(WxMpXmlMessage wxMessage)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">      </span><br><span class="line">      <span class="comment">/* 微信返回数据示例</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">              "createTime": 1515235853,</span></span><br><span class="line"><span class="comment">              "event": "subscribe",</span></span><br><span class="line"><span class="comment">              "eventKey": "qrscene_hello wechat",</span></span><br><span class="line"><span class="comment">              "fromUser": "onbpEv3umpi7ihx381D-vpw1SEwE",</span></span><br><span class="line"><span class="comment">              "msgType": "event",</span></span><br><span class="line"><span class="comment">              "ticket": "gQA",</span></span><br><span class="line"><span class="comment">              "toUser": "gh_96fd4ea38axx"</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">      <span class="comment">// 如果是扫描</span></span><br><span class="line">      <span class="keyword">if</span> (wxMessage.getEventKey().startsWith(<span class="string">"qrscene_"</span>)) &#123;</span><br><span class="line">          <span class="comment">// 在此处进行绑定操作</span></span><br><span class="line">          System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(JSONObject.toJSONString(wxMessage));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p><a href="http://ojt4b2cr5.bkt.clouddn.com/wechat-simple-example.zip" target="_blank" rel="noopener">示例工程下载</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Wechat-Group/weixin-java-tools/blob/master/demo.md" target="_blank" rel="noopener">https://github.com/Wechat-Group/weixin-java-tools/blob/master/demo.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前写了一篇关于推广系统设计的博客，在那篇博客中介绍了统一的推广地址生成的方法，只举例说明了一种推广的方式，本篇博客讲解另外一种推广方式，基于&lt;strong&gt;微信事件二维码&lt;/strong&gt;的方式。需要注意的是，事件二维码&lt;strong&gt;只有服务号有此接口权限，订阅号是没有该接口权限的&lt;/strong&gt;，当然如果没有服务号的话，想学习一下接口的使用，微信官方提供的&lt;strong&gt;测试号&lt;/strong&gt;可以使用该接口。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://nullpointer.pw/categories/java/"/>
    
    
      <category term="推广系统" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="推广" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://nullpointer.pw/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html"/>
    <id>http://nullpointer.pw/2017年终总结.html</id>
    <published>2017-12-30T10:02:57.000Z</published>
    <updated>2017-12-30T10:09:16.907Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一年时间倏然而逝，今日已是年终岁尾矣！  </p><p>总是感觉今年过得太快了，很多次下班的时候，同事说：“明天周五了”，而我的反应就是：“诶？又要放假了吗？我怎么感觉前天才上班的啊😂”。<br>以前还在上学的时候，总是感叹，这一天天为何如此漫长呢！随着年龄的增长，仿佛时间的流速也同时加快了一般，每天总是觉得是在和时间赛跑，让我有些焦虑。</p><p>今年过的让我感觉很快，但是觉得比以前充实，因为做到的事情比以前多很多。</p><a id="more"></a><h2 id="2017-我做了哪些事"><a href="#2017-我做了哪些事" class="headerlink" title="2017 我做了哪些事"></a>2017 我做了哪些事</h2><ul><li><p><strong>记录 2017 整年收支</strong><br>从 2017 年开始，比较认真的记录了自己的日常开支情况，记账 APP 显示已经坚持 记账 575 天了。我个人记账就是为了防止自己过度消费，毕竟移动支付在中国这么发达，钱已经变成了一串数字，不注意就全花光了。上个月买了一台 MBP，用于日常学习，之前的旧电脑已经带不动 IDE 了，索性换了，真的是血贵，不过写代码真爽！有的支出就是无法避免，能做的就是减少不必要的支出；记账这件事情上，做的不太好的是虽然记录的比较详尽，但是缺少总结；来年需要做阶段性的总结，比如每个月总结一次，找出不必要支出，下次尽量避免，努力实行“开源节流”。</p></li><li><p><strong>开始基金定投</strong><br>年初的时候，看了一些理财的入门书籍，基本的理财技能还是需要掌握的，于是从四月份开始走上了养基之路，目前为止只定投了一只股基，收益尚可，做的不太好的地方就是把鸡蛋都放在了同一个篮子里，明年要着手于分散投资。</p></li><li><p><strong>记录 2017 整年时间</strong><br>去年看了《奇特的一生》这本书，感觉时间不够用的我，尝试学习 <a href="https://zh.wikipedia.org/wiki/%E4%BA%9A%E5%8E%86%E5%B1%B1%E5%A4%A7%C2%B7%E4%BA%9A%E5%8E%86%E5%B1%B1%E5%BE%B7%E7%BD%97%E7%BB%B4%E5%A5%87%C2%B7%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB" target="_blank" rel="noopener">柳比歇夫</a> 的时间统计法，记录自己每天的时间清单，用的是 IOS 上的 APP：「时间块」</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171230151461868391216.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>    <p>通过软件的统计功能，比较直观了反映了我的时间都去哪儿了。<br>自我感觉比往年用在学习上的时间要多很多，但是预料不及的是我在玩（游戏、动漫、出外游玩等花费的时间）上的投入时间和蹉跎的时间（如漫无目的地上网浏览、做无任何意义事情的时间）之和，竟然狂甩学习时间几条街😰，说明自己对于时间的利用还是太低太低。<br>最让我震惊的是用于交通(坐车，步行，等车等)的时间，居然达到了近 <code>850</code> 小时！一年十二个月,其中的一个月全是在车上度过！<strong>慎思极恐！</strong><br>柳比歇夫在每天每个周末每个月每个季度每年他都会汇总统计自己的时间支出，核算有效时间并加以总结，这一点我确实是没做到他这么极致，也是自己需要进行改进的地方，比如以后每个月总结一次时间的消费，看看自己有没有利用好这个月。</p></li><li><p><strong>开始早起</strong><br>在记录了半年的时间消费后，看了统计后，深觉时间真的不够用，于是从六月份开始早起，工作日基本每天 5 点起床。<br>不足的地方就是早起后，到7点洗漱吃饭去上班之前的这段时间，时间的利用不是很有效率，还有就是周末有时候变得很懒，经常快拖到 8 点多才起床😓，明年努力给自己找事情，提高时间的利用效率，周末督促自己早起。</p></li><li><p><strong>开始认真对待博客</strong><br>其实从 2016 年，便开始用 Hexo 搭建了博客，并开始写博客，但是当时只是好奇心的驱使，随便写写觉得有趣，所以写的很水，但是从 2017 年开始，就约束自己要认真点写，对自己写博客付出的时间进行负责。<br>我认为对于做技术的人而言，写不写博客是两种人，写的博客好不好也是两种人。<br>不足之处就是总的博客文章不够多，大多也没有什么深度；明年多多写博客，提升技术能力，期望可以写一些比较有深度的博客。</p></li><li><p><strong>自学新的技术</strong><br>技术的更迭速度很快，为了不被淘汰，只有通过不断学习，来提高技术能力。<br>目前所在的公司是一家以业务驱动的公司，所以平时写的业务代码比较多一些，对于新的技术接触的比较少，但是领导比较鼓励我们学习新的技术用于工作中。<br>公司的技术一成不变往往不是公司的问题，而是我们做技术的问题，就算公司想用新的技术，但是没有人会，这种技术也就不会被引入，因为使用成本太高；但是若这项技术，我们都会，而且又很有利于公司，相信一定会得到公司推行。为了保持进步，自学新兴的技术，对于自学新技术，垂直教育网站(编程) <a href="http://www.imooc.com/" target="_blank" rel="noopener">慕课网</a> 很不错！学习了新的技术，在恰当的时机合适的项目进行引入，也是对自己学习成果的一种实践！</p></li><li><p><strong>买 Kindle 看书</strong><br>年初买了 Kindle 用于看书，强制自己看书；看书的过程中，越发觉得自己的阅读能力实在是太差了，很多地方都读不懂，这也坚定了我要坚持看书的想法。<br>今年看了 25 本左右的书，但是精读的太少，很多都是囫囵吞枣，纠结于读书的数量，而不是质量，来年尽量提高阅读的质量。</p></li></ul><h2 id="2017-做的不好的地方"><a href="#2017-做的不好的地方" class="headerlink" title="2017 做的不好的地方"></a>2017 做的不好的地方</h2><ul><li><p>除了上面提出的问题，身上还有一堆等着我去克服的缺点。</p></li><li><p>下半年的时候，搞了个服务器，给电脑装上了 SS 的客户端，得以随时可以访问被墙的 Google 。于是在便利查找问题的环境下，出现了要做什么工作的时候，不去思考，而是先去进行 Google 搜索一番的情况，太过依赖 Google ，随时番羽墙对于我也不是一件好事。来年希望可以养成万事先独立思考的习惯，不要成为一名只会 Google 代码的码农。</p></li><li><p>忘了从几月份开始，王者荣耀火了，我也不出意外地陷了进去，大概玩了两三个月，之后意识到自己的做法不对，方才卸载了游戏。多亏了定力的增长，否则还可能沉迷其中不可自拔，以后就尽量不玩游戏了吧，毕竟还要那么多的知识等待着我去学呢！</p></li><li><p>每年都会看到程序员猝死的新闻，这个行业有的公司高强度无休止的加班，加上精神压力，以及不经常锻炼身体的习惯，导致悲剧的发生。在唏嘘的同时，却没有想到自己也没有锻炼身体的习惯，幸运的是公司不加班。也曾经坚持跑步锻炼了一段时间，但是没有坚持下来，还是要制定一个锻炼的计划。</p></li></ul><h2 id="2018-我想要做的事"><a href="#2018-我想要做的事" class="headerlink" title="2018 我想要做的事"></a>2018 我想要做的事</h2><ul><li>锻炼身体，身体好是一切活动的前提</li><li>多写博客，多精读书，多写读书笔记</li><li>独立思考，多总结，争取做一个精进的人</li><li>重新学习英语，英语能力太差了，多学点英语</li><li><del>拾起日语的学习</del></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>资源越多越浪费，资源越少越珍贵，时间亦是，周末时间很多但是利用效率却低的可怕，每天早起一个多小时，能完成周末好几个小时能完成的事情。每每浪费了光阴，在余下不多的时间里想要开始认真时，却总是在时间不够用的抱怨声里，草草结束了本次周末，所以，时间都去哪儿呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一年时间倏然而逝，今日已是年终岁尾矣！  &lt;/p&gt;
&lt;p&gt;总是感觉今年过得太快了，很多次下班的时候，同事说：“明天周五了”，而我的反应就是：“诶？又要放假了吗？我怎么感觉前天才上班的啊😂”。&lt;br&gt;以前还在上学的时候，总是感叹，这一天天为何如此漫长呢！随着年龄的增长，仿佛时间的流速也同时加快了一般，每天总是觉得是在和时间赛跑，让我有些焦虑。&lt;/p&gt;
&lt;p&gt;今年过的让我感觉很快，但是觉得比以前充实，因为做到的事情比以前多很多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://nullpointer.pw/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>mac编译安装Nginx</title>
    <link href="http://nullpointer.pw/mac%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx.html"/>
    <id>http://nullpointer.pw/mac编译安装nginx.html</id>
    <published>2017-12-06T22:50:18.000Z</published>
    <updated>2017-12-06T22:51:15.308Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然后简单的方式安装Nginx，但是习惯了在linux 上的操作，为了保持一致，因此也使用编译安装的方法进行安装Nginx。</p><a id="more"></a><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li>nginx: <a href="http://nginx.org/download/nginx-1.12.2.tar.gz" target="_blank" rel="noopener">http://nginx.org/download/nginx-1.12.2.tar.gz</a></li><li>zlib: <a href="http://zlib.net/zlib-1.2.11.tar.gz" target="_blank" rel="noopener">http://zlib.net/zlib-1.2.11.tar.gz</a></li><li>pcre: ftp://ftp.csx.cam.ac.uk/pub/software/programming/pcre/pcre-8.38.tar.gz</li><li>openssl: <a href="https://www.openssl.org/source/openssl-1.1.0g.tar.gz" target="_blank" rel="noopener">https://www.openssl.org/source/openssl-1.1.0g.tar.gz</a></li></ul><p>这些都是 Nginx 编译需要的依赖，下载后分别解压， 注意解压的文件要在同一个目录下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf pcre-8.38.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf openssl-1.1.0g.tar.gz</span><br></pre></td></tr></table></figure><p>进入nginx目录后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-zlib=../zlib-1.2.11 --with-pcre=../pcre-8.38 --with-openssl=../openssl-1.1.0g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 依次执行以下命令</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>以上执行完毕后， nginx 就被安装到 <code>/usr/local/nginx</code> 目录下</p><h2 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h2><p>在 mac 上随便修改点东西，就提示没有权限也是醉了，只好每个命令前面都加上 <strong>sudo</strong> 了</p><p>启动<br><code>sudo /usr/local/nginx/sbin/nginx</code></p><p>关闭<br><code>sudo /usr/local/nginx/sbin/nginx -s stop</code></p><p>重启<br><code>sudo /usr/local/nginx/sbin/nginx -s reload</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/tulies/article/details/77611409" target="_blank" rel="noopener">http://blog.csdn.net/tulies/article/details/77611409</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然后简单的方式安装Nginx，但是习惯了在linux 上的操作，为了保持一致，因此也使用编译安装的方法进行安装Nginx。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx安装" scheme="http://nullpointer.pw/tags/nginx%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>利用nginx解决跨域问题</title>
    <link href="http://nullpointer.pw/%E5%88%A9%E7%94%A8nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html"/>
    <id>http://nullpointer.pw/利用nginx解决跨域问题.html</id>
    <published>2017-12-06T22:31:02.000Z</published>
    <updated>2017-12-06T22:35:37.045Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到了跨域问题，结合之前【微信支付开发本地接收异步通知回调】的经验，利用 Nginx 实现了跨域。</p><p>公司之前为了解决跨域问题，用的是 iFrame，反正对于只做后端的我而言，觉得很复杂，但是现在利用 nginx 如此简单就实现了跨域，感觉还挺有成就感，哈哈！</p><a id="more"></a><h2 id="为什么会出现跨域问题？"><a href="#为什么会出现跨域问题？" class="headerlink" title="为什么会出现跨域问题？"></a>为什么会出现跨域问题？</h2><p>前人已经总结得很好了，就借鉴一下吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171206151256895451444.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>图片来源地址： <a href="http://www.cnblogs.com/gabrielchen/p/5066120.html" target="_blank" rel="noopener">http://www.cnblogs.com/gabrielchen/p/5066120.html</a></p></blockquote><p>我们在开发项目中遇到的跨域问题具体是这样的，公司的域名若是 <strong>www.domain.com</strong>，那么如果是发送的 Ajax 请求就不通过这个域名走了，而是通过 <strong>a.domain.com</strong>，于是便出现了跨域问题。</p><p>比如在 <strong>www.domain.com</strong> 首页中需要通过 Ajax 获取用户登录信息。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载演示项目"><a href="#下载演示项目" class="headerlink" title="下载演示项目"></a>下载演示项目</h3><p>为了演示这个跨域问题，我创建了一个 SpringBoot 项目，便于演示，如果不会 SpringBoot 也没有关系，因为重点在于 Nginx 配置上面。</p><p><strong><a href="https://pan.baidu.com/s/1pLifFBl" target="_blank" rel="noopener">【点我下载】</a>  提取密码: 8e68</strong></p><h3 id="启动演示项目"><a href="#启动演示项目" class="headerlink" title="启动演示项目"></a>启动演示项目</h3><p>因为是SpringBoot 项目，因此可以通过 <strong>java -jar</strong> 的方式直接启动，为了演示跨域，因此需要启动两个项目，这里我们用两个端口来分别启动项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># A 项目，端口设置为8080</span></span></span><br><span class="line">java -jar -Dserver.port=8080 demo.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># B 项目，端口设置为8090</span></span></span><br><span class="line">java -jar -Dserver.port=8090 demo.jar</span><br></pre></td></tr></table></figure><h3 id="配置本地-Host"><a href="#配置本地-Host" class="headerlink" title="配置本地 Host"></a>配置本地 Host</h3><p>为了演示还需要两个域名，不用真正的域名，修改本地的 Host 即可，将两个域名的 Host 都执行本地。可以使用 <a href="https://oldj.github.io/SwitchHosts/" target="_blank" rel="noopener">SwitchHosts</a> 来方便切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.domain.com</span><br><span class="line">127.0.0.1 a.domain.com</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171206151256982730568.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>编译安装 Nginx后， 修改 nginx.conf 配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    upstream webServer &#123;</span><br><span class="line">      server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream ajaxServer &#123;</span><br><span class="line">      server 127.0.0.1:8090;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  a.domain.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://ajaxServer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://webServer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里来详细解释一下这里的配置，<strong>a.domain.com</strong> 代理到 ajaxServer，即端口设置为 8090 的 B 项目；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  a.domain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">          proxy_pass http://ajaxServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看看 <strong>www.domain.com</strong> 的配置，反向代理到 webServer , 即端口设置为 8080 的 A 项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://webServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问项目地址 <strong><a href="http://www.domain.com/page" target="_blank" rel="noopener">http://www.domain.com/page</a></strong>， 进入以下页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171206151257156452621.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当输入框不输入或者输入的是当前域名 <strong><a href="http://www.domain.com" target="_blank" rel="noopener">http://www.domain.com</a></strong> 时，可以正常提交，不会遇到跨域问题。</p><p>当输入 <strong><a href="http://a.domain.com" target="_blank" rel="noopener">http://a.domain.com</a></strong> 时，点击按钮进行提交，会出现跨域问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171207151259706233672.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="修改-Nginx-配置文件"><a href="#修改-Nginx-配置文件" class="headerlink" title="修改 Nginx 配置文件"></a>修改 Nginx 配置文件</h2><p>修改 <strong>www.domain.com</strong> 的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">    location /proxy/ &#123;</span><br><span class="line">        proxy_set_header Host a.domain.com;</span><br><span class="line">        proxy_pass http://ajaxServer/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://webServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中这里这处配置是这篇文章的关键点。意思是 <strong><a href="http://www.domain.com/proxy/" target="_blank" rel="noopener">http://www.domain.com/proxy/</a></strong> 开头的请求将会被反向代理到 <strong>B 项目</strong> 即 <strong><a href="http://a.domain.com" target="_blank" rel="noopener">http://a.domain.com</a></strong> 域名，<strong>proxy_set_header Host</strong> 这一行是必须的。需要注意的是，这两行的域名需要保持一致，<strong>且第二行后面必须要有一个 /</strong>，至于原因，可以参考这篇文章 <a href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E5%9B%9E%E8%B0%83%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html#必知的-Nginx-语法">proxy_pass后的url加不加/的区别</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_set_header Host a.domain.com;</span><br><span class="line">    proxy_pass http://ajaxServer/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改之后保存配置文件，重启 Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></p><h2 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h2><p>修改提交 URL 为 <strong><a href="http://www.domain.com/proxy" target="_blank" rel="noopener">http://www.domain.com/proxy</a></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171207151259808430209.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击按钮进行提交，发现此时没有出现跨域问题。虽然提交的URL 域名是 <strong><a href="http://www.domain.com" target="_blank" rel="noopener">http://www.domain.com</a></strong>，而请求经过 Nginx 的反向代理之后，实际上提交到了 B 项目，即 <strong><a href="http://a.domain.com" target="_blank" rel="noopener">http://a.domain.com</a></strong>， 也可以看到 B 项目打印了输出语句 userId: 12，由此便解决了跨域问题。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p>文章涉及的jar文件我打成一个压缩包，可以自己下载尝试一下。</p><p><strong><a href="https://pan.baidu.com/s/1pLifFBl" target="_blank" rel="noopener">【点我下载】</a>  提取密码: 8e68</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到了跨域问题，结合之前【微信支付开发本地接收异步通知回调】的经验，利用 Nginx 实现了跨域。&lt;/p&gt;
&lt;p&gt;公司之前为了解决跨域问题，用的是 iFrame，反正对于只做后端的我而言，觉得很复杂，但是现在利用 nginx 如此简单就实现了跨域，感觉还挺有成就感，哈哈！&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="跨域问题" scheme="http://nullpointer.pw/tags/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
      <category term="反向代理" scheme="http://nullpointer.pw/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java推广系统设计</title>
    <link href="http://nullpointer.pw/java%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html"/>
    <id>http://nullpointer.pw/java推广系统设计.html</id>
    <published>2017-12-03T08:06:26.000Z</published>
    <updated>2017-12-03T11:08:05.064Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司新站由于运营需求，需要开发一套推广系统，用于网站用户引流，衍生出的推广套路目前便已经有四种，为了降低运营上手推广系统的难度，因此推广系统务必要便于使用，所以每种推广方式的配置需要保持足够明了简单。</p><a id="more"></a><h2 id="聊聊推广"><a href="#聊聊推广" class="headerlink" title="聊聊推广"></a>聊聊推广</h2><p>常见的推广套路就是针对一个推广员生成推广链接，推广员然后其他用户通过推广链接点击进来注册，但是不可能推广的页面是注册页面，所以需要先记录下用户的来源。注册成功的同时，绑定用户与推广员的关系，便于日后通过用户的充值消费统计推广员的推广费用，以下为推广的简单流程图。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/20171203151228872026958.png" alt=""></p><h2 id="推广系统实现"><a href="#推广系统实现" class="headerlink" title="推广系统实现"></a>推广系统实现</h2><h3 id="推广链接的生成"><a href="#推广链接的生成" class="headerlink" title="推广链接的生成"></a>推广链接的生成</h3><p>整个推广流程最主要的地方就是推广链接的生成与使用，为了方便推广链接的管理，需要将生成的推广链接进行保存。首先进行推广链接表的设计。最后提供给推广员的推广链接格式如：<code>http://m.domain.com/cp?code=xx</code>，其中 code 的值为推广链接的 ID。</p><table><thead><tr><th>字段名称</th><th style="text-align:center">字段类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td style="text-align:center">int</td><td>推广链接自增主键</td></tr><tr><td>title</td><td style="text-align:center">varcahr</td><td>推广标题</td></tr><tr><td>partner_id</td><td style="text-align:center">int</td><td>推广员ID</td></tr><tr><td>params</td><td style="text-align:center">text</td><td>推广参数</td></tr><tr><td>type</td><td style="text-align:center">tinyint</td><td>推广类型</td></tr><tr><td>url_type</td><td style="text-align:center">tinyint</td><td>URL类型</td></tr><tr><td>create_time</td><td style="text-align:center">timestamp</td><td>创建时间</td></tr><tr><td>update_time</td><td style="text-align:center">timestamp</td><td>更新时间</td></tr><tr><td>status</td><td style="text-align:center">tinyint</td><td>启用状态</td></tr></tbody></table><p>字段解读：  </p><ol><li><p>我这里的 id 直接设置为了自增主键的值，当然为了安全点，也可以设置为其他的值，比如 UUID；  </p></li><li><p>title 对于同一个推广员，可能会生成多条推广链接，用于区别。</p></li><li><p>partner_id 这个就不必多说，表明推广链接属于哪一个推广员</p></li><li><p>params 注意这个参数类型为 <strong>text</strong>， 因为为了方便扩展业务参数，因此此字段存储的是一段 JSON，若使用 varchar 长度会不够用。业务参数在我司，可以是：赠送 VIP 天数，赠送阅读券数量，推广费用等。这个字段可以自由发挥，在绑定用户的时候获取该字段，解析成 JSON 对象，读取对应的业务参数，进行相对应的设置。</p></li><li><p>因为运营同学的脑洞一般都很大，因此推广方式会有很多种，也是为了日后分析推广效果，因此加上 type 字段用于区分推广类型，推广类型有比如： CPS推广、微信公众推广等；</p></li><li><p>url_type 用于区分需要推广的页面是相对路径还是绝对路径。</p></li><li><p>status 用于标记此推广链接是否有效，比如终止推广合作，就可以设置为关闭，不再将用户绑定到此链接。</p></li></ol><p>后台推广链接生成页面参考：  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/20171203151228736175519.png" alt=""></p><h3 id="推广链接的跳转"><a href="#推广链接的跳转" class="headerlink" title="推广链接的跳转"></a>推广链接的跳转</h3><p>首先再看看推广的流程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/20171203151228877937882.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先用户通过点击推广链接，进入了推广的页面，我司就是小说的某一免费章节的阅读页面，之后到收费章节的时候，就会提示用户进行登录。<br>注册的用户，如何知道是从哪一个链接过来的呢？这就需要在用户注册之前就将推广链接的标记进行存储，最好的方式就是写入 Cookie。之前公司项目写 Cookie 是在前端进行，但是运行之后，发现不太可靠，因此我们将写 Cookie 的操作放在后端进行。</p><p>推广链接地址是 <code>http://m.domain.com/cp?code=xx</code>，访问如下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于推广链接的统一跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span> (value = <span class="string">"/cp"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">companionRedirect</span><span class="params">(String code,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, Model m, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(code);</span><br><span class="line">        <span class="comment">// 查询出推广链接记录</span></span><br><span class="line">        CompanionLink link = companionService.getCompanionLink(id);</span><br><span class="line">        <span class="keyword">if</span> (link != <span class="keyword">null</span> &amp;&amp; link.getStatus() != Constants.STATUS_DELETE) &#123;</span><br><span class="line">            JSONObject obj = JSONObject.parseObject(link.getParams());</span><br><span class="line">            <span class="comment">// 获取推广页面的地址</span></span><br><span class="line">            String url = obj.getString(<span class="string">"url"</span>);</span><br><span class="line">            <span class="comment">// 将 code 值即推广链接的 id 写入Cookie 中， EXP为有效期 3 天</span></span><br><span class="line">            CookieUtil.setCookie(request, response, Constants.COMPANION_COOKIE_NAME, code, EXP);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 跳转到推广页面</span></span><br><span class="line">            <span class="keyword">if</span> (link.getUrlType() == Constants.ABS) &#123;</span><br><span class="line">                <span class="comment">// 绝对路径直接跳转</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"redirect:"</span> + url;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 相对路径拼接域名后跳转</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"redirect:"</span> + Constants.MOBILE_SERVER_DOMAIN + url;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现异常，跳转到首页</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + Constants.MOBILE_SERVER_DOMAIN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写这篇文章的时候，发现之前设计推广链接的时候有所疏漏，有的推广方式是相对路径，而有的是绝对路径。<br>而我在代码中是通过 String 的 Contains方法是否包含域名来判断是相对的还是绝对的路径，其实没有必要，完全可以添加一个推广链接的 url 的路径类型。判断类型即可，如果是绝对路径直接跳转，否则拼接域名后跳转。</p><h3 id="推广关系的绑定"><a href="#推广关系的绑定" class="headerlink" title="推广关系的绑定"></a>推广关系的绑定</h3><p>用户浏览器的 Cookie 中已经保存好了推广链接的 code 值，绑定关系就好办了，可以在用户注册的时候，读取浏览器的 Cookie，获取这个 Cookie，得到推广链接的 id, 将用户的 id 与推广的 partner_id 进行绑定，保存到绑定关系的表中即可，比如我司的赠送操作也一在绑定后执行。</p><p>至于绑定关系的表设计，主要将 partner_id 与 user_id 作为联合主键保存，其他字段如绑定时间就不用多说了吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你看完觉得有什么疑问，可以留言评论，有需要改进的地方也请提出，共同进步！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;公司新站由于运营需求，需要开发一套推广系统，用于网站用户引流，衍生出的推广套路目前便已经有四种，为了降低运营上手推广系统的难度，因此推广系统务必要便于使用，所以每种推广方式的配置需要保持足够明了简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="推广系统" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="推广" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF/"/>
    
      <category term="链接推广" scheme="http://nullpointer.pw/tags/%E9%93%BE%E6%8E%A5%E6%8E%A8%E5%B9%BF/"/>
    
  </entry>
  
  <entry>
    <title>Maven 私服上传jar包</title>
    <link href="http://nullpointer.pw/Maven%20%E7%A7%81%E6%9C%8D%E4%B8%8A%E4%BC%A0jar%E5%8C%85.html"/>
    <id>http://nullpointer.pw/Maven 私服上传jar包.html</id>
    <published>2017-11-30T13:09:28.000Z</published>
    <updated>2017-12-03T11:01:39.054Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，公司开了新站，主要由我来负责新站的搭建工作，基础的系统比如登录系统，支付系统的搭建。  </p><p>今天在11月末尾补上这一篇文章，不然放出去的话做不到就不好了（一个月至少两篇博客）😂</p><a id="more"></a><p>在接入支付宝支付的时候，遇到了一些问题，在此记录一下。  </p><p>我们公司的之前项目接入的是支付宝 mapi 支付，这是比较早的支付接口，前一阵子，该接口的授权也到期了，我也负责后续接口的升级。</p><p>接口升级后，支付宝对其 SDK 也进行了升级，按照网站文档编写代码发现有些方法不存在，才知道是由于 项目中 SDK 的版本过低导致的。既然知道了问题，就要解决问题，于是在官网下载最新版的 SDK。</p><p>我们公司的项目全部基于 Maven 进行构建，但是官网的 SDK 只是 JAR 包，在中央仓库是没有的，因此使用的话需要上传到公司的 Maven 私服上。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>需要上传的 Jar 包，我这里是支付宝的 SDK 的 Jar 包</li><li>私服环境： <a href="http://www.jfrogchina.com/open-source/" target="_blank" rel="noopener">Artifactory</a></li></ul><p>我们公司的 maven 私服就是这货啦  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/20171130151204452196528.png" alt=""></p><h2 id="上传-Jar-包到-Maven"><a href="#上传-Jar-包到-Maven" class="headerlink" title="上传 Jar 包到 Maven"></a>上传 Jar 包到 Maven</h2><h3 id="选择上传-Jar-包"><a href="#选择上传-Jar-包" class="headerlink" title="选择上传 Jar 包"></a>选择上传 Jar 包</h3><p>登录 Artifactory 后，选择 Deploy，选择要上传的 Jar 包，我这里选择上传支付宝的 SDK 的 Jar 包。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/113134666.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="设置上传-Jar-包信息"><a href="#设置上传-Jar-包信息" class="headerlink" title="设置上传 Jar 包信息"></a>设置上传 Jar 包信息</h3><p>在这里选择要上传的仓库，以及设置 “GAV” 参数  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/113157073.png?imageslim" alt=""></p><p>由于支付宝的 Jar 包名称太长了，所以我这里精简了不必要的信息。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/113402039.png?imageslim" alt=""></p><p>设置完之后，点击完成即可。</p><h3 id="查找上传-Jar-的-Maven-坐标"><a href="#查找上传-Jar-的-Maven-坐标" class="headerlink" title="查找上传 Jar 的 Maven 坐标"></a>查找上传 Jar 的 Maven 坐标</h3><p>找到刚才保存的库，找到上传的 Jar 包  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/113450326.png?imageslim" alt=""></p><p>点击 对应的 pom 文件，查看 Maven 坐标   </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/113512171.png?imageslim" alt=""></p><p>将此坐标写入 pom.xml 中即可，需要先将私服的地址写到 pom.xml 文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.222:8088/artifactory/repos<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="上传源码-Jar-包到私服仓库"><a href="#上传源码-Jar-包到私服仓库" class="headerlink" title="上传源码 Jar 包到私服仓库"></a>上传源码 Jar 包到私服仓库</h2><p>想要在开发时看可以查看源码的时候，需要将对应的源码 Jar 包一起上传到私服中去，与前面步骤相同，此时选择对应的源码的 Jar 包。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/114351967.png?imageslim" alt=""></p><p>需要注意这里的 目标仓库与 GAV 参数保持与上面上传对应的 Jar 包保持一致。唯一不同的地方是 <strong>Classifier</strong> 为 <strong>sources</strong>。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171102/133357044.png?imageslim" alt=""></p><p>上传成功后如图，源码包与工程包在同一级目录中。此时在项目中可以刷新 pom.xml 文件后，对应的源码就会一同下载下载下来了，可以愉快的看源码了。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/20171130151204689848191.png" alt=""></p><p>End.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，公司开了新站，主要由我来负责新站的搭建工作，基础的系统比如登录系统，支付系统的搭建。  &lt;/p&gt;
&lt;p&gt;今天在11月末尾补上这一篇文章，不然放出去的话做不到就不好了（一个月至少两篇博客）😂&lt;/p&gt;
    
    </summary>
    
      <category term="Maven" scheme="http://nullpointer.pw/categories/Maven/"/>
    
    
      <category term="Maven私服" scheme="http://nullpointer.pw/tags/Maven%E7%A7%81%E6%9C%8D/"/>
    
      <category term="jar包上传" scheme="http://nullpointer.pw/tags/jar%E5%8C%85%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>微信支付开发本地接收异步通知回调【实战】</title>
    <link href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E5%9B%9E%E8%B0%83%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/微信支付开发本地接收异步通知回调【实战】.html</id>
    <published>2017-11-08T14:18:34.000Z</published>
    <updated>2017-12-03T11:00:02.093Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在调试微信相关的接口，但是由于微信官方出于安全的考虑，对于调用接口的域名有限制。微信授权与微信支付统一下单接口在本地可以通过更改 host 的方式来调试，微信服务器也能跳转回来，但是微信支付异步通知这里；微信官方强制让设置支付授权目录，且是通过 ICP 备案的域名，因此不采取特殊手段，<strong>本地是无法接收到微信的异步通知回调请求的，只能部署到线上环境测试</strong>。  </p><a id="more"></a><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>为了解决这个问题，折腾了好几天，才搞出来了，究其根本原因，还是对于 <strong>Nginx</strong> 不太熟悉。所以在此记录一下。</p><h3 id="内网转发"><a href="#内网转发" class="headerlink" title="内网转发"></a>内网转发</h3><p>如果想本地进行调试，并且想让微信服务器请求回调回来，则本地必须要有一个外网域名，这里我们是用 <a href="https://www.ngrok.cc" target="_blank" rel="noopener">Ngrok内网转发</a> 来实现；Ngrok 的配置就是将本地项目的端口映射到分配的外网域名，具体配置参考官网教程文档，此处不再赘述。</p><p>我的配置是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vcmq.free.ngrok.cc -&gt; 127.0.0.1:8080</span><br></pre></td></tr></table></figure></p><h3 id="配置测试支付目录"><a href="#配置测试支付目录" class="headerlink" title="配置测试支付目录"></a>配置测试支付目录</h3><p>前面提到了，微信支付异步通知会对支付域名<strong>目录</strong>有要求，因此，支付时的域名必须要在设置的支付域名目录下。</p><p>首先需要在 <a href="https://pay.weixin.qq.com" target="_blank" rel="noopener">微信商户平台</a> 中配置 商户秘钥，支付授权目录。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171108/215523458.png" alt=""></p><p>这里支付授权目录配置的是以后线上的支付授权目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pay.domain.com/wechat/public/</span><br></pre></td></tr></table></figure></p><p>然后再加一条本地测试支付的临时授权目录，这个目录最好在本地测试完成后，进行删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pay.domain.com/wechat/testpay/</span><br></pre></td></tr></table></figure></p><h2 id="必知的-Nginx-语法"><a href="#必知的-Nginx-语法" class="headerlink" title="必知的 Nginx 语法"></a>必知的 Nginx 语法</h2><h3 id="proxy-pass-后的-url-加不加-的区别"><a href="#proxy-pass-后的-url-加不加-的区别" class="headerlink" title="proxy_pass 后的 url 加不加 / 的区别"></a>proxy_pass 后的 url 加不加 / 的区别</h3><p>这里列举 nginx 的 proxy_pass 语法，是为了下一步针对 nginx 的配置进行修改。  </p><p>这里访问 <code>http://127.0.0.1/proxy/test.html</code> 测试 <strong>proxy_pass</strong> 后面的 url 加与不加 / 的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http://192.168.0.100/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 location 会代理到 <strong><a href="http://192.168.0.100/test.html" target="_blank" rel="noopener">http://192.168.0.100/test.html</a></strong> 即相当于是绝对根路径，则 Nginx 不会把 location 中的路径部分代理走。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http://192.168.0.100;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 location 会代理到 <strong><a href="http://192.168.0.100/proxy/test.html" target="_blank" rel="noopener">http://192.168.0.100/proxy/test.html</a></strong> 即相当于相对路径。</p><hr><h2 id="代理支付域名到第三方域名"><a href="#代理支付域名到第三方域名" class="headerlink" title="代理支付域名到第三方域名"></a>代理支付域名到第三方域名</h2><p>知道上一步 proxy_pass 后 / 的作用后，就开始来配置支付域名指向的服务器上的 nginx 的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name pay.domain.com;</span><br><span class="line"></span><br><span class="line">    location /testpay/ &#123;</span><br><span class="line">        proxy_set_header Host vcmq.free.ngrok.cc;</span><br><span class="line">        proxy_pass http://vcmq.free.ngrok.cc/wide/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://payServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置中的 <em>wide</em> 是我项目的名称；<br>注意：这里的 <strong>proxy_set_header Host</strong> 必须配置，否则进入 location 块后，会提示 <code>tunnel pay.domain.com not found</code>。</p><p>当访问 <strong>pay.domain.com/testpay/create</strong> 微信统一下单接口时， 会代理到 <strong><a href="http://vcmq.free.ngrok.cc/wide/create" target="_blank" rel="noopener">http://vcmq.free.ngrok.cc/wide/create</a></strong>；</p><p>需要注意的是，在统一下单接口，设置 <strong>notify_url</strong> 的值要为配置的支付授权目录，比如我的 <strong><a href="http://pay.domain.com/testpay/notify" target="_blank" rel="noopener">http://pay.domain.com/testpay/notify</a></strong>  </p><p>统一下单并完成支付完成后，微信服务器会请求统一下单接口中的 <strong>notify_url</strong>，经过服务器 nginx 进行代理后，会代理到 本地的内网转发域名异步通知回调接口 <strong><a href="http://vcmq.free.ngrok.cc/wide/notify" target="_blank" rel="noopener">http://vcmq.free.ngrok.cc/wide/notify</a></strong>， 从而达到了本地接收微信支付异步通知回调请求的目的。   </p><p>如果地址不在支付授权目录下，会提示当前 Url 未注册。因为是代理过去，因此地址栏的地址不会改变，这也是不能简单使用 nginx 的 rewrite 的原因。</p><p>如有疑问，可以联系我。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="http://www.cnop.net/html/web/nginx/2017/0330/4953.html" target="_blank" rel="noopener">nginx proxy_pass后的url加不加/的区别</a></p></li><li><p><a href="http://blog.csdn.net/faye0412/article/details/75200607" target="_blank" rel="noopener">跳转第三方域名</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在调试微信相关的接口，但是由于微信官方出于安全的考虑，对于调用接口的域名有限制。微信授权与微信支付统一下单接口在本地可以通过更改 host 的方式来调试，微信服务器也能跳转回来，但是微信支付异步通知这里；微信官方强制让设置支付授权目录，且是通过 ICP 备案的域名，因此不采取特殊手段，&lt;strong&gt;本地是无法接收到微信的异步通知回调请求的，只能部署到线上环境测试&lt;/strong&gt;。  &lt;/p&gt;
    
    </summary>
    
      <category term="微信支付" scheme="http://nullpointer.pw/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="nginx转发" scheme="http://nullpointer.pw/tags/nginx%E8%BD%AC%E5%8F%91/"/>
    
      <category term="proxy_pass" scheme="http://nullpointer.pw/tags/proxy-pass/"/>
    
      <category term="本地接收异步通知" scheme="http://nullpointer.pw/tags/%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx图片防盗链【实战】</title>
    <link href="http://nullpointer.pw/Nginx%E5%9B%BE%E7%89%87%E9%98%B2%E7%9B%97%E9%93%BE%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/Nginx图片防盗链【实战】.html</id>
    <published>2017-10-29T06:28:46.000Z</published>
    <updated>2017-12-03T11:03:22.644Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主目前在一家原创小说网站公司工作，由于站内的作品全部是原创，于是乎不可避免地会被一些盗版网站爬取盗版，对于防盗版一直没有很好的对策，让公司很是苦恼。<br>最近去一些盗版网站上搜索我们网站作品时，发现他们所用的封面图片的来源是我们网站的地址，即所谓的盗链，这对于我们网站服务器的带宽是一种损失，因此需要采取对应的手段应对。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里我使用两台虚拟机  虚拟机的快速安装可以参考我另外一篇博文 <a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/">CentOS快速安装</a></p><ul><li>服务器 A：192.168.200.130</li><li>服务器 B：192.168.200.131</li></ul><h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><p>参考博文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a> 的 Nginx 环境搭建部分。</p><h2 id="Nginx-防盗链设置"><a href="#Nginx-防盗链设置" class="headerlink" title="Nginx 防盗链设置"></a>Nginx 防盗链设置</h2><h3 id="一、配置-Nginx-的防盗链"><a href="#一、配置-Nginx-的防盗链" class="headerlink" title="一、配置 Nginx 的防盗链"></a>一、配置 Nginx 的防盗链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 修改 nginx.conf 配置文件</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 添加 server 节点</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.vcmq.com;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|png|gif)$ &#123;</span><br><span class="line">        root /home/resources;</span><br><span class="line">        valid_referers none server_names *.test1.com ~\.test2\.;</span><br><span class="line">        if ($invalid_referer)&#123;</span><br><span class="line">            rewrite ^/ http://ojt4b2cr5.bkt.clouddn.com/blog/20171028/214345352.png;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">root   html;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我新增的 server 的地址是 <em>www.vcmq.com</em>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|png|gif)$</span><br></pre></td></tr></table></figure><p>此行配置的作用是<strong>匹配以 jpg/png/gif  结尾的文件请求</strong>， 如果匹配就执行 括号内的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com ~\.test2\.;</span><br><span class="line">if ($invalid_referer)&#123;</span><br><span class="line">    rewrite ^/ http://ojt4b2cr5.bkt.clouddn.com/blog/20171028/214345352.png;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先看第一行，这行的作用是配置可以识别 refer，即可以正常获取资源文件的请求，<strong>在这里配置加入白名单的请求 refer 域名</strong>。<br>参数说明：    </p><ul><li><strong>none</strong> 代表请求的 refer 为空，也就是直接访问，比如在浏览器中直接访问图片 <code>www.vcmq.com/test1.png</code>，直接访问时，refer 会为空。</li><li><strong>blocked</strong> refer 来源不为空，但是里面的值被代理或者防火墙删除了</li><li><strong>server_names</strong> refer 来源包含当前的 <code>server_names</code> 即 <code>location</code> 的父节点 <code>server</code> 节点的 <code>server_name</code> 的值。</li><li><strong>字符串</strong> 定义服务器名称，比如 <code>*.test1.com</code>，配置后，来源是从 <code>test1.com</code> 就会被认为是合法的请求。</li><li><strong>正则表达式</strong> 匹配合法请求来源， 如 <code>~\.test2\.</code></li></ul><p>当请求的 <code>refer</code> 是合法的，即可以被后面任一参数所匹配， <code>$invalid_referer</code> 的值为0， 若不匹配则值为 1， 进入 <code>if</code> 的代码中。我这里的设置是，如果是不合法的请求，就统一返回一张图片，也可以直接返回 <code>403</code>。</p><h3 id="二、配置-html-文件"><a href="#二、配置-html-文件" class="headerlink" title="二、配置 html 文件"></a>二、配置 html 文件</h3><p>1.在 <code>/home</code> 目录下创建目录 <code>resources</code> ,在 <code>/home/resources</code> 目录下放入一张图片 <strong>test.png</strong>。  </p><p>2.修改 <code>nginx</code> 安装目录下 <code>html</code> 中的 <code>index.html</code> 文件。添加一个 <strong>img</strong> 标签，src 访问上一步中的图片文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.vcmq.com/test.png&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>3.启动 nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p><p>4.以上所有配置是对于服务器 A 的配置，以下讲解服务器 B 的配置  </p><ol><li>服务器 B 和 服务器 A一样安装好 nginx</li><li><p>修改 nginx.conf 配置文件, 添加两个 server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.test1.com;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name www.test2.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改服务器 B  Nginx 安装目录下 html 目录中的 index.html 文件,同样添加 img 标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.vcmq.com/test.png&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动 服务器 B 的 Nginx</p></li></ol><h2 id="配置注意事项"><a href="#配置注意事项" class="headerlink" title="配置注意事项"></a>配置注意事项</h2><ol><li>配置资源的 <strong>location</strong> 需要在 <strong>location /</strong> 之前。</li><li>如果在 <strong>location</strong> 或者其父节点 <strong>server</strong> 中没有配置 <strong>root</strong> 的值， 当请求时合法的时候，会 404 找不到资源文件，因此需要在 <strong>location</strong> 或者 <strong>server</strong> 节点设置 <strong>root</strong> 的值</li><li>注意调试的时候，务必使用 <strong>Ctrl + F5</strong> 进行刷新网页，因为 nginx 会缓存图片！</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我上面配置的 <strong>server_name</strong> 配置的域名是 <strong>www.vcmq.com</strong> ，因此测试时，需要将我电脑的 host 指向虚拟机的 ip, 可以使用 <strong>SwitchHosts</strong> 来便捷切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 指向服务器A</span><br><span class="line">192.168.200.130 www.vcmq.com</span><br><span class="line"></span><br><span class="line"># 指向服务器B</span><br><span class="line">192.168.200.131 www.test1.com www.test2.com</span><br></pre></td></tr></table></figure><ol><li>浏览器访问 www.vcmq.com，图片正常加载  </li></ol><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/130449251.png" alt="">  </p><ol><li>浏览器访问 <code>www.test1.com</code> 与 <code>www.test2.com</code> 还有直接访问图片 <code>http://www.vcmq.com/test.png</code> 都正常加载   </li></ol><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/140651035.png" alt="">  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/140624686.png" alt="">  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/140828400.png" alt="">  </p><ol><li>修改 服务器 A 的 nginx.conf 配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com ~\.test2\.;</span><br></pre></td></tr></table></figure><p>将此行修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names;</span><br></pre></td></tr></table></figure><p>即只允许当前 server_name 与 无 refer 的请求，其他请求都返回 rewrite 的图片, 然后重启 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>再次分别访问 ,<strong>注意需要使用 ctrl+F5 刷新一下缓存</strong></p><p><code>www.vcmq.com</code>、<code>www.test1.com</code>、<code>www.test2.com</code>、<code>http://www.vcmq.com/test.png</code>。</p><p>发现只有 <code>www.vcmq.com</code> 与 <code>http://www.vcmq.com/test.png</code> 正常显示，其他请求皆返回 rewrite 的图片  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/141839955.png" alt=""></p><p>同理再次修改 nginx.conf 文件, 允许来自 test1 的访问请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com;</span><br></pre></td></tr></table></figure><p>结果发现<br><code>www.test1.com</code>可以获取正常图片，而<code>www.test2.com</code>还是 rewrite 之后的图片</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171029/142030191.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>至此，已经实现了基于 Nginx 的简单图片防盗链。  </p><p>实际应用中，可以设置允许来自公司下的域名与空 refer 的请求通过。  </p><p>这里允许 空 refer 的请求通过的原因是，有些合法的请求可能会没有带上 refer。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://ojt4b2cr5.bkt.clouddn.com/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.zip" target="_blank" rel="noopener">文章涉及配置文件下载</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.bbsmax.com/A/xl56LLwxzr/" target="_blank" rel="noopener">https://www.bbsmax.com/A/xl56LLwxzr/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;博主目前在一家原创小说网站公司工作，由于站内的作品全部是原创，于是乎不可避免地会被一些盗版网站爬取盗版，对于防盗版一直没有很好的对策，让公司很是苦恼。&lt;br&gt;最近去一些盗版网站上搜索我们网站作品时，发现他们所用的封面图片的来源是我们网站的地址，即所谓的盗链，这对于我们网站服务器的带宽是一种损失，因此需要采取对应的手段应对。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="图片防盗链" scheme="http://nullpointer.pw/tags/%E5%9B%BE%E7%89%87%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    
      <category term="防盗链" scheme="http://nullpointer.pw/tags/%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置资源下载目录</title>
    <link href="http://nullpointer.pw/Nginx%E9%85%8D%E7%BD%AE%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95.html"/>
    <id>http://nullpointer.pw/Nginx配置资源下载目录.html</id>
    <published>2017-10-26T22:25:24.000Z</published>
    <updated>2017-12-03T11:02:48.972Z</updated>
    
    <content type="html"><![CDATA[<p>之前在网上找 CentOs 的镜像的时候，发现了阿里云的这个镜像源，速度蛮快的。今天也来搭建一个类似的站，使用 nginx 作为资源下载服务器。<br><a id="more"></a><br>图片详情：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171027/055339109.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p><a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">参考这篇教程的 Nginx 环境搭建部分</a></p><h2 id="设置资源存储路径"><a href="#设置资源存储路径" class="headerlink" title="设置资源存储路径"></a>设置资源存储路径</h2><p>1、 资源准备  </p><p>在 <strong>home</strong> 的用户目录下，建立文件夹，如 <strong>softs</strong> ,在 <strong>softs</strong> 目录中放入文件内容。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>2、 修改 Nginx 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><p>添加 server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  down.vcmq.com;</span><br><span class="line">        #sendfile        on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            alias  /home/softs/;</span><br><span class="line">            sendfile on;</span><br><span class="line">            autoindex on;</span><br><span class="line">            autoindex_exact_size off;</span><br><span class="line">            autoindex_localtime on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias 设置为第一步中的资源目录，我这里是 <strong>/home/softs/</strong></p><p>3、 访问测试<br>将本机 hosts 指向服务器，<br>访问地址 down.vcmq.com  显示目录列表  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171027/061943005.png" alt="">  </p><p><strong>注意不能是/root 目录下的文件路径 ，会显示403无权限</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在网上找 CentOs 的镜像的时候，发现了阿里云的这个镜像源，速度蛮快的。今天也来搭建一个类似的站，使用 nginx 作为资源下载服务器。&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="资源下载" scheme="http://nullpointer.pw/tags/%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>如何做笔记？</title>
    <link href="http://nullpointer.pw/%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0%EF%BC%9F.html"/>
    <id>http://nullpointer.pw/如何记笔记？.html</id>
    <published>2017-10-26T14:10:02.000Z</published>
    <updated>2017-12-03T10:59:43.890Z</updated>
    
    <content type="html"><![CDATA[<p>最近在公司开会，我分享了一些个人日常关于如何记笔记的心得，结合在网上看的相关文章，整理一下，然后做了一些补充，写出这篇博文，文章涉及工具的选择和记笔记的步骤以及记笔记的技巧与注意事项，欢迎留言探讨。  </p><a id="more"></a>  <h2 id="工具的选择"><a href="#工具的选择" class="headerlink" title="工具的选择"></a>工具的选择</h2><p>工欲善其事必先利其器，首先说说工具的选择，<br>好的工具会让你记笔记得心应手，拥有良好的用户体验，不好的工具则做不到这点，达不到记笔记的目的。</p><p>常见的主流云笔记有：  </p><ol><li>有道云笔记</li><li>OneNote  </li><li>为知笔记  </li><li>印象笔记  </li></ol><p>先说说我最熟悉的为知笔记，在一年以前，一直用的是为知笔记，记了上千的笔记，用的很不错，逢人推荐那种；但是有一天，为知笔记突然就宣布必须要付费才能继续使用，否则的话，笔记将不能同步！<br>对应一个云笔记产品来说，没有了最最基础的同步功能，和在本地文档里写有什么区别呢？没有合适的变现方式，就完全抛弃了免费用户，给我感觉这家公司不太靠谱，所以我就转战使用有道云笔记。<br>但是之前的笔记还在为知笔记里，懒得去转移了。所以选择笔记软件的时候也要考虑转移成本，万一一不小心产品就黄了呢！因此尽量选择大公司的成熟笔记产品。  </p><p>再说说现在用的有道云笔记，用一个词来形容就是很鸡贼，以前可以导出笔记为其他笔记软件识别的格式，现在只能导出有道能识别的格式。假如是重度用户，想转移笔记，很困难。<br>好在有道云笔记支持 MarkDown 笔记，所以我现在尽量写的笔记都用 MarkDown 方式，因为 MarkDown 格式的直接在笔记中就能直接复制走，转移笔记很轻松。MarkDown，语法很简单，可以学习一下，轻松排版，语法可以参考有道云的文档， 记笔记不需要去学习太复杂的语法,  看下面链接的第二点就可以。</p><ul><li><a href="http://note.youdao.com/iyoudao/?p=2411" target="_blank" rel="noopener">有道云笔记Markdown简明版</a></li></ul><p>然后说说印象笔记，是国外 EverNote 的大陆版本，其免费版只能提供两个终端同步，假如你公司登陆一个，家里登陆一个，还想要在移动设备上登录就需要付费，还有每月上传60M流量的限制，付费版一年一百多，想要最稳定的可以考虑使用。</p><p>最后说说 OneNote, 巨硬出品，但是国内 GFW 的存在，同步很慢，然后也没太弄清楚是怎么用的，和上面介绍的笔记产品组织格式不同，也没怎么会用，就不置点评了。</p><p><strong>我推荐使用有道云笔记和印象笔记(或EverNote)</strong></p><h2 id="记笔记的作用"><a href="#记笔记的作用" class="headerlink" title="记笔记的作用"></a>记笔记的作用</h2><p>最大的作用就是对抗遗忘，用好了笔记，笔记就是你的第二大脑，人的记忆力有限，我们通过记笔记来拓展。</p><p>记笔记三步走：  </p><ol><li>收集</li><li>整理</li><li>输出  </li></ol><p>以下进行详细步骤叙述：  </p><h2 id="记笔记的步骤"><a href="#记笔记的步骤" class="headerlink" title="记笔记的步骤"></a>记笔记的步骤</h2><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><p>第一步是确定所要写的笔记内容，即收集，收集这里我分为两部分。</p><ol><li><p>收集他人的内容<br>他人的内容指的是他人所产生的内容，比如别人写的书，博客文章，公众号文章等等，当你遇到了比如一篇你觉得写的很有道理或者对你有用的文章，觉得有保存下来的价值，你可以将其纳入你的笔记当中去。</p></li><li><p>收集自己的内容<br>自己的内容指的是自己所产生的内容，比如突发的灵光一现，如果不立即记录下来，可能就忘掉了，然后再想的时候无论如何也记不起来了，就感觉自己错过了一个亿。所以要趁着你的想法还没有消失之前，立即记录到笔记当中去。现在人手都有一副手机，而云笔记都有其对应的移动端，记录起来很方便。</p></li><li><p>收集的诀窍<br>有时候在某个网站看到一篇文章想要保存下来时候，一般人的做法是讲文章选择拷贝到笔记当中去，这么做是可行，但是会完全没有了排版，看起来乱糟糟的一片，所以需要借助浏览器插件或者分享功能来实现快速美观地保存。有道云笔记的谷歌浏览器插件就很好用，在手机上可以关注公众号，分享到公众号，也可以直接分享到对应的笔记 App 中，从而实现快速收集。</p></li></ol><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>收集完的内容，只是堆叠到了你的笔记当中，如果不加以整理总结，其实和散布在网络上的文章毫无区别，对你<strong>没有任何的意义，也没有任何的价值</strong>；<br>也许你想找笔记里面某一篇文章，但是你却死活也找不到，这种情况下记与不记都一样；正如去一座图书馆看书，但是图书馆却没有图书查阅系统，在浩渺书海中想找到一本书的困难程度可想而知！因此收集后的整理十分重要。     </p><p>整理分为重新排版与分类以及加标签（<strong>在下文详谈分类与标签</strong>）：</p><ul><li><p>通过浏览器插件等工具抓取保存的内容可能会与原文中的内容排版相差甚远，比如有道云笔记对于代码块的抓取排版支持就很差（其他很不错），这种情况，就需要我们自己对内容重新排版，便于以后自己查看。个人一般是新建立一个 Markdown 笔记，拷贝原文进行编排，并在文末标注文章来源链接。</p></li><li><p>良好的笔记分类有利于快速准确地定位笔记，提升效率。</p></li><li><p>一篇笔记只能放在一个分类中（对应笔记的文件夹)，但是却能够添加多个标签，我认为标签是对分类的一种补充。当分类不足以准确定位笔记，此时需要通过添加标签来弥补。</p></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>单单只是将内容收集，归类加标签，并不能够对自己产生很大的用处，最多的是自己想起来就去笔记中寻找，此时笔记的作用最多是充当备忘录的作用。而真正想要利用好笔记，就是需要我们来对笔记进行总结思考，来达到在头脑中深化该篇笔记的作用。  </p><p>举例而言，现在你写了一篇《拆掉思维里的墙》的读书笔记，但笔记的内容只有对于书中原文的部分摘抄；其实这样的笔记作用不大，时间长了，你甚至不记得你曾经读过这本书并写过读书笔记。但是你对文章进行了思考，概括书的主要中心思想，写了自己的感受，在豆瓣上留下了书评，就算时间久了，翻看笔记也能够回想起当时自己的想法，这书也就没有白读，笔记也就没有白写。</p><p>上文提到了在豆瓣中写书评，这和写笔记进行总结思考一样都是对于知识的一种输出。输出的方式还有很多种，比如在简书上、个人博客上、CSDN、博客园等地方发表文章。</p><p>当然，也并非所有的分类下面都需要进行这三步。</p><h2 id="细谈笔记分类与标签"><a href="#细谈笔记分类与标签" class="headerlink" title="细谈笔记分类与标签"></a>细谈笔记分类与标签</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照个人的习惯与经验，我将笔记分为了五大类，如图：        </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171026/211942811.png" alt="">  </p><p>1、 <strong>收集</strong>（指的是上图中的<em>我的资源</em>文件夹，因为是有道云笔记自动创建的文件夹，改名字之后他还会创建这个，所以就没有改名字）<br>收集作为一个单独的分类，用于存放未进行整理的收集，有道云笔记生成的<em>我的资源</em>这个文件夹下，会根据你使用的插件，自动生成对应来源的子文件夹，比如来自网页剪报、微信收藏等，我新建了一个 <em>思绪万千</em>  文件夹，用于保存突发的想法。</p><p>2、 <strong>备忘</strong></p><p>顾名思义，备忘分类用于一些需要查找使用，但又不需要完全记忆的内容，比如待办事项，待读书单，还有一些琐碎的文本数据备份等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171026/213837971.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>3、 <strong>工作</strong></p><p>工作分类下面主要是记录一些业务需求，工作难点以及工作技巧。</p><p>4、 <strong>学习</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171026/214451709.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>主要是一些关于编程相关的子分类文件夹，这里和工作分类都因人而异。</p><p>5、 <strong>生活</strong>  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171026/214954446.png" alt="">    </p><p>生活分类主要放一些生活中学习的内容，比如读书笔记、投资指南，保险相关的知识。其实这个分类和学习分类很像，因为我关于代码的笔记比较多，所以将其他和代码不相关的笔记放在生活分类当中。</p><p><strong>需要注意的是，分类的层级不宜嵌套太深，最好保持在三层以内，超过后不利于查找。(所以我把与代码不相关的放到生活分类下)</strong></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>再谈笔记的标签，既然标签是对分类的一种补充，因此是非必要的，同时标签不能和分类重复，参考添加这些标签。</p><ol><li>文章来源 （知乎、简书、CSDN等）</li><li>关键词 （笔记的关键点，可以提取几个词语出来作为标签）</li><li>不要太具体 （太具体就会导致标签过多，反而不利于标签的使用）</li></ol><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><h3 id="最后说说记笔记的原则"><a href="#最后说说记笔记的原则" class="headerlink" title="最后说说记笔记的原则"></a>最后说说记笔记的原则</h3><ol><li>记笔记是为了用，不用的笔记没有任何价值</li><li>不能只收集不学习</li><li>定期回顾，整理与归档（定期回顾有利于笔记内容的记忆）</li></ol><h3 id="记笔记会遇到的一些问题？"><a href="#记笔记会遇到的一些问题？" class="headerlink" title="记笔记会遇到的一些问题？"></a>记笔记会遇到的一些问题？</h3><ol><li>强迫症犯了，不知道该放在哪个分类下面， 原则是用，你认为放在哪个分类下面最可能被用到，就放在那个分类下面。</li></ol><p><a href="http://nullpointer.pw">Nullpointer的博客</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/search?type=content&amp;q=%E7%AC%94%E8%AE%B0" target="_blank" rel="noopener">https://www.zhihu.com/search?type=content&amp;q=%E7%AC%94%E8%AE%B0</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在公司开会，我分享了一些个人日常关于如何记笔记的心得，结合在网上看的相关文章，整理一下，然后做了一些补充，写出这篇博文，文章涉及工具的选择和记笔记的步骤以及记笔记的技巧与注意事项，欢迎留言探讨。  &lt;/p&gt;
    
    </summary>
    
      <category term="分享" scheme="http://nullpointer.pw/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="笔记" scheme="http://nullpointer.pw/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql行转列输出【实战】</title>
    <link href="http://nullpointer.pw/Mysql%E8%A1%8C%E8%BD%AC%E5%88%97%E8%BE%93%E5%87%BA%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/Mysql行转列输出【实战】.html</id>
    <published>2017-10-09T14:44:58.000Z</published>
    <updated>2017-12-03T11:02:00.239Z</updated>
    
    <content type="html"><![CDATA[<p>在很多场景下，需要将一行一行的数据转换成一列数据。比如每个人的每个科目都有一个分数，并分别对应一个分数，但是为了更加直观地看到一个人的所有科目成绩，所以需要将每个科目成绩由行转换成列。</p><a id="more"></a><p><strong>原始数据</strong></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">stuid</th><th style="text-align:center">name</th><th style="text-align:center">subject</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">语文</td><td style="text-align:center">99</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">数学</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">语文</td><td style="text-align:center">69</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">数学</td><td style="text-align:center">100</td></tr></tbody></table><p><strong>行数据转换成列数据之后</strong></p><table><thead><tr><th style="text-align:center">stuid</th><th style="text-align:center">name</th><th style="text-align:center">语文</th><th style="text-align:center">数学</th></tr></thead><tbody><tr><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">99</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">69</td><td style="text-align:center">100</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stuid, <span class="string">`name`</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="string">`subject`</span> <span class="keyword">WHEN</span> <span class="string">'C001'</span> <span class="keyword">THEN</span> score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="string">'语文'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="string">`subject`</span> <span class="keyword">WHEN</span> <span class="string">'C002'</span> <span class="keyword">THEN</span> score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="string">'数学'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`sys_user`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> stuid;</span><br></pre></td></tr></table></figure><hr><p>以下通过两个在工作中遇到的实例，来使用 Mysql 的行转列。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>网站进行推广，每个推广员都有一个唯一 ID 即 <strong>pid</strong>，现在要统计每个推广员的推广数据；需要统计推广过来的新增用户，以及新增用户的充值以及消费数据。这里简化了数据，便于理解。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171009/165507766.png?imageslim" alt="">  </p><p><strong>数据说明：</strong>  </p><ul><li>create_time： 数据生成时间</li><li>pid： 推广员唯一ID</li><li>type： 数据类型<ul><li>1： 新增用户</li><li>2： 新增充值</li><li>3： 新增消费</li></ul></li><li>value： 对应的数据值</li></ul><p><strong>需求结果样式：</strong>    </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171009/165921767.png?imageslim" alt="">  </p><p><strong>SQL 查询：</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">create_time,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增用户'</span>,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增充值'</span>,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增订阅'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">wings_companion_analytics <span class="keyword">GROUP</span> <span class="keyword">BY</span> create_time</span><br></pre></td></tr></table></figure><hr><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>统计网站单本书的购买次数以及购买金额  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171009/172010156.png?imageslim" alt="">    </p><p><strong>数据说明：</strong>  </p><ul><li>id： 主键</li><li>bookId： 书的 ID</li><li>task_id： 数据类型<ul><li>706： 购买次数</li><li>707： 购买金额</li></ul></li><li>time： 数据生成时间</li><li>value： 对应的数据值</li></ul><p><strong>需求结果样式：</strong>      </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20171009/172401490.png?imageslim" alt="">  </p><p><strong>SQL 查询：</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bookId <span class="keyword">as</span> <span class="string">'作品ID'</span>,</span><br><span class="line">  <span class="keyword">DATE_FORMAT</span>(<span class="keyword">time</span>,<span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> <span class="string">'日期'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> task_id <span class="keyword">WHEN</span> <span class="number">706</span> <span class="keyword">THEN</span> <span class="string">`value`</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'购买次数'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> task_id <span class="keyword">WHEN</span> <span class="number">707</span> <span class="keyword">THEN</span> <span class="string">`value`</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'购买金额'</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`t_task_result_day`</span></span><br><span class="line"><span class="keyword">WHERE</span> task_id <span class="keyword">IN</span> (<span class="number">706</span>, <span class="number">707</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">time</span>, bookId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> bookId, <span class="keyword">time</span>;</span><br></pre></td></tr></table></figure><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://ojt4b2cr5.bkt.clouddn.com/data.sql" target="_blank" rel="noopener">点我下载实例所用数据</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/wulantian/article/details/52687640" target="_blank" rel="noopener">http://blog.csdn.net/wulantian/article/details/52687640</a></li><li><a href="http://blog.csdn.net/u013938484/article/details/50552747" target="_blank" rel="noopener">http://blog.csdn.net/u013938484/article/details/50552747</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多场景下，需要将一行一行的数据转换成一列数据。比如每个人的每个科目都有一个分数，并分别对应一个分数，但是为了更加直观地看到一个人的所有科目成绩，所以需要将每个科目成绩由行转换成列。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://nullpointer.pw/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="mysql" scheme="http://nullpointer.pw/tags/mysql/"/>
    
      <category term="行转列" scheme="http://nullpointer.pw/tags/%E8%A1%8C%E8%BD%AC%E5%88%97/"/>
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存配置之手动清除缓存</title>
    <link href="http://nullpointer.pw/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E4%B9%8B%E6%89%8B%E5%8A%A8%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98.html"/>
    <id>http://nullpointer.pw/Nginx缓存配置之手动清除缓存.html</id>
    <published>2017-09-10T22:15:36.000Z</published>
    <updated>2017-12-03T11:02:42.786Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前文介绍了利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，并设置了缓存时间为一天。</p><p>但是如果前端修改了页面，比如首页，由于 Nginx 缓存的存在，网站首页并不会立即生效，而是要等到缓存过期。这样明显不是我们想要的结果，所以需要进行手动使 Nginx 缓存失效。以下为操作详解。</p></blockquote><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>已经设置缓存的 Nginx 服务器， 参照我之前博文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a></li></ul><h2 id="Nginx-配置文件拆分"><a href="#Nginx-配置文件拆分" class="headerlink" title="Nginx 配置文件拆分"></a>Nginx 配置文件拆分</h2><p>在企业 Nginx 应用中，Nginx 配置文件应该根据域名不同来进行拆分，然后在 <strong>nginx.conf</strong>中进行<strong>include</strong>引入。这样的好处是便于管理配置文件，便于修改配置文件， 而 <strong>nginx.conf</strong> 文件中只保留 <strong>upstream</strong> 以及其他通用配置信息。</p><p>在 Nginx 的 <strong>conf</strong> 目录下创建文件夹 <strong>include</strong>， 用于保存拆分的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir include</span><br></pre></td></tr></table></figure><p>拆分的规则可以如下：</p><ul><li>桌面版（WEB）的 Nginx 配置文件，可以命名为 <strong>nginx_web.conf</strong></li><li>手机版（WAP）的 Nginx 配置文件，可以命名为 <strong>nginx_wap.conf</strong></li><li>安卓的 Nginx 配置文件，可以命名为 <strong>nginx_apk.conf</strong></li><li>苹果的 Nginx 配置文件，可以命名为 <strong>nginx_ios.conf</strong></li><li>清除缓存的配置文件，可以命名为 <strong>purge.conf</strong></li></ul><p>在 <strong>/usr/local/nginx/conf/nginx.conf</strong> 中引入拆分的配置文件， 在配置文件中的 <strong>http</strong> 节点下进行引入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">......</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 注意 purge.conf 必须要第一个引用！！！</span></span><br><span class="line">  include include/purge.conf;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 引入其他配置文件</span></span><br><span class="line">  include include/nginx_web.conf;</span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_wap.conf;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_apk.conf;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_ios.conf;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置缓存清除"><a href="#配置缓存清除" class="headerlink" title="配置缓存清除"></a>配置缓存清除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/include</span><br><span class="line">vi purge.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">purge.conf 文件内容为：</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 192.168.200.129;# 此处我配置的是本机ip</span><br><span class="line">    charset utf8;</span><br><span class="line"></span><br><span class="line">    location ~ /purge(/.*) &#123;</span><br><span class="line">        allow   all;# 访问此接口的白名单，all代表所有人都可以访问该路径</span><br><span class="line">        # tmpcache 为前文中 proxy_cache_path 里配置的 keys_zone 的值</span><br><span class="line">        # www.domain.com$1$is_args$args 表示缓存key的名称，清除某一域名下的缓存,可以指定参数</span><br><span class="line">        # $1 代表正则匹配中的第一组</span><br><span class="line">        proxy_cache_purge cachefile www.domain.com$1$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存 purge.conf 文件</span></span><br></pre></td></tr></table></figure><h2 id="测试清除缓存"><a href="#测试清除缓存" class="headerlink" title="测试清除缓存"></a>测试清除缓存</h2><p>如果要进行缓存清除，首先需要有缓存文件，此处参照前文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a> 中，访问 <strong>www.domain.com/testpage2</strong>  ，刷新页面，直到缓存已经生成，即 <strong>X-Cache</strong> 的状态为 <strong>HIT</strong>。</p><p>进入 <strong>cd /tmp/cache/</strong> ，查看已经生成了缓存文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170910/223443897.png" alt="mark" title="">                </div>                <div class="image-caption">mark</div>            </figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 nginx 配置是否正确</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示 is ok，说明配置没有问题，否则需要修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 Nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>浏览器访问（也可以通过 curl 命令来访问）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除key为 www.domain.com/ 的缓存</span></span><br><span class="line">192.168.200.129/purge/    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除 key 为 www.domain.com/testpage2 页面缓存</span></span><br><span class="line">192.168.200.129/purge/testpage2</span><br></pre></td></tr></table></figure><p>如果返回  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170911/055142311.png" alt="">  </p><p>则表示清除成功。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p><a href="http://ojt4b2cr5.bkt.clouddn.com/conf.zip" target="_blank" rel="noopener">示例nginx配置文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前文介绍了利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，并设置了缓存时间为一天。&lt;/p&gt;
&lt;p&gt;但是如果前端修改了页面，比如首页，由于 Nginx 缓存的存在，网站首页并不会立即生效，而是要等到缓存过期。这样明显不是我们想要的结果，所以需要进行手动使 Nginx 缓存失效。以下为操作详解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="缓存" scheme="http://nullpointer.pw/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>为什么我们会感觉到倦怠?</title>
    <link href="http://nullpointer.pw/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%BC%9A%E6%84%9F%E8%A7%89%E5%88%B0%E5%80%A6%E6%80%A0%EF%BC%9F.html"/>
    <id>http://nullpointer.pw/为什么我们会感觉到倦怠？.html</id>
    <published>2017-09-04T14:14:00.000Z</published>
    <updated>2017-12-03T11:00:08.493Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么产生倦怠？"><a href="#为什么产生倦怠？" class="headerlink" title="为什么产生倦怠？"></a>为什么产生倦怠？</h2><p>刚开始 接手新项目、学习新技能时，我们总是兴奋不已、踌躇满志、迫不及待地想大展身手。但是过了不久，新鲜感退却后，大部分热情就会消退，最终就会兴趣索然，积极性低，进展缓慢或者毫无进展。</p><a id="more"></a><p>这样的事情很多，比如：</p><ul><li>刚开始学习驾驶，是不是很兴奋？过了多久之后，就不再真正关心你的车了？多久以后，你已经觉得它已经“老”了？</li><li>雄心勃勃地想锻炼出一副好身材，办了健身卡后，去了几次之后就再没去过了？</li><li>……</li></ul><p>我们当开始倦怠，于是我们半途而废，努力寻找新事物，找回自己真正的激情。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170904/213718521.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>开始的时候我们的兴趣最高，而动机在开始阶段可能不高，但是随着取得进展，我们的动机水平开始上升。早期的成功让你感觉到有动力，冲量则推动你前进。</p><p>但是随着时间的推移，缓慢的成果进展在不断消耗你的动机，最终会发现动机和兴趣都濒临谷底，这就是那堵墙，也就是我们感觉倦怠的原因。</p><p>但是如果我们穿过了这道墙，我们的动机、兴趣会随着成果的不断取得而不断上升加强，最终我们获得了最大的回报，只是能够穿过这道墙的人很少。</p><h2 id="如何穿过这道墙？"><a href="#如何穿过这道墙？" class="headerlink" title="如何穿过这道墙？"></a>如何穿过这道墙？</h2><p>制定一个目标或计划，采取“定额工作法”，并坚决按照计划完成定额工作。</p><p>首先需要确立一个目标，规定自己要在预定确定的时间段内需要取得多大的进展。</p><p>比如：</p><ul><li>每周跑步 3 次</li><li>每周写一篇博客</li><li>每天看半小时的书</li><li>每天弹半小时的吉他</li></ul><p>将所有重复性工作的频率进行量化，有的一月一次，有的一周3次，有的则是每天两次。并承诺完成，无论刮风下雨。</p><p><strong>承诺是定额工作法的核心，除了想方设法完成自己的工作，不给自己留下任何其他的选择。</strong> 失败不能被接受，因为你让自己失信一次，就会有第二次，很快定额在你眼中就会变得一文不值。</p><p>定额工作法的优点还可以帮你克服意志力薄弱的问题。<strong>通过预先设定好的必须要遵循的过程，消除需要作出决策的部分。</strong> 即不需要做判断——你知道必须要做，只需要遵从命令，避免了意志力耗尽的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么产生倦怠？&quot;&gt;&lt;a href=&quot;#为什么产生倦怠？&quot; class=&quot;headerlink&quot; title=&quot;为什么产生倦怠？&quot;&gt;&lt;/a&gt;为什么产生倦怠？&lt;/h2&gt;&lt;p&gt;刚开始 接手新项目、学习新技能时，我们总是兴奋不已、踌躇满志、迫不及待地想大展身手。但是过了不久，新鲜感退却后，大部分热情就会消退，最终就会兴趣索然，积极性低，进展缓慢或者毫无进展。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存配置</title>
    <link href="http://nullpointer.pw/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE.html"/>
    <id>http://nullpointer.pw/Nginx缓存配置.html</id>
    <published>2017-08-20T08:09:08.000Z</published>
    <updated>2017-12-03T11:02:31.803Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文介绍利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，前几篇文章介绍了 Nginx 的动静分离以及 CDN 技术，在其基础上，再对整个页面进行缓存，将大大提高服务器的负载能力。</p></blockquote><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li><a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85">CentOS 6.8 minimal</a></li><li><a href="http://nginx.org/download/nginx-1.12.1.tar.gz" target="_blank" rel="noopener">Nginx 1.12.1</a></li><li><a href="http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz" target="_blank" rel="noopener">ngx_cache_purge-2.3</a></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Nginx 与 nginx_ngx_cache_purge 下载解压</p><p>安装 <em>wget</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>下载 <em>Nginx</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压 <em>Nginx</em> 到 <em>/usr/local/src/</em> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.8.1.tar.gz -C /usr/local/src/</span><br></pre></td></tr></table></figure><p>下载 <em>ngx_cache_purge</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz</span><br></pre></td></tr></table></figure><p>解压到 Nginx 同一级目录  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ngx_cache_purge-2.3.tar.gz -C /usr/local/src/</span><br></pre></td></tr></table></figure><p>目录结构为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---/usr/local/src</span><br><span class="line">   --nginx-1.8.1</span><br><span class="line">   --ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure></p><p>进入 Nginx 解压目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.8.1</span><br></pre></td></tr></table></figure></p><p>安装必要依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>检查安装环境,并指定将来要安装的路径和要安装的插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx/ --with-http_realip_module --add-module=../ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure></p><p>参数说明：<br>–prefix： 将 nginx 安装到此目录<br>–with-http_realip_module 启用获取用户真实 IP 模块<br>–add-module=../ngx_cache_purge-2.3 添加 ngx_cache_purge 模块，用于缓存  </p><p>进行编译安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>编译完成后，没有出现 error 为编译安装成功</p><h2 id="设置-Nginx-缓存"><a href="#设置-Nginx-缓存" class="headerlink" title="设置 Nginx 缓存"></a>设置 Nginx 缓存</h2><p>编辑 <em>nginx.conf</em> 配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>添加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要在 /tmp 目录下创建 cache 文件夹！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置缓存区的名称为 tmpcache，内存缓存空间大小为 200MB，1 天没有被访问的内容自动清除，硬盘缓存空间大小为 5GB， 如果访问频率不高的话， inactive 时间可以设置长一些。</span></span><br><span class="line">proxy_cache_path /tmp/cache levels=1:2 keys_zone=tmpcache:200m inactive=1d max_size=5g;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  www.domain.com;#你的域名</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">proxy_set_header        Host            $host;</span><br><span class="line">proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header        X-Up-Calling-Line-Id $http_x_up_calling_line_id;</span><br><span class="line">proxy_ignore_headers    X-Accel-Expires Expires Cache-Control Set-Cookie;</span><br><span class="line"></span><br><span class="line">access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line"><span class="meta">#</span><span class="bash">proxy_cache 的值是 proxy_cache_path 中的 keys_zone 的值</span></span><br><span class="line">proxy_cache tmpcache;</span><br><span class="line"><span class="meta">#</span><span class="bash">缓存 key 的值</span></span><br><span class="line">proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">proxy_cache_valid 200 301 5m;</span><br><span class="line">proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">expires 1m;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将缓存的状态添加到 Header 中</span></span><br><span class="line">add_header X-Cache '$upstream_cache_status';</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="启动-Tomcat"><a href="#启动-Tomcat" class="headerlink" title="启动 Tomcat"></a>启动 Tomcat</h2><p>可以使用自己的项目，或者使用我提供的项目来进行测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://ojt4b2cr5.bkt.clouddn.com/SpringDemo.war</span><br></pre></td></tr></table></figure><p>将下载的 war 包放到 Tomcat 的 webapps 目录下，修改 war 包名称为 ROOT.war ，启动 Tomcat。</p><h2 id="测试-Nginx-缓存"><a href="#测试-Nginx-缓存" class="headerlink" title="测试 Nginx 缓存"></a>测试 Nginx 缓存</h2><p>缓存之前</p><p>查看 <strong>/tmp/cache</strong> 目录， 目录下面没有任何文件</p><p>修改本机（windows）的 hosts 文件，将配置的域名指向服务器 IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.129 www.domain.com</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <strong>www.domain.com/testpage1</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170820/131820402.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现 <strong>X-Cache</strong> 的状态为 <strong>MISS</strong> ，说明没有缓存。</p><p>再次刷新页面后  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170820/133616261.png" alt=""></p><p><strong>X-Cache</strong> 的状态已经变成了 <strong>HIT</strong></p><p>同时在服务器上查看 <strong>/tmp/cache</strong> 目录</p><p><code>cd /tmp/cache/</code></p><p>发现该目录下面已经多了文件目录，进去之后打开文件，发现正是刚刚访问页面的源码，说明 Nginx 的缓存已经配置成功了。只要是配置的域名下面的页面， 如果没有进行过滤，都会缓存到服务器。当第二次访问的时候，请求经过 Nginx 服务器时，Nginx 直接返回已经缓存的静态页面，这样将大大降低应用服务器 Tomcat 的负载。</p><p><strong>需要注意的是：并不是该域名下的所有页面都需要进行缓存，如果缓存有误，会出现很严重的问题。比如不正确的将域名下的用户中心进行了缓存，当其他用户也进入页面的时候，显示的全部都是第一个进入该页面用户的信息。因此建议做缓存时，最好根据域名来做， 根据用户不同显示不同的页面的地址就不要做缓存。当然，如果接口地址规范，亦可以通过 Nginx 正则匹配路径的方式，只将某些匹配的路径做缓存。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文介绍利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，前几篇文章介绍了 Nginx 的动静分离以及 CDN 技术，在其基础上，再对整个页面进行缓存，将大大提高服务器的负载能力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="缓存" scheme="http://nullpointer.pw/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>阿里云CDN实现网站文件动静分离</title>
    <link href="http://nullpointer.pw/%E9%98%BF%E9%87%8C%E4%BA%91CDN%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E6%96%87%E4%BB%B6%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.html"/>
    <id>http://nullpointer.pw/阿里云CDN实现网站文件动静分离.html</id>
    <published>2017-08-19T23:21:04.000Z</published>
    <updated>2017-12-03T10:58:46.334Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章介绍了如何利用 Nginx 来实现静态资源请求与动态请求的分离，虽然不是所有的请求都压到 Tomcat 应用服务器，但是静态资源请求还是都会到 主机上给主机带来压力，因此本文通过利用阿里云的 CDN 技术来更加彻底地降低应用访问的负载。</p><a id="more"></a><h2 id="配置静态资源域名"><a href="#配置静态资源域名" class="headerlink" title="配置静态资源域名"></a>配置静态资源域名</h2><p>建立一个只用于请求静态资源文件的二级域名，将动态请求与静态请求分离开。</p><p>比如静态资源请求的域名是 <strong>res.domain.com</strong> ， 动态请求的域名是 <strong>www.domain.com</strong></p><h2 id="配置-Nginx-静态资源设置"><a href="#配置-Nginx-静态资源设置" class="headerlink" title="配置 Nginx  静态资源设置"></a>配置 Nginx  静态资源设置</h2><p>参考我的上一篇文章 <a href="http://nullpointer.pw/2017/08/19/Nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/">Nginx动静分离</a></p><h2 id="阿里云-CDN-配置"><a href="#阿里云-CDN-配置" class="headerlink" title="阿里云 CDN 配置"></a>阿里云 CDN 配置</h2><p>登录阿里云 CDN 控制台，添加域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170820/070050098.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>需要注意的是资源文件只需要放到一台主机上即可，方便管理。</p><p>添加 CDN 域名成功后，回到域名管理页面， 在域名列表中找到新加的域名，光标悬浮到该域名上，会出现一个 <strong>复制 CNAME</strong> 的按钮，选择复制，会得到一个类似于 <strong>res.domain.com.w.kunlunle.com</strong> 的域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170820/070354748.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="DNS-配置"><a href="#DNS-配置" class="headerlink" title="DNS 配置"></a>DNS 配置</h2><p>进入你的域名的 DNS 服务提供商控制台，我这里是 <a href="https://www.dnspod.cn/" target="_blank" rel="noopener">DNSPOD</a> ， 找到静态资源域名，我的是 <strong>res.domain.com</strong> 修改记录类型为 CNAME ，记录值修改为上一步复制的 域名，如 <strong>res.domain.com.w.kunlunle.com。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170820/071213172.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择保存，等待几分钟 DNS 生效后，访问域名试试吧！</p><p>比如我的 <strong>res.domain.com/_res/a.jpg</strong> （需要事先在资源服务器上事先放置该静态文件） 如果访问不到说明配置有误或者缓存还未生效。这里有一个坑就是，自己的电脑有可能因为缓存没刷新访问不到该路径静态资源，而别人的电脑可以，可以换一台电脑尝试访问，或者通过手机浏览器访问尝试。</p><p>End。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇文章介绍了如何利用 Nginx 来实现静态资源请求与动态请求的分离，虽然不是所有的请求都压到 Tomcat 应用服务器，但是静态资源请求还是都会到 主机上给主机带来压力，因此本文通过利用阿里云的 CDN 技术来更加彻底地降低应用访问的负载。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="动静分离" scheme="http://nullpointer.pw/tags/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx动静分离</title>
    <link href="http://nullpointer.pw/Nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.html"/>
    <id>http://nullpointer.pw/Nginx动静分离.html</id>
    <published>2017-08-19T09:44:23.000Z</published>
    <updated>2017-12-03T11:02:15.572Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最新公司新开了一个项目，项目由我来配置基础环境，会写一系列的教程来展示，一个网站从零到上线的整个过程。首先本文介绍资源文件的隔离。  </p><a id="more"></a><h2 id="为什么要实现动静分离"><a href="#为什么要实现动静分离" class="headerlink" title="为什么要实现动静分离"></a>为什么要实现动静分离</h2><p>为什么要将静态资源文件与动态请求进行分离？ 为了降低 Tomcat 服务器的负载，可以通过本文设置并结合 CDN 来实现来更彻底地降低服务器的负载。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/192205341.png" alt=""></p><p>如图所示，所有的请求都压到了同一台服务器上， 无论静态还是动态的请求，这样流量大的话势必会造成服务器的负载过高，因为动静分离是必不可少的。</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>首先这是我们项目的目录结构， <strong>resource</strong> 目录和 <strong>_res</strong> 目录中都是静态资源文件，存放比如 js/css/img 等资源。这两个目录下的文件有所不同，<strong>_res</strong> 目录下面是压缩版本的，比如压缩的js/css。通过 Git 或者 SVN 将项目上传到服务器上后，配置 Nginx 来完成静态资源的分离。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/131159884.png" alt=""></p><p>首先看一张图(图的来源是：<a href="http://www.cnblogs.com/xiaoblog/p/4241086.html" target="_blank" rel="noopener">http://www.cnblogs.com/xiaoblog/p/4241086.html</a>)  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/130334830.png" alt=""></p><p>当请求经过 Nginx 时，如果是静态资源的请求，就直接返回主机上静态资源即可， 如果是动态请求，则去请求 Tomcat 服务器后再返回。如果流量不是很大，静态资源可以和 Tomcat 服务器放在同一台主机上，否则需要将静态资源与 Tomcat 服务器分开。</p><p>我司对于资源文件的做法是新建一个二级域名，该域名只用于加载静态资源文件。如 <strong>res.domain.com</strong>，这样做的好处是简化了在 Nginx 的 配置。</p><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>首先需要安装 Nginx， 可以参考我的另外一篇文章 <a href="http://nullpointer.pw/2017/05/05/Nginx%E5%AE%9E%E7%8E%B0Tomcat%E9%9B%86%E7%BE%A4/">Nginx实现Tomcat集群</a>。这里只需要参考到安装 Nginx 即可。</p><p>Nginx 静态资源配置</p><p>打开 Nginx 配置文件</p><p><code>vim /usr/local/nginx/conf/nginx.conf</code></p><p>添加 server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"><span class="comment"># 只接收静态资源请求</span></span><br><span class="line">listen       80;</span><br><span class="line">server_name   res.domain.com;</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">default_type            text/plain;</span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line"><span class="comment">#access_log logs/heiyan.image.access.log  click;</span></span><br><span class="line"></span><br><span class="line">location ~* \.(zip|rar|gz|tar.gz|gz|exe)$ &#123;</span><br><span class="line"><span class="built_in">return</span> 500;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment">#资源文件的目录</span></span><br><span class="line">root /home/resources;</span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">expires 30d;</span><br><span class="line">default_type      text/plain;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment"># 接收动态请求</span></span><br><span class="line">listen       80;</span><br><span class="line">server_name  www.domain.com;</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拷贝项目中资源文件到指定的资源目录"><a href="#拷贝项目中资源文件到指定的资源目录" class="headerlink" title="拷贝项目中资源文件到指定的资源目录"></a>拷贝项目中资源文件到指定的资源目录</h2><p>在 Nginx 的配置文件中指定了资源文件的目录为 <strong>/home/resources</strong> ，所以需要将资源拷贝到该目录下，进入上文下载的项目的目录中，将资源目录（我这里是<strong>_res</strong>目录)拷贝到 <strong>/home/resources</strong>目录下面。</p><p><code>cp -rf _res /home/resources</code></p><p>拷贝完成后的目录应该是： <code>/home/resources/_res</code></p><p>在 <strong>/home/resources/_res</strong> 目录下放一张图片 a.jpg ，用于测试。</p><h2 id="测试静态资源获取"><a href="#测试静态资源获取" class="headerlink" title="测试静态资源获取"></a>测试静态资源获取</h2><p>启动 Nginx</p><p>打开浏览器访问： <code>http://res.domain.com/_res/a.jpg</code></p><p>如果是动态请求，则使用 <code>http://www.domain.com</code> 域名</p><p>返回结果：  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/174007494.png" alt=""></p><p>因为静态资源文件包含 css/js 等文件，修改提交后需要拷贝增量与修改的文件到 <strong>/home/resources</strong> 目录下，如果嫌麻烦，可以直接在 Nginx 配置文件中，配置 路径为项目的资源文件夹根路径，比如 <strong>/home/wide-api/src/main/java/resources/_res</strong>， 这种在更新代码之后，可以直接请求到新的资源文件。之后会写一篇通过阿里云CDN来完成静态分离。</p><p>注： 由于我的是在虚拟机上的 Nginx 进行测试，也没有域名，且是minimal版本系统，没有桌面环境，所以需要配置宿主机的hosts， 在宿主机的浏览器中访问。在真实服务器且有自己绑定到服务器上域名的就直接测试即可。</p><p>使用 <em>SwitchHosts</em> 软件 配置 hosts，我的虚拟机 ip 为192.168.200.129</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.129 www.domain.com res.domain.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最新公司新开了一个项目，项目由我来配置基础环境，会写一系列的教程来展示，一个网站从零到上线的整个过程。首先本文介绍资源文件的隔离。  &lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="动静分离" scheme="http://nullpointer.pw/tags/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS快速安装</title>
    <link href="http://nullpointer.pw/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85.html"/>
    <id>http://nullpointer.pw/CentOS快速安装.html</id>
    <published>2017-08-18T23:40:27.000Z</published>
    <updated>2017-12-03T11:00:22.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习过程中需要使用到 Linux 系统，但是并没有服务器，因此通过虚拟机来完成。本文不从头开始介绍虚拟机的安装，只讲解 <strong>虚拟机自制镜像</strong> 备份的快速还原，如果你需要从头开始安装的，请另寻教程。<strong>本文中涉及的镜像会提供下载地址，以供参考</strong>。</p><p>学习过程中安装虚拟机时总是会遇到一些需要花费大量时间才能解决的问题，比如不能联网、数据库连接不上、ssh 连接不了等问题，为了便于学习，本人将安装好的系统导出为镜像文件，以后如果需要添加虚拟机时，直接还原镜像修改部分配置即可，以下为教程。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>虚拟机软件 VMware® Workstation 11</li><li>系统镜像版本 CentOS 6.8 minimal (命令行版本，无桌面)  </li><li>自定义镜像以及VMware下载   链接：<a href="http://pan.baidu.com/s/1nuKxhpf" target="_blank" rel="noopener">http://pan.baidu.com/s/1nuKxhpf</a> 密码：8dt8<br>若链接失效，发邮件给我补链接 <a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg" target="_blank" rel="noopener">联系我</a></li></ul><h2 id="VMware-配置"><a href="#VMware-配置" class="headerlink" title="VMware 配置"></a>VMware 配置</h2><p>需要安装的虚拟机采取 NAT 方式联网，因此 需要在 VMware 中配置网关地址。  </p><p>打开虚拟网络编辑器，设置子网 IP</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/070316487.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击 NAT 设置，设置网关地址IP （网关相当于一个路由器），注意网关 IP 要和子网 IP 处于同一个网段。如192.168.200.x    </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/070502251.png" alt=""></p><h2 id="导入镜像文件"><a href="#导入镜像文件" class="headerlink" title="导入镜像文件"></a>导入镜像文件</h2><p>依次选择菜单， 文件–&gt;打开–&gt; 找到下载镜像解压的文件夹，选择192.168.200.129.ovf 文件  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/071206741.png" alt=""></p><p>设置虚拟机名称和虚拟机保存路径，选择导入。</p><p>稍等一会儿导入成功后，开启虚拟机。</p><h2 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h2><p>登录账号：root   密码：123456</p><p>刚安装完是无法 ping 通外网的，需要修改网络配置， 当前镜像已经设置了静态 ip，便于使用。</p><ol><li>修改 70-persistent-net.rules 文件  </li></ol><p><code>vi /etc/udev/rules.d/70-persistent-net.rules</code></p><p>注释掉 eth0 所在行，结果应该为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> PCI device 0x8086:0x100f (e1000)</span><br><span class="line"><span class="meta">#</span>SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR&#123;address&#125;=="00:0c:29:30:a4:b5", ATTR&#123;type&#125;=="1", KERNEL=="eth*", NAME="eth0"</span><br><span class="line"><span class="meta">#</span> PCI device 0x8086:0x100f (e1000)</span><br><span class="line">SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR&#123;address&#125;=="00:0c:29:cd:05:ea", ATTR&#123;type&#125;=="1", KERNEL=="eth*", NAME="eth1"</span><br></pre></td></tr></table></figure></p><ol><li>修改网络配置文件，设置静态IP地址和网关地址<br><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth1 # 修改eth0 为eth1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.200.132  # 修改为想要的静态ip地址， 如果网关地址为192.168.100.2  则ip地址为 192.168.100.x  x为1-254，且不与网关地址重复</span><br><span class="line">GATEWAY=192.168.200.2   # 修改为你虚拟机的网关地址 IP</span><br><span class="line">NAME="System eth0"</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=4.4.4.4</span><br></pre></td></tr></table></figure><ol><li><p>重启虚拟机  <strong>reboot</strong> 这是必须的步骤！</p></li><li><p>检验是否修改生效</p><p>重启登录成功后， 输入 <strong>ip addr</strong>， 如果你显示的和我一致，则是正确的。</p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/072943215.png" alt=""></p></li></ol><p>如果你的出现了两条 inet， 说明第 1 步， 和第 2 步没有配置正确。此时 <strong>ping</strong> 一下百度，发现已经可以 ping 通了。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/073150774.png" alt=""></p><p>至此，虚拟机已经配置好了。可以通过 SSH 软件进行连接了。</p><p>建议：虚拟机安装完成后，对其进行快照，防止弄坏了还需要重新安装。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170819/073454049.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在快照管理器中，可以选择保存的快照，还原到快照时的系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学习过程中需要使用到 Linux 系统，但是并没有服务器，因此通过虚拟机来完成。本文不从头开始介绍虚拟机的安装，只讲解 &lt;strong&gt;虚拟机自制镜像&lt;/strong&gt; 备份的快速还原，如果你需要从头开始安装的，请另寻教程。&lt;strong&gt;本文中涉及的镜像会提供下载地址，以供参考&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习过程中安装虚拟机时总是会遇到一些需要花费大量时间才能解决的问题，比如不能联网、数据库连接不上、ssh 连接不了等问题，为了便于学习，本人将安装好的系统导出为镜像文件，以后如果需要添加虚拟机时，直接还原镜像修改部分配置即可，以下为教程。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://nullpointer.pw/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="centos" scheme="http://nullpointer.pw/tags/centos/"/>
    
      <category term="虚拟机" scheme="http://nullpointer.pw/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java之word导出下载</title>
    <link href="http://nullpointer.pw/Java%E4%B9%8Bword%E5%AF%BC%E5%87%BA%E4%B8%8B%E8%BD%BD.html"/>
    <id>http://nullpointer.pw/Java之word导出下载.html</id>
    <published>2017-07-27T14:12:07.000Z</published>
    <updated>2017-12-11T13:13:58.035Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到项目需求需要将数据库中的部分数据导出到 word 中，具体是在一个新闻列表中将选中的新闻导出到一个 word 中。参考了网上一些教程，实现了该功能，在此记录下来。</p><a id="more"></a><p>导出结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170726/222116065.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图中为导出的其中两条新闻。</p><p>搜索网上导出 word 的方式有很多种，但是很多都是一笔带过，有示例代码的只找到了 POI 导出，和通过 FreeMarker 方式导出，但是只是具有参考意义。本文采取使用 FreeMark 方式。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li><p>Maven 工程引入FreeMarker 的依赖，非 Maven 工程添加 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.26-incubating<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 word 模板</p><ol><li><p>新建 word 替换内容为占位符  </p><p> <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170726/223450741.png" alt=""></p></li><li><p>另存模板为 XML 文件  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170726/223613199.png" alt=""></p></li><li><p>使用 NotePad++ 打开 xml 文件</p></li><li><p>选中全部内容，到<a href="http://tool.oschina.net/codeformat/xml" target="_blank" rel="noopener">这里</a>进行格式化</p></li><li><p>将原内容替换为格式化后的内容</p></li><li><p>因为我的 word 的内容是一个列表，所以需要添加一个 freemarer 标签标识</p></li><li><p>找到<code>&lt;w:document&gt;</code> 元素下面的 <code>&lt;w:body&gt;</code> 元素，添加<code>&lt;#list newsList news&gt;</code> ， 并在<code>&lt;/w:body&gt;</code>结束标签之前闭合 <code>&lt;/#list&gt;</code>， 此处的 <strong>newsList</strong> 为后台读取模板时需要需要渲染数据map集合的key， 其所对应的是一个list集合。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170726/224610046.png" alt=""></p></li><li><p>替换模板中的占位符 <code>&lt;w:t&gt;${news.title}&lt;/w:t&gt;</code> 与 <code>&lt;w:t&gt;${news.content}&lt;/w:t&gt;</code> 为遍历集合的值，这里的 FreeMarker 语法可以参考网上的教程。</p></li><li><p>保存为 FreeMarker 的模板文件，后缀为 ftl 格式，拷贝到项目中  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170726/224037421.png" alt=""></p></li></ol></li><li><p>编写代码</p><ol><li><p>从数据中查询数据集合放入Map中， 调用工具方法，返回流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; root = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">root.put(<span class="string">"newsList"</span>, newsList);<span class="comment">//newsList为新闻对象集合</span></span><br><span class="line">String template = <span class="string">"/temp.ftl"</span>;  <span class="comment">//模板文件的地址</span></span><br><span class="line">ByteArrayOutputStream outputStream = WordUtil.process(root, template);</span><br><span class="line"><span class="keyword">return</span> outputStream;</span><br></pre></td></tr></table></figure></li><li><p>调用下载工具类进行下载即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DownloadUtil.download(byteArrayOutputStream, response, returnname);</span><br></pre></td></tr></table></figure></li></ol><p>注：在实现功能的时候，由于采取的是 ajax 请求方式，导致只是将流写入 Response 时， Response 为 xml 格式的数据。但是想要实现的效果是弹出下载框，下载 word 文档。最后查询资料，修改ajax请求为form表单提交方式(ajax form)，才弹出下载框实现了功能。</p></li></ol><h2 id="文章涉及工具类"><a href="#文章涉及工具类" class="headerlink" title="文章涉及工具类"></a>文章涉及工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WordUtil.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">WordUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据模板生成相应的文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> root 保存数据的map</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> template 模板文件的地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> path 生成的word文档输出地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ByteArrayOutputStream <span class="title">process</span><span class="params">(Map&lt;?, ?&gt; root, String template)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == root ) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == template) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"模板文件不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">String templatePath = template.substring(<span class="number">0</span>, template.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">String templateName = template.substring(template.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, template.length());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == configuration) &#123;</span><br><span class="line">  configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);  <span class="comment">// 这里Configurantion对象不能有两个，否则多线程访问会报错</span></span><br><span class="line">  configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">  configuration.setClassicCompatible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">configuration.setClassForTemplateLoading(WordUtil.class, templatePath);</span><br><span class="line"></span><br><span class="line">Template t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  t = configuration.getTemplate(templateName);</span><br><span class="line">  Writer w = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"utf-8"</span>));</span><br><span class="line">  t.process(root, w);  <span class="comment">// 这里w是一个输出地址，可以输出到任何位置，如控制台，网页等</span></span><br><span class="line">  w.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> outputStream;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DownloadUtil.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> byteArrayOutputStream 将文件内容写入ByteArrayOutputStream</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> response HttpServletResponse写入response</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(ByteArrayOutputStream byteArrayOutputStream, HttpServletResponse response, String returnName)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">"application/msword"</span>);</span><br><span class="line">  response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span> + returnName);</span><br><span class="line">  response.setContentLength(byteArrayOutputStream.size());</span><br><span class="line">  OutputStream outputstream = response.getOutputStream();<span class="comment">//取得输出流</span></span><br><span class="line">  byteArrayOutputStream.writeTo(outputstream);<span class="comment">//写到输出流</span></span><br><span class="line">  byteArrayOutputStream.close();<span class="comment">//关闭</span></span><br><span class="line">  outputstream.flush();<span class="comment">//刷数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="http://ojt4b2cr5.bkt.clouddn.com/wordDemo.zip" target="_blank" rel="noopener">点我下载</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://itindex.net/detail/55080-springboot-freemarker-%E6%A0%BC%E5%BC%8F" target="_blank" rel="noopener">http://itindex.net/detail/55080-springboot-freemarker-%E6%A0%BC%E5%BC%8F</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到项目需求需要将数据库中的部分数据导出到 word 中，具体是在一个新闻列表中将选中的新闻导出到一个 word 中。参考了网上一些教程，实现了该功能，在此记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="word" scheme="http://nullpointer.pw/tags/word/"/>
    
      <category term="freemarker" scheme="http://nullpointer.pw/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>Java配置分离之Spring远程配置</title>
    <link href="http://nullpointer.pw/Java%E9%85%8D%E7%BD%AE%E5%88%86%E7%A6%BB%E4%B9%8B%E8%BF%9C%E7%A8%8B%E9%85%8D%E7%BD%AE.html"/>
    <id>http://nullpointer.pw/Java配置分离之远程配置.html</id>
    <published>2017-07-16T01:14:30.000Z</published>
    <updated>2017-07-16T01:18:23.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集群应用的配置文件如果写在项目的 <strong>resources</strong> 目录下面，当遇到需要修改某一个配置值时，需要将集群的所有应用的配置信息进行修改，并且将机密的配置信息比如数据库账号密码如果不进行加密配置在项目中很危险，一旦发生代码泄露问题，后果很严重。</p><p>为了避免上述情况发生，将配置信息存储到数据库中，比如数据库连接、用户名、以及密码，通过 Config 项目的一个<strong>接口</strong>提供获取配置信息。Config 项目只用于读取配置信息。</p><a id="more"></a><h2 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h2><p>一）新建类 <strong>RemoteProperties</strong>   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteProperties</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">FactoryBean</span>&lt;<span class="title">Properties</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> properties.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        loadProperty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.strIsNull(url)) <span class="keyword">return</span>;</span><br><span class="line">        String content = HttpClientUtil.urlGet(url);</span><br><span class="line"></span><br><span class="line">        JSONObject object = JSONObject.parseObject(content);</span><br><span class="line">        JSONArray data = object.getJSONArray(<span class="string">"datasource"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj : data) &#123;</span><br><span class="line">            JSONObject jsonObject = (JSONObject) obj;</span><br><span class="line">            String key = obj.getString(<span class="string">"key"</span>);</span><br><span class="line">            String value = obj.getString(<span class="string">"value"</span>);</span><br><span class="line">            properties.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类用于发送请求获取配置信息，请求返回格式为 JSON 的配置信息, 如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"datasource"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"com.mysql.jdbc.Driver"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.driver"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.url"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.username"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二）编写 Spring 配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurerUserServer"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"remoteProperties"</span> <span class="attr">class</span>=<span class="string">"com.craft.partner.server.util.RemoteProperties"</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">p:url</span>=<span class="string">"http://api.xxx.com/config"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--远程配置提供接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--还可以加载本地的properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:configure.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:driverClass</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">p:jdbcUrl</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:user</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"600"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"300"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"2000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--其他不符合规范的方法只允许读操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethod"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.craft.partner.server.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethod"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意： 通过 <strong>p:url=”地址”</strong> 的方式，调用 RemoteProperties 的方法，发送请求获取配置信息，通过 Spring 进行注入。<br>注入后，可以通过 <strong>p:属性</strong> 的方式获取配置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/yjmyzz/p/how-to-load-remote-config-in-spring.html" target="_blank" rel="noopener">http://www.cnblogs.com/yjmyzz/p/how-to-load-remote-config-in-spring.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;集群应用的配置文件如果写在项目的 &lt;strong&gt;resources&lt;/strong&gt; 目录下面，当遇到需要修改某一个配置值时，需要将集群的所有应用的配置信息进行修改，并且将机密的配置信息比如数据库账号密码如果不进行加密配置在项目中很危险，一旦发生代码泄露问题，后果很严重。&lt;/p&gt;
&lt;p&gt;为了避免上述情况发生，将配置信息存储到数据库中，比如数据库连接、用户名、以及密码，通过 Config 项目的一个&lt;strong&gt;接口&lt;/strong&gt;提供获取配置信息。Config 项目只用于读取配置信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="远程配置" scheme="http://nullpointer.pw/tags/%E8%BF%9C%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java上传图片到OSS的实现</title>
    <link href="http://nullpointer.pw/Java%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0OSS%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://nullpointer.pw/Java上传图片到OSS的实现.html</id>
    <published>2017-05-06T15:01:57.000Z</published>
    <updated>2017-12-03T11:00:44.683Z</updated>
    
    <content type="html"><![CDATA[<p>前言：  以前做项目用的都是开源的分布式系统，如FastDFS。<br>最近几年，随着云的发展，国内外的巨头公司也相应的推出了相关商用的类似产品。<br>比如Amazon S3，阿里云的OSS，腾讯云的COS。<br>今天我选择使用阿里云的OSS来作为例子，来实现图片的上传。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://help.aliyun.com/document_detail/32008.html" target="_blank" rel="noopener">阿里云OSS官方文档地址</a></p><h3 id="一、开通阿里云OSS"><a href="#一、开通阿里云OSS" class="headerlink" title="一、开通阿里云OSS"></a>一、开通阿里云OSS</h3><ol><li>登录阿里云控制台开通OSS服务，并创建<code>AccessKeyId</code>和<code>AccessKeySecret</code></li><li>在OSS控制面板上新建Bucket<br><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170506/221118419.png" alt=""></li><li>进入新建的Bucket<br>选择左侧的Object管理，新建一个<code>img</code>的文件夹，便于存储归类</li></ol><h3 id="二、maven项目中引入依赖"><a href="#二、maven项目中引入依赖" class="headerlink" title="二、maven项目中引入依赖"></a>二、maven项目中引入依赖</h3><p>在maven工程中的pom.xml添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><blockquote><p>注：我所使用的的框架是：SpringMVC+Spring+Mybatis  </p></blockquote><h3 id="一、上传文件到OSS之HelloWorld"><a href="#一、上传文件到OSS之HelloWorld" class="headerlink" title="一、上传文件到OSS之HelloWorld"></a>一、上传文件到OSS之HelloWorld</h3><p>上传图片之前，先惯例来一个HelloWorld示例！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.ObjectMetadata;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.nullpointer.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.nullpointer.service.AliyunOSSService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunOSSServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliyunOSSService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMG = <span class="string">"img/"</span>;<span class="comment">//对应Object的文件夹名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxLength = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//简单上传OSS限制为5G以下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENDPOINT = File.separatorChar == <span class="string">'/'</span> ? <span class="string">"oss-cn-hangzhou-internal.aliyuncs.com"</span> : <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;<span class="comment">//用于选择不同的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSClient client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OSSClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String accessId = <span class="string">"xxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessId， 在OSS控制台可以生成</span></span><br><span class="line">        String accessKey = <span class="string">"xxxxxxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessKey</span></span><br><span class="line">        bucketName = <span class="string">"xxxxx"</span>;<span class="comment">//创建的Bucket的名称，注意要一致区分大小写</span></span><br><span class="line"></span><br><span class="line">        client = <span class="keyword">new</span> OSSClient(ENDPOINT, accessId, accessKey);<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadIm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">"Hello OSS"</span>;</span><br><span class="line">        PutObjectResult test01 = client.putObject(bucketName, <span class="string">"test01"</span>, <span class="keyword">new</span> ByteArrayInputStream(content.getBytes()));</span><br><span class="line">        <span class="keyword">return</span> test01.getETag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开OSS控制台的Object管理，是不是发现新增了一个文件呢？<br><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170506/222456581.png" alt=""></p><h3 id="二、编写图片上传服务类"><a href="#二、编写图片上传服务类" class="headerlink" title="二、编写图片上传服务类"></a>二、编写图片上传服务类</h3><p>HelloWorld示例完成了，开始正式编写图片上传代码了。注释都有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunOSSServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliyunOSSService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMG = <span class="string">"img/"</span>;<span class="comment">//对应Object的文件夹名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxLength = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//简单上传OSS限制为5G以下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENDPOINT = File.separatorChar == <span class="string">'/'</span> ? <span class="string">"oss-cn-hangzhou-internal.aliyuncs.com"</span> : <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;<span class="comment">//用于选择不同的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSClient client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OSSClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String accessId = <span class="string">"xxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessId， 在OSS控制台可以生成</span></span><br><span class="line">        String accessKey = <span class="string">"xxxxxxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessKey</span></span><br><span class="line">        bucketName = <span class="string">"xxxxx"</span>;<span class="comment">//创建的Bucket的名称，注意要一致区分大小写</span></span><br><span class="line"></span><br><span class="line">        client = <span class="keyword">new</span> OSSClient(ENDPOINT, accessId, accessKey);<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public String uploadIm() &#123;</span></span><br><span class="line"><span class="comment">        String content = "Hello OSS";</span></span><br><span class="line"><span class="comment">        PutObjectResult test01 = client.putObject(bucketName, "test01", new ByteArrayInputStream(content.getBytes()));</span></span><br><span class="line"><span class="comment">        return test01.getETag();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String fileName = <span class="keyword">this</span>.saveImage(file.getSize(), file.getOriginalFilename(), file.hashCode(), file.getInputStream());</span><br><span class="line">            <span class="keyword">return</span> getHttpUrl(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getHttpUrl</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Constants.OSS_HTTP + <span class="string">"/"</span> + IMG + fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(<span class="keyword">long</span> size, String extName, <span class="keyword">int</span> hashCode, InputStream is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; maxLength)<span class="comment">//超过5G</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String name = extName.toLowerCase();</span><br><span class="line">        name = name.substring(name.indexOf(<span class="string">"."</span>));<span class="comment">//获得上传文件的后缀名称如 .jpg</span></span><br><span class="line">        String fileName = System.currentTimeMillis() + <span class="string">"_"</span> + hashCode + name;<span class="comment">//为了防止重复， 使用时间戳+hashcode的方式来命名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.saveImage(size, fileName, is);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(<span class="keyword">long</span> size, String fileName, InputStream is)</span> </span>&#123;</span><br><span class="line">        String key = IMG + fileName;<span class="comment">//保存到img文件夹下</span></span><br><span class="line">        <span class="keyword">this</span>.uploadObject(key, size, is);</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadObject</span><span class="params">(String key, <span class="keyword">long</span> size, InputStream is)</span> </span>&#123;</span><br><span class="line">        ObjectMetadata metadata = <span class="keyword">new</span> ObjectMetadata();<span class="comment">//设置文件的meta信息</span></span><br><span class="line">        metadata.setContentLength(size);</span><br><span class="line">        metadata.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">        PutObjectResult result = client.putObject(bucketName, key, is);<span class="comment">//调用SDK的上传方法</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、编写Controller层的上传接口"><a href="#三、编写Controller层的上传接口" class="headerlink" title="三、编写Controller层的上传接口"></a>三、编写Controller层的上传接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadOSS</span><span class="params">(MultipartFile pic, HttpServletResponse response,  Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    String imgUrl = aliyunOSSService.saveImage(pic);</span><br><span class="line">    System.out.println(<span class="string">"path = "</span> + imgUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片回显</span></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"path"</span>, imgUrl);</span><br><span class="line">    response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">    response.getWriter().write(jsonObject.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：入参中的MultipartFIle是一个接口，需要在Spring的配置文件<code>applicationContext.xml</code>中将其实现类注入。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="四、编写页面JSP"><a href="#四、编写页面JSP" class="headerlink" title="四、编写页面JSP"></a>四、编写页面JSP</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.form.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function uploadPic() &#123;</span></span><br><span class="line"><span class="undefined">            var options = &#123;</span></span><br><span class="line"><span class="undefined">                url: "/upload",</span></span><br><span class="line"><span class="undefined">                type: "POST",</span></span><br><span class="line"><span class="undefined">                dataType: "json",</span></span><br><span class="line"><span class="undefined">                success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                    $("#imgUrl").attr("src", data.path);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            $("#jform").ajaxSubmit(options);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-fluid"</span> <span class="attr">align</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/uploadOSS"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"jform"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">class</span>=<span class="string">"img-polaroid"</span> <span class="attr">id</span>=<span class="string">"imgUrl"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span> <span class="attr">onchange</span>=<span class="string">"uploadPic()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面不是我所擅长，能显示效果即可。</p><h3 id="五、测试图片上传"><a href="#五、测试图片上传" class="headerlink" title="五、测试图片上传"></a>五、测试图片上传</h3><p><strong>启动项目，进入图片上传的页面。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170506/224108910.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>上传图片</strong><br>控制台打印了如下内容：<br><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170506/224449951.png" alt=""></p><p>页面显示：<br><img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170506/224526048.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：  以前做项目用的都是开源的分布式系统，如FastDFS。&lt;br&gt;最近几年，随着云的发展，国内外的巨头公司也相应的推出了相关商用的类似产品。&lt;br&gt;比如Amazon S3，阿里云的OSS，腾讯云的COS。&lt;br&gt;今天我选择使用阿里云的OSS来作为例子，来实现图片的上传。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="OSS" scheme="http://nullpointer.pw/tags/OSS/"/>
    
      <category term="对象存储系统" scheme="http://nullpointer.pw/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现Tomcat集群</title>
    <link href="http://nullpointer.pw/Nginx%E5%AE%9E%E7%8E%B0Tomcat%E9%9B%86%E7%BE%A4.html"/>
    <id>http://nullpointer.pw/Nginx实现Tomcat集群.html</id>
    <published>2017-05-05T14:12:54.000Z</published>
    <updated>2017-12-03T11:02:55.140Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了利用nginx搭建了一个简单的负载均衡。</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>Linux系统: CentOS 7 x64</p><p>Nginx版本:1.12.0</p><p>Tomcat版本: 7.0.77</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="CentOS-快速安装，见我另外一篇文章CentOS快速安装"><a href="#CentOS-快速安装，见我另外一篇文章CentOS快速安装" class="headerlink" title="CentOS 快速安装，见我另外一篇文章CentOS快速安装"></a>CentOS 快速安装，见我另外一篇文章<a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/">CentOS快速安装</a></h3><h3 id="安装Nginx依赖"><a href="#安装Nginx依赖" class="headerlink" title="安装Nginx依赖"></a>安装Nginx依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gcc 用来编译nginx</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> PCRE nginx的http模块使用pcre来解析正则表达式</span></span><br><span class="line">yum -y install pcre*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zlib nginx使用zlib对http的内容进行gzip压缩</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> openssl https支持</span></span><br><span class="line">yum -y install openssl</span><br></pre></td></tr></table></figure><h3 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装wget</span></span><br><span class="line">yum install wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压nginx</span></span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入解压目录</span></span><br><span class="line">cd nginx-1.12.0</span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="bash"> 若无错误，可以执行以下安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认安装到/usr/<span class="built_in">local</span>/nginx目录</span></span><br></pre></td></tr></table></figure><h3 id="Nginx测试"><a href="#Nginx测试" class="headerlink" title="Nginx测试"></a>Nginx测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问localhost</span></span><br><span class="line">wget localhost</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此命令会下载一个index.html文件</span></span><br><span class="line">vim index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> index.html中有关于nginx的类似于helloworld语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于我的Linux安装在虚拟机中，想要外部访问虚拟机内，需要关闭防火墙或开放端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑防火墙， CentOS 7默认的防火墙不是iptables，需要另行安装，请自行解决</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加80端口</span></span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">service iptables restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过本机的浏览器访问虚拟机的ip</span></span><br><span class="line">http://192.168.243.127(此处为虚拟机的ip)</span><br></pre></td></tr></table></figure><h2 id="三、配置用于集群的Tomcat"><a href="#三、配置用于集群的Tomcat" class="headerlink" title="三、配置用于集群的Tomcat"></a>三、配置用于集群的Tomcat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载Tomcat</span></span><br><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">mkdir /usr/local/tomcats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压Tomcat</span></span><br><span class="line">tar -zxvf apache-tomcat-7.0.77.tar.gz -C /usr/local/tomcats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改解压的Tomcat目录名称</span></span><br><span class="line">mv apache-tomcat-7.0.77 tomcat1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了测试nginx负载均衡,需要对tomcat的server.xml配置一下</span></span><br><span class="line">vim tomcat1/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示行号</span></span><br><span class="line">:set nu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在105行修改为如下， 并保存退出</span></span><br><span class="line">&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1"&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改示例程序</span></span><br><span class="line">echo 'tomcat1:&lt;%=session.getId()%&gt;' &gt; tomcat1/webapps/ROOT/index.jsp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝tomcat1目录为tomcat2</span></span><br><span class="line">cp -r tomcat1 tomcat2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改tomcat2的server.xml中的端口号</span></span><br><span class="line">vim tomcat2/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改22行/71行/93行的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改105行</span></span><br><span class="line">&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm2"&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改示例程序</span></span><br><span class="line">echo 'tomcat2:&lt;%=session.getId()%&gt;' &gt; tomcat1/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure><h2 id="四、配置Nginx"><a href="#四、配置Nginx" class="headerlink" title="四、配置Nginx"></a>四、配置Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170505/220704835.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  启动两个tomcat</span></span><br><span class="line">./tomat2/bin/startup.sh</span><br><span class="line">./tomat1/bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>外部访问虚拟机</p><p><code>http://192.168.243.127(此处为虚拟机的ip)</code></p><p>多刷新几次，可以看到页面的内容在变化，在tomcat1和tomcat2之间进行切换，至此完成了简单nginx负载均衡的搭建。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了利用nginx搭建了一个简单的负载均衡。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="tomcat" scheme="http://nullpointer.pw/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>《聪明人都用方格笔记本》读书笔记</title>
    <link href="http://nullpointer.pw/%E3%80%8A%E8%81%AA%E6%98%8E%E4%BA%BA%E9%83%BD%E7%94%A8%E6%96%B9%E6%A0%BC%E7%AC%94%E8%AE%B0%E6%9C%AC%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://nullpointer.pw/《聪明人都用方格笔记本》读书笔记.html</id>
    <published>2017-01-22T10:08:00.000Z</published>
    <updated>2017-12-03T10:57:55.651Z</updated>
    
    <content type="html"><![CDATA[<p>2017年读的第一本书，读完了一直没有写读书笔记，拖延到今天，才勉强写完。中途看到《如何有效阅读一本书》，就一起读了，学学读书笔记的写法。    </p><p>此书主要讲了笔记本对于笔记的影响，好的笔记本让笔记发挥它应有的功能，而不好的笔记本体现不出笔记的价值所在。作者以三个著名机构使用的笔记本为例，列举了方格笔记本的种种益处，并通过配图的方式，让读者一目了然地了解方格笔记本记录笔记的方式。</p><a id="more"></a><table><thead><tr><th style="text-align:center">书名</th><th style="text-align:center">作者</th><th style="text-align:center">开始时间</th><th style="text-align:center">结束时间</th></tr></thead><tbody><tr><td style="text-align:center">聪明人都用方格笔记本</td><td style="text-align:center">高桥政史</td><td style="text-align:center">2017.01.01</td><td style="text-align:center">2017.01.04</td></tr></tbody></table><blockquote><p>将方格笔记本“分为三部分”记录。从左向右依次将笔记本分为三部分，按照“事实<br>→解释→行动”的顺序记录笔记。</p></blockquote><h2 id="一）笔记本的区别"><a href="#一）笔记本的区别" class="headerlink" title="一）笔记本的区别"></a>一）笔记本的区别</h2><h4 id="1-☆笔记本的对比"><a href="#1-☆笔记本的对比" class="headerlink" title="1. ☆笔记本的对比"></a>1. ☆笔记本的对比</h4><table><thead><tr><th>使头脑变聪明的笔记本</th><th>阻碍能力发挥的笔记本</th><th>对比</th></tr></thead><tbody><tr><td>看起来工整</td><td>第一印象给人脏乱的感觉，使人不愿再看第二眼</td><td>理解力、积极性低下</td></tr><tr><td>比A4纸大</td><td>比A6纸小、记事本型</td><td>思考复杂问题的能力、逻辑思维能力低下</td></tr><tr><td>颜色不超过三种</td><td>用了四种以上的颜色</td><td>判断优先顺序的能力、判断力低下</td></tr><tr><td>每一页都有一个主题</td><td>这也写、那也写</td><td>舍弃能力、整理能力低下</td></tr><tr><td>是黑板、白板板书内容的提炼</td><td>照抄黑板、白板板书</td><td>记忆力、独立思考能力低下</td></tr><tr><td>留有空白区域</td><td>无空隙，写得满满当当</td><td>理解能力、复习能力低下</td></tr><tr><td>画有许多图、表、画</td><td>无图、表、画，只有文字</td><td>视觉把握能力、表现力低下</td></tr><tr><td>日后看笔记时依然可再现当时的内容</td><td>日后看笔记时无法再现当时的内容</td><td>学习能力、理解力低下</td></tr></tbody></table><h4 id="2-★好与坏的笔记本的区别"><a href="#2-★好与坏的笔记本的区别" class="headerlink" title="2. ★好与坏的笔记本的区别"></a>2. ★好与坏的笔记本的区别</h4><p>好笔记本看上去一目了然，能够迅速把握重点，复现记笔记时的场景；<br>而坏笔记就是让你根本没有看的欲望，即使是看了，也不能提取有效内容，大多数情况下，坏笔记本的作用就是没有作用。</p><h2 id="二）记笔记的目的"><a href="#二）记笔记的目的" class="headerlink" title="二）记笔记的目的"></a>二）记笔记的目的</h2><h4 id="1-☆记笔记的误区"><a href="#1-☆记笔记的误区" class="headerlink" title="1. ☆记笔记的误区"></a>1. ☆记笔记的误区</h4><p>不管你参加的是多么优秀的培训、讲座、研讨，如果你的笔记无法再现当时的学习内容，那么，你好不容易学到的知识、技巧化为乌有的可能性将很大。  </p><blockquote><p><strong>笔记的生命线是“再现性”，这是记笔记的最终目的。</strong>  </p></blockquote><p>可是，没有学习过笔记本使用方法的人日后再看自己的笔记时，只能看到上面的词语和句子，却回忆不出“为何需要这些信息”“这些信息有什么作用”这些更为重要的部分。</p><p>也就是说，他们用的是缺乏再现性的记笔记法。</p><p>为什么要做笔记？</p><ul><li>我是怕日后忘记才记的</li><li>我只是照抄板书罢了</li><li>我有记笔记的习惯</li></ul><h4 id="2-★记笔记需要克服的困难"><a href="#2-★记笔记需要克服的困难" class="headerlink" title="2. ★记笔记需要克服的困难"></a>2. ★记笔记需要克服的困难</h4><p>作者说，抱着以上这几种目的而做笔记的人需要变化记笔记的方式，应当停止当前这种记笔记的方法。一直以来，记了很多笔记，但是我每次记完的笔记只是当成了备忘，把笔记本当成了字典。  </p><p>需要使用以前记过的笔记的时候，就借助个人良好的分类习惯查找对应的笔记，以及借助软件的全文检索功能查找我所需要的笔记。  </p><p>长而久之，便养成了依赖的习惯，记笔记记完也只是在脑海中保留一份关键字，而内容却一概忘记，这恐怕是我的记笔记方式的最大弊病，再现笔记的内容是个人需要克服的难点。</p><h2 id="三）框架·黄金三分法"><a href="#三）框架·黄金三分法" class="headerlink" title="三）框架·黄金三分法"></a>三）框架·黄金三分法</h2><h4 id="1-☆谁采取了这种框架"><a href="#1-☆谁采取了这种框架" class="headerlink" title="1. ☆谁采取了这种框架"></a>1. ☆谁采取了这种框架</h4><ul><li><p>康奈尔笔记本分为“Note”（板书）、“Queue”（发现点）、“Summary”（总结）三部分。  </p></li><li><p>东大录取生中的大多数学生将笔记本的左右两页作为一页使用，左侧记录“板书”，右侧写“发现点”和“总结”，和康奈尔笔记本的构造完全相同。  </p></li><li><p>麦肯锡公司的“空·雨·伞”，埃森哲公司的“Point Sheet”，所有外资管理咨询公司的咨询顾问都是按照“事实→解释→行动”的三分法展开思考的。   </p></li></ul><h4 id="2-☆框架的组成"><a href="#2-☆框架的组成" class="headerlink" title="2. ☆框架的组成"></a>2. ☆框架的组成</h4><table><thead><tr><th>内容</th><th>对应</th></tr></thead><tbody><tr><td>板书</td><td>事实</td></tr><tr><td>发现</td><td>解释</td></tr><tr><td>总结</td><td>行动</td></tr></tbody></table><h4 id="3-★框架的使用步骤"><a href="#3-★框架的使用步骤" class="headerlink" title="3. ★框架的使用步骤"></a>3. ★框架的使用步骤</h4><ol><li>摘抄原文：加深对原文的印象</li><li>提出问题，做出解释：基于原文进行思考，并给出结果</li><li>进行总结：对于整篇文章的总体概述  </li></ol><p>按照黄金三分法来做笔记，可以提高笔记对知识的再现性，知名机构都采取的是黄金三分法这种框架来做笔记。</p><h2 id="四）笔记本的结构"><a href="#四）笔记本的结构" class="headerlink" title="四）笔记本的结构"></a>四）笔记本的结构</h2><h4 id="1-☆笔记本的方向"><a href="#1-☆笔记本的方向" class="headerlink" title="1. ☆笔记本的方向"></a>1. ☆笔记本的方向</h4><p>人的思考会受到眼睛构造的左右，所以进入视野的是“纵向”框架还是“横向”框架，能够影响人们的理解速度以及对信息的把握程度。  </p><p>在把握整体情况时，需要解决的问题越复杂、参考的信息量越庞大，就越需要在短时间内迅速抓住重点。  </p><p>随着学习、工作层次的提升，“既见树木，又见森林”这一思考方式的重要性也就更为突显。</p><h4 id="2-☆笔记本的大小"><a href="#2-☆笔记本的大小" class="headerlink" title="2. ☆笔记本的大小"></a>2. ☆笔记本的大小</h4><p>“不善于提炼想法”“很难按逻辑性思维思考”“不会言简意赅地表达”的原因是什<br>么？  </p><p>笔记本的大小意味着思考能力的强弱。</p><h4 id="3-☆笔记的颜色"><a href="#3-☆笔记的颜色" class="headerlink" title="3. ☆笔记的颜色"></a>3. ☆笔记的颜色</h4><p>用黑色或蓝色书写笔记，用红色作为判断，也就是遇到非常重要或需要修改的地方时使用红色。 用此种简单方法区分使用颜色的话，便会在记笔记的同时自然舍弃掉无用的内容，将思考重点放在主要问题上，养成判断主次先后的习惯，逐步提高解决问题的速度和质量。  </p><blockquote><p><strong>颜色最多用三种。</strong></p></blockquote><p>只要能做到这一点，事后再翻看笔记时，仅看颜色就能立刻区分出主次顺序，记笔记时的思路也能在大脑中清晰重现，进一步提升信息整理和输出的效率。</p><h4 id="4-☆笔记标题区域的利用"><a href="#4-☆笔记标题区域的利用" class="headerlink" title="4. ☆笔记标题区域的利用"></a>4. ☆笔记标题区域的利用</h4><p>通常会在笔记本上部的空白区域写入论点和结论。<br>以解决工作问题的笔记本为例，“论点=问题的核心是什么”“结论=这样做便可以解决问题”。  </p><p><img src="http://ojt4b2cr5.bkt.clouddn.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122151804.png" alt=""></p><h4 id="5-★笔记本结构对于笔记的影响"><a href="#5-★笔记本结构对于笔记的影响" class="headerlink" title="5. ★笔记本结构对于笔记的影响"></a>5. ★笔记本结构对于笔记的影响</h4><ul><li>笔记采取横向结构，可以起到一目了然的作用，参考的文章信息便于提取到大脑中。</li><li>小笔记本不利于总结想法，来回地翻页会打断思考的书写。因此使用大笔记本来记笔记。</li><li>太多的颜色会导致找不到重点，处处是重点的情况，</li><li>合理标记标题，梳理核心内容，有助于快速理解笔记内容。</li></ul><h2 id="五）笔记本的功能"><a href="#五）笔记本的功能" class="headerlink" title="五）笔记本的功能"></a>五）笔记本的功能</h2><h4 id="1-☆记忆性笔记本"><a href="#1-☆记忆性笔记本" class="headerlink" title="1. ☆记忆性笔记本"></a>1. ☆记忆性笔记本</h4><p>上课、研讨或是要记忆、理解学习内容时记录的笔记，为了记在脑子里而写的笔记。本书将这类笔记本称为“学习笔记本”。  </p><h4 id="2-☆思考性笔记本"><a href="#2-☆思考性笔记本" class="headerlink" title="2. ☆思考性笔记本"></a>2. ☆思考性笔记本</h4><p>为看出事物本质、理解重点、得出结论而写的笔记，常见于工作中。本书将这类笔记本称为“工作笔记本”。</p><h4 id="3-☆传达性笔记本"><a href="#3-☆传达性笔记本" class="headerlink" title="3. ☆传达性笔记本"></a>3. ☆传达性笔记本</h4><p>传达性笔记即能够从丰富的信息中筛选出对方所需的改善策略及解决方法，为了说服对方而写的笔记。本书将写这类笔记的笔记本称为“提案笔记本”或“博弈笔记本”。</p><h4 id="4-★不同功能笔记本对的记法"><a href="#4-★不同功能笔记本对的记法" class="headerlink" title="4. ★不同功能笔记本对的记法"></a>4. ★不同功能笔记本对的记法</h4><p>作者的这本书所描述的黄金三分法最适合于做思考性笔记，而对于记忆性笔记本的记法，采取这种方式，也能起到一定加深印象的作用。对于传达性笔记本而言，既列出事实，又给出合理解释，也是不错的方式。</p><h2 id="六）-提高笔记本的作用"><a href="#六）-提高笔记本的作用" class="headerlink" title="六） 提高笔记本的作用"></a>六） 提高笔记本的作用</h2><h4 id="1-☆能形成“永久记忆”的用眼方法"><a href="#1-☆能形成“永久记忆”的用眼方法" class="headerlink" title="1. ☆能形成“永久记忆”的用眼方法"></a>1. ☆能形成“永久记忆”的用眼方法</h4><p>如果你之前是一边看着老师在黑板上写下的内容，一边原封不动地抄写在笔记本上的话，那么，请你改变一下抄写笔记时的“用眼方法”吧！</p><p>将此前：×“看黑板→写笔记”的记录方法改为： “看黑板→印在大脑中→不看黑板，将印在大脑中的内容重现在笔记本上”。 不是一边看黑板一边抄写，而是在“看黑板→抄写”之间加入“印在大脑中的一秒钟”。 我把这一秒钟称为“空白的一秒钟”。</p><p>只需要这一秒钟，你的笔记本就能升级成能使大脑越变越聪明的笔记本。</p><h4 id="2-★方法的效果"><a href="#2-★方法的效果" class="headerlink" title="2. ★方法的效果"></a>2. ★方法的效果</h4><p>在抄写的这一步骤中加入<strong>映入大脑</strong>，可以加深对所抄写内容的记忆。</p><p>记得以前在背日语单词时，采取的就是这种方法，看一下单词，然后闭上眼睛，让单词在脑海中浮现出来，效果比直接抄写到本上的方法要好。</p><h4 id="3-☆逻辑连接词的种类与用途"><a href="#3-☆逻辑连接词的种类与用途" class="headerlink" title="3. ☆逻辑连接词的种类与用途"></a>3. ☆逻辑连接词的种类与用途</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122154035.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="4-★连接词的效果"><a href="#4-★连接词的效果" class="headerlink" title="4. ★连接词的效果"></a>4. ★连接词的效果</h4><p>找到适合自己的逻辑连接词，将思考进行流程化。（在中部区域使用）</p><h4 id="5-☆三个箭头的使用"><a href="#5-☆三个箭头的使用" class="headerlink" title="5. ☆三个箭头的使用"></a>5. ☆三个箭头的使用</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122161754.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="6-☆两个能力的实质"><a href="#6-☆两个能力的实质" class="headerlink" title="6. ☆两个能力的实质"></a>6. ☆两个能力的实质</h4><ul><li>提问能力</li><li>概括能力</li></ul><p>所谓“提问能力”，就是得到某个信息后并不会直接一口吞下，而是会提出类似“这到底是什么意思”“为什么会这么说”之类问题的能力。  </p><p>所谓“概括能力”，就是能看透事物本质，并且将梳理后的重点内容记在脑子里，然后简单明了地讲给别人听。</p><h4 id="7-★两个能力的作用"><a href="#7-★两个能力的作用" class="headerlink" title="7. ★两个能力的作用"></a>7. ★两个能力的作用</h4><p>如何应用学习的知识，是由这两个能力来决定。这两个能力的提高与每天的脑力训练是密不可分的，只有不断地联系，逐渐强化，这二者的能力对于个人的提升就会越发明显。</p><h4 id="8-☆不要让你的笔记本变得代谢不良"><a href="#8-☆不要让你的笔记本变得代谢不良" class="headerlink" title="8. ☆不要让你的笔记本变得代谢不良"></a>8. ☆不要让你的笔记本变得代谢不良</h4><p>“代谢不良笔记本”是不分有用信息和无用信息、什么都往上写的、不进行整理总结的“阻碍能力发挥的笔记本”的典型例子。</p><p>如果这也记、那也记的话，那么不知不觉中，笔记本中的“结论和论点”就会变得模糊，什么是“该舍弃的无用信息”，什么是“应该留下的重点内容”，也会变得难以区分。</p><p>“这也记、那也记”“先记下再说”“说不定以后会用到”……按照这样的想法记笔记的话，记在笔记上的信息日后被使用的概率几乎为零。</p><h4 id="9-★代谢不良笔记本的坏处"><a href="#9-★代谢不良笔记本的坏处" class="headerlink" title="9. ★代谢不良笔记本的坏处"></a>9. ★代谢不良笔记本的坏处</h4><p>如果什么都记、也不进行整理总结，这样记录的笔记只是摘抄罢了，就像中学时使用的摘抄本， 如果不对摘抄进行分类，不时常去翻看，摘抄的内容是不会被完整地存储到记忆当中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年读的第一本书，读完了一直没有写读书笔记，拖延到今天，才勉强写完。中途看到《如何有效阅读一本书》，就一起读了，学学读书笔记的写法。    &lt;/p&gt;
&lt;p&gt;此书主要讲了笔记本对于笔记的影响，好的笔记本让笔记发挥它应有的功能，而不好的笔记本体现不出笔记的价值所在。作者以三个著名机构使用的笔记本为例，列举了方格笔记本的种种益处，并通过配图的方式，让读者一目了然地了解方格笔记本记录笔记的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《如何有效阅读一本书:超实用读书笔记法》读书笔记</title>
    <link href="http://nullpointer.pw/%E3%80%8A%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%EF%BC%9A%E8%B6%85%E5%AE%9E%E7%94%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://nullpointer.pw/《如何有效阅读一本书：超实用读书笔记法》读书笔记.html</id>
    <published>2017-01-15T12:37:00.000Z</published>
    <updated>2017-12-03T10:58:20.561Z</updated>
    
    <content type="html"><![CDATA[<p>买完Kindle读的第三本书，作者的观点部分适用于现在的我，可能是由于环境的不同（作者在日本）。<br>作者提倡使用纸质笔记本来记录读书笔记，但是对于一个出门不喜欢背包的人来说，这很muli~<br>原文对于如何选书、购书说了很多，对于如何记笔记的内容不太多，不过，还是很有参考价值。</p><a id="more"></a><table><thead><tr><th>书名</th><th>作者</th><th>开始时间</th><th>结束时间</th></tr></thead><tbody><tr><td>如何有效阅读一本书：超实用读书笔记法</td><td>奥野宣之</td><td>2017.01.11</td><td>2017.01.15</td></tr></tbody></table><h1 id="一、购书"><a href="#一、购书" class="headerlink" title="一、购书"></a>一、购书</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/17-1-15/34562477-file_1484461118342_161ce.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>☆只有从日常生活中取材，才能列出反映自己真正需求的购书清单。</p><p>★ 书单内容来源于生活，可能是别人的推荐、也可能是宣传、或者自己脑海中蹦出的关键词。收集这些内容，这样到了书店，在书海中就不会茫然若失，不知道想要买些什么样的书了。<strong>有目的地逛书店，买自己想要的书</strong></p><h1 id="二、如何做读书笔记"><a href="#二、如何做读书笔记" class="headerlink" title="二、如何做读书笔记"></a>二、如何做读书笔记</h1><h2 id="1-坚持做读书笔记"><a href="#1-坚持做读书笔记" class="headerlink" title="1)坚持做读书笔记"></a>1)坚持做读书笔记</h2><p>☆ 2013年8月5日，我读了《XXXX》。这本书比我想象中有意思。  </p><p>如果写得这样简单，就更容易坚持下去了.第一步要做到的就是坚持下去，毫不夸张地说，只有坚持下去，读书笔记才能发挥作用。读书时应该时刻记得这个目的，正确地对待写读书笔记这件事。  </p><p>人们经常说“你为别人讲解书中的内容时，才会真正理解它。”把记读书笔记作为目标去读书，得到的效果也是一样的。当你<strong>以思想输出为前提</strong>去读书时，思想输入的质量也会有所提升，而且亲手写文章的好处比口头叙述要多。</p><p>★ 刚开始学习做读书笔记时，不必苛刻自己要做得多么好，总结得多么妙，最开始的时候，最重要的是培养自己做读书笔记的习惯。读书笔记主要是对自己读书的一种总结，吸收书中的精华，而并非是为了他人而写。</p><h2 id="2-读书笔记从一句话开始"><a href="#2-读书笔记从一句话开始" class="headerlink" title="2)读书笔记从一句话开始"></a>2)读书笔记从一句话开始</h2><p>☆ 书写这一动作，也有整理自己想法的含义。  </p><p>举个例子，读完冒险题材的纪实文学以后，就会想在读书笔记里写上“<strong>这个人真厉害</strong>”。你拿起笔时，会想到。等一下，不写上这个人是哪里厉害、为什么厉害的话，下次再读到这句话时会看不懂吧”，于是你会这样写<br>作者的体力和精神承受力都太强了。普通人在失明后一定会感到绝望，就算他比一般人强壮，在这样的环境下也很难生还。为什么作者可以如此坚强?  </p><p>本来只想写一句话，却把自己的感受一股脑儿地写了下来，并由此展开思考，读书笔记就这样充实了起来。</p><p>★ 一篇上万字的文章也是从一句话开始的，上百万字的小说可能也只是通过一份不过千字的大纲逐渐扩展而来。不怕写不出一万字的长文，只怕连一句最最简单的话都不写。</p><h2 id="3-无法坚持做笔记的原因"><a href="#3-无法坚持做笔记的原因" class="headerlink" title="3)无法坚持做笔记的原因"></a>3)无法坚持做笔记的原因</h2><p>☆ 需要注意的是，千万不要为了坚持写读书笔记而走形式主义。不管采用什么方式，都要踏实地写笔记，并真正理解书的内容。</p><p>★ 并非如作者所说，我们不可能真正理解所有读过的书的内容，但是写笔记一定要踏实地去做便是。</p><h1 id="三-做笔记的步骤"><a href="#三-做笔记的步骤" class="headerlink" title="三) 做笔记的步骤"></a>三) 做笔记的步骤</h1><h2 id="1-针对纸质书"><a href="#1-针对纸质书" class="headerlink" title="1) 针对纸质书"></a>1) 针对纸质书</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/17-1-15/68426691-file_1484463761370_db52.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>★ 刚开始认为这样是对于书的一种不爱护的表现，现在才觉得其实这么做的方式并没有多么不好，前提是书的主人是自己。与其看过一遍就扔掉或者再也不看；不如让看过的书留下自己读过的痕迹，更好的吸收书中的内容。</p><h2 id="2-针对电子书Kindle"><a href="#2-针对电子书Kindle" class="headerlink" title="2) 针对电子书Kindle"></a>2) 针对电子书Kindle</h2><p>★ 以下针对Kindle的部分为个人总结，书中并未提及。</p><h3 id="1-通读"><a href="#1-通读" class="headerlink" title="1.通读:"></a>1.通读:</h3><p>把读起来觉得不错的那一页的中间部分的两个字加入笔记、笔记内容为1（1只是做的一个标记）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/17-1-15/26283815-file_1484464293276_bf8f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>由于Kindle在添加笔记时会同时插入一条笔记和一条标注记录、所以需要删除标记那条记录。删除第一条记录、保留笔记内容为1的记录。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/17-1-15/18334103-file_1484464451004_11366.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-重读"><a href="#2-重读" class="headerlink" title="2.重读"></a>2.重读</h3><p>读完一遍之后，再把笔记列表中的几页重新读一遍。如果仍然觉得很好，添加书签</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/17-1-15/61173486-file_1484464665024_11516.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="3-标记"><a href="#3-标记" class="headerlink" title="3.标记"></a>3.标记</h3><p>再重新读一遍加有书签的几页，如果第三次阅读后仍然觉得值得一读，就用标记功能在上面做记号。<br>最后留下来的就是你认为最有用的部分了。这一页上会有通读步骤的笔记记录、有重读步骤加的书签、有标记步骤时划的标记。</p><p>可以通过<a href="http://kmate.me/cn/" target="_blank" rel="noopener">Kindle Mate</a>这个软件将标记的内容导出来，便于做读书笔记。读书笔记可以用有道云笔记，个人使用有道云的Markdown做笔记，如果想保存Kindle电子书中的图片，可以按住左下角和右上角进行截图，会自动保存，连接电脑后Kindel所在盘的根目录可以找到。</p><h1 id="四-葱鲔-wei-锅式读书笔记"><a href="#四-葱鲔-wei-锅式读书笔记" class="headerlink" title="四)葱鲔[wěi]锅式读书笔记"></a>四)葱鲔[wěi]锅式读书笔记</h1><p>☆ <strong>葱鲔火锅式读书笔记=摘抄+评论</strong><br>写读书笔记之前注意的三个事项:</p><ol><li><p>写读书笔记的日期</p></li><li><p>书名</p></li><li><p>作者名  </p><p>除了以上三个要素、也可以加上以下两个要素。</p></li><li><p>对自己来说重要的内容（摘抄）</p></li><li><p>自己对这篇文章的感想（评论）  </p></li></ol><p>步骤:</p><ol><li>写上日期，每次换行都要留一行空白，而每个段落之间留两行空白，便于日后重读、插入文字和更正修改。</li><li>摘抄和写评论，重读做过记号的内容，严格筛选出自己认为可以多读几遍的部分、最后在摘抄完的文章后面留出一些空白，写上自己的评论。摘抄部分用☆表示，而用自己语言表达的感想和补充说明则标上★以此作为区分，交替标在每个段落前。</li></ol><h1 id="五-示例"><a href="#五-示例" class="headerlink" title="五)示例"></a>五)示例</h1><p>【080715】《决定人类未来的50件事》/杰西卡·威廉姆斯/草思社  </p><p>☆自杀者中有三分之二是因为抑郁。(P180)  </p><p>★作者说，世界上的自杀者比在战争中死去的人还要多。人类在战争平代会死亡，在和平年代也会死亡，真是不容易。</p><p>☆所谓奴隶，就是被剥夺了人权的人。即使是这样，奴隶社会中也存在对待奴隶人性化的情况，奴隶们在饥饿或者生病的时候是可以不工作的。但在现代社会、奴隶就是一次性的财产，被贱买贱卖。</p><p>★以前的奴隶是长期雇佣制，而现在的则是因为抵押贷款而被人身买卖。为了事后不留麻烦，奴隶们被送去做合同工或零工，被任意驱使。一个人活在世上，最不可或缺的到底是人权还是金钱呢?</p><p>“☆”。后面是摘抄。注意不要省略，要保持原汁原味。</p><p>“★”后面则是自己的评论，写一些对摘抄内容的感想</p><p>并非所有的书都要按照这种方法，所以我们要根据对作品的重视程度改变笔记的写法</p><p>比如像“文件整理技巧”一类的纯实用技巧书、可以不去摘抄，而是只标记“★”并总结要点。如果是小说等休闲读物，可以直接分条书写自己对这本书的感想。</p><h1 id="六-寻找最具代表性的语句"><a href="#六-寻找最具代表性的语句" class="headerlink" title="六)寻找最具代表性的语句"></a>六)寻找最具代表性的语句</h1><ol><li>☆ 只有让自己感动的段落才值得摘抄，一定是摘抄让自己心动的语句。</li><li>另一方面，选择摘抄段落时，不是找让人觉得“理应如此”的文章，而是觉得“这么一说确实有道理”的内容。</li></ol><p>读过一本书以后，对书中内容感同身受固然让人心情愉悦，但这也代表这次读书没有给你带来新东西。相反，如果一篇文章颠覆了你之前的想法，使你的认识发生动摇，在抄写和重读的过程中仍然会让人信服或是感觉震撼，这种文章才是值得摘抄的。</p><h1 id="七-激发思想的火花"><a href="#七-激发思想的火花" class="headerlink" title="七)激发思想的火花"></a>七)激发思想的火花</h1><p>☆ 在摘抄的同时，附上自己的感想和思考，把作者的话和自己的话放在一起，感受落差。好主意不会凭空出现。不论是什么想法，都一定是对某种刺激做出的回应。<br>只有在读完书后对书中内容做出反应，进行主动思考，才能真正掌握这本书的内容。  </p><p>两个概念</p><p>“吸取精华”:原封不动地吸取书上的知识。</p><p>“读书体验”:</p><p>  ● “书上写的这些，我是这么理解的”</p><p>  ● “以此为契机，我想到了一件事……”</p><p>★ 没有主动思考的阅读，书中的内容被掌握的极其有限，甚至于未读过一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买完Kindle读的第三本书，作者的观点部分适用于现在的我，可能是由于环境的不同（作者在日本）。&lt;br&gt;作者提倡使用纸质笔记本来记录读书笔记，但是对于一个出门不喜欢背包的人来说，这很muli~&lt;br&gt;原文对于如何选书、购书说了很多，对于如何记笔记的内容不太多，不过，还是很有参考价值。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>点击按钮拷贝代码的实现</title>
    <link href="http://nullpointer.pw/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%8B%B7%E8%B4%9D%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://nullpointer.pw/点击按钮拷贝代码的实现.html</id>
    <published>2016-10-09T06:33:00.000Z</published>
    <updated>2017-12-03T10:58:55.500Z</updated>
    
    <content type="html"><![CDATA[<p>例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://ojt4b2cr5.bkt.clouddn.com/blog/20170216/071218636.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>1、 head中引入一个js <code>clipboard.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.15/clipboard.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、初始化对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">new</span> Clipboard(<span class="string">'.btn'</span>);<span class="comment">//此处btn是copy按钮的id</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用copy</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-6 col-md-8 col-sm-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>  <span class="attr">id</span>=<span class="string">"murl"</span> <span class="attr">value</span>=<span class="string">"$&#123;murl&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#murl"</span> &gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">data-clipboard-target 要复制的目标</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote><p><a href="http://clipboardjs.52fhy.com/" target="_blank" rel="noopener">http://clipboardjs.52fhy.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
        
      
    
    </summary>
    
    
      <category term="JS" scheme="http://nullpointer.pw/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Ons消息队列</title>
    <link href="http://nullpointer.pw/Ons%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html"/>
    <id>http://nullpointer.pw/Ons消息队列.html</id>
    <published>2016-10-02T04:17:00.000Z</published>
    <updated>2017-05-27T13:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ons消息队列"><a href="#Ons消息队列" class="headerlink" title="Ons消息队列"></a>Ons消息队列</h2><p><strong>前引：公司项目需要写一个推广系统，推广系统是一个项目，和主项目分离，项目间的通信使用Ons来完成，以下是公司代码略微修改的结果，以供参考。</strong></p><a id="more"></a><blockquote><p>术语：</p><p>Producer：消息生产者，负责产生消息，一般由业务系统负责产生消息。</p><p>Consumer：消息消费者，负责消费消息，一般是后台系统负责异步消费。</p><p>Producer ID：一类 Producer 的集合名称，这类 Producer 通常发送一类消息，丏发送逻辑一致。</p><p>Consumer ID：一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，丏消费逻辑一致。</p><p>广播消费：一条消息被多个 Consumer 消费，即使这些 Consumer 属于同一个 Consumer ID，消息也会被 Consumer ID中的每个 Consumer 都消费一次，广播消费中的 Consumer ID 概念可以讣为在消息划分方面无意义。</p><p>集群消费：一个 Consumer ID 中的 Consumer 实例平均分摊消费消息。 例如某个 Topic 有 9 条消息， 其中一个 ConsumerId 有 3 个实例（可能是 3 个进程，或者 3 台机器） ，那么每个实例只消费其中的 3 条消息</p></blockquote><ul><li><p>引入依赖</p><ul><li>Maven方式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.openservices<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ons-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>jar包方式</p><p><code>http://onsall.oss-cn-hangzhou.aliyuncs.com/aliyun-ons-client-java.tar.gz</code></p></li></ul></li></ul><hr><h2 id="一、发送消息"><a href="#一、发送消息" class="headerlink" title="一、发送消息"></a>一、发送消息</h2><h3 id="1、在阿里云控制台的消息队列中配置-Topic、Producer-ID，-Consumer-ID"><a href="#1、在阿里云控制台的消息队列中配置-Topic、Producer-ID，-Consumer-ID" class="headerlink" title="1、在阿里云控制台的消息队列中配置 Topic、Producer ID， Consumer ID"></a>1、在阿里云控制台的消息队列中配置 Topic、Producer ID， Consumer ID</h3><h3 id="2、创建Ons消息生产者"><a href="#2、创建Ons消息生产者" class="headerlink" title="2、创建Ons消息生产者"></a>2、创建Ons消息生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerService</span> <span class="keyword">implements</span> <span class="title">IProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String tag, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = content.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">Message msg = <span class="keyword">new</span> Message(topic, tag, bytes);</span><br><span class="line"></span><br><span class="line">SendResult sendResult = producer.send(msg);</span><br><span class="line">System.out.println(<span class="string">"SendMessageIng... topic:"</span> + topic + <span class="string">" tag:"</span> + tag + <span class="string">" "</span>+ sendResult);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                <span class="comment">//PropertyKeyConst 是Ons官方定义的常量</span></span><br><span class="line">               <span class="comment">//需要在阿里云控制台创建 AccessKey，SecretKey</span></span><br><span class="line">properties.put(PropertyKeyConst.ProducerId, ProducerConstants.PRODUCERID_PCHOME);</span><br><span class="line">              <span class="comment">//PRODUCERID_PCHOME是在控制台配置Topic 的 Producer ID</span></span><br><span class="line">properties.put(PropertyKeyConst.AccessKey, ProducerConstants.ACCESSID);</span><br><span class="line">properties.put(PropertyKeyConst.SecretKey, ProducerConstants.ACCESSKEY);</span><br><span class="line">producer = ONSFactory.createProducer(properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在发送消息前，必须调用start方法来启动Producer，只需调用一次即可。</span></span><br><span class="line">producer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在应用退出前，销毁Producer对象</span></span><br><span class="line"><span class="comment">// 注意：如果不销毁也没有问题</span></span><br><span class="line">producer.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建发送消息类"><a href="#3、创建发送消息类" class="headerlink" title="3、创建发送消息类"></a>3、创建发送消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.minidev.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.Action;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.ConsumeContext;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.Message;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnsService</span> <span class="keyword">implements</span> <span class="title">IOnsService</span>, <span class="title">MessageListener</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IProducerService producerService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"TopicTestONS"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_TAG = <span class="string">"TagA"</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBindObject</span><span class="params">(<span class="keyword">int</span> uid, <span class="keyword">int</span> tid, <span class="keyword">int</span> eid, String pageUrl)</span> </span>&#123;</span><br><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">json.put(<span class="string">"uid"</span>, uid);</span><br><span class="line">json.put(<span class="string">"tid"</span>, tid);</span><br><span class="line">json.put(<span class="string">"eid"</span>, eid);</span><br><span class="line">json.put(<span class="string">"pageUrl"</span>, pageUrl);</span><br><span class="line">producerService.sendMessage(TOPIC, TOPIC_TAG, json.toJSONString());</span><br><span class="line">      <span class="comment">//第三个参数就是需要发送的内容，公司使用的Json</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、订阅消息"><a href="#二、订阅消息" class="headerlink" title="二、订阅消息"></a>二、订阅消息</h2><h3 id="1、创建Ons消息消费者"><a href="#1、创建Ons消息消费者" class="headerlink" title="1、创建Ons消息消费者"></a>1、创建Ons消息消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Lazy</span>(value=<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> <span class="keyword">implements</span> <span class="title">IConsumerService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Consumer consumer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"init...."</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.put(PropertyKeyConst.ConsumerId, ConsumerConstants.CONSUMERID);</span><br><span class="line">properties.put(PropertyKeyConst.AccessKey,ConsumerConstants.ACCESSID);</span><br><span class="line">properties.put(PropertyKeyConst.SecretKey,ConsumerConstants.ACCESSKEY);</span><br><span class="line">properties.put(PropertyKeyConst.MessageModel,PropertyValueConst.CLUSTERING);</span><br><span class="line">consumer = ONSFactory.createConsumer(properties);</span><br><span class="line">consumer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MessageListener 是阿里Ons包内的消息监听器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> String subExpression,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> MessageListener listener)</span> </span>&#123;</span><br><span class="line">consumer.subscribe(topic, subExpression, listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">desotry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">consumer.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建消费消息类"><a href="#2、创建消费消息类" class="headerlink" title="2、创建消费消息类"></a>2、创建消费消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnsConsumerService</span> <span class="keyword">implements</span> <span class="title">IOnsConsumerService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IConsumerService consumerService;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"TopicTestONS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"starting..."</span>);</span><br><span class="line">onsConsumerService.subscribe(TOPIC, <span class="string">"*"</span>, <span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">JSONObject parse = (JSONObject) JSONValue.parse(message.getBody());</span><br><span class="line"><span class="keyword">int</span> uid = JsonUtil.getInt(parse, <span class="string">"uid"</span>);</span><br><span class="line"><span class="keyword">int</span> tid = JsonUtil.getInt(parse, <span class="string">"tid"</span>);</span><br><span class="line"><span class="keyword">int</span> eid = JsonUtil.getInt(parse, <span class="string">"eid"</span>);</span><br><span class="line">String pageUrl = JsonUtil.getString(parse, <span class="string">"pageUrl"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(uid + tid + eid + pageUrl);</span><br><span class="line"><span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为Ons的集群订阅消息代码。</p><blockquote><p>参考：</p><p>Ons官方文档</p><p><a href="http://onsteam.oss-cn-hangzhou.aliyuncs.com/ALIYUN_ONS_USER_GUIDE.pdf" target="_blank" rel="noopener">http://onsteam.oss-cn-hangzhou.aliyuncs.com/ALIYUN_ONS_USER_GUIDE.pdf</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ons消息队列&quot;&gt;&lt;a href=&quot;#Ons消息队列&quot; class=&quot;headerlink&quot; title=&quot;Ons消息队列&quot;&gt;&lt;/a&gt;Ons消息队列&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前引：公司项目需要写一个推广系统，推广系统是一个项目，和主项目分离，项目间的通信使用Ons来完成，以下是公司代码略微修改的结果，以供参考。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="Ons" scheme="http://nullpointer.pw/tags/Ons/"/>
    
      <category term="消息队列" scheme="http://nullpointer.pw/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
