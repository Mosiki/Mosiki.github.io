<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WeJan&#39;s Blog</title>
  
  <subtitle>实战为王，记录在工作中技术使用的点点滴滴。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://nullpointer.pw/"/>
  <updated>2020-04-01T01:27:25.222Z</updated>
  <id>http://nullpointer.pw/</id>
  
  <author>
    <name>WeJan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>【对你无用请揍我系列】必会 Linux 技巧</title>
    <link href="http://nullpointer.pw/linux-command.html"/>
    <id>http://nullpointer.pw/linux-command.html</id>
    <published>2020-03-28T10:46:37.000Z</published>
    <updated>2020-04-01T01:27:25.222Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文非单纯网上介绍 Linux 命令及参数的雷同文章，而是真正在实际工作中能派上用场的 Linux 实用技巧。主要介绍日志排查相关的技巧，捎带常见的其他 Linux 操作以及 vim 技巧。</p><a id="more"></a><blockquote><p>本文首发于个人博客：<a href="http://nullpointer.pw/linux-command.html">http://nullpointer.pw/linux-command.html</a></p></blockquote><h2 id="日志相关："><a href="#日志相关：" class="headerlink" title="日志相关："></a>日志相关：</h2><p>在日常工作中，经常需要在服务器上通过查看日志的方式来定位 bug 问题，掌握一定的日志排查技巧则是很有必要的。明明有些可以通过很基础的命令就可以实现，但网上有些人偏偏喜欢炫技，故作高深弄出一些特别复杂的用法来完成，其实真的没有那种必要。本文只讲最常用实用的用法。</p><p>笔者截取了一些日志作为示例，以供读者练习。</p><p>Tips: 命令中包含于双引号 “ “ 中的都是关键字</p><p>示例日志<a href="http://img12345.5-project.com/blog/20200328/info.log.zip">点我下载 </a></p><h3 id="静态日志查找"><a href="#静态日志查找" class="headerlink" title="静态日志查找"></a>静态日志查找</h3><ol><li><p>根据关键字查找日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"1584345069121"</span> info.log</span><br></pre></td></tr></table></figure></li><li><p>根据关键字查找日志，并显示查找结果附近 5 行(前5行与后5行)日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"1584345069121"</span> info.log -C5</span><br></pre></td></tr></table></figure></li><li><p>根据关键字查找日志，并显示查找结果后 (After)5 行日志</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"1584345069121"</span> info.log -A5</span><br></pre></td></tr></table></figure></li><li><p>根据关键字查找日志，并显示查找结果前 (Before)5 行日志</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"1584345069121"</span> info.log -B5</span><br></pre></td></tr></table></figure></li><li><p>根据多个关键字查找日志，多个关键字为或关系，满足其中一个条件则匹配，关键字之间用<code>\|</code>分隔，表示或</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"1584345069121\|1584345066236"</span> info.log</span><br></pre></td></tr></table></figure></li><li><p>根据多个关键字查找日志，需要满足其中全部条件才匹配</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"76953334"</span> info.log | grep <span class="string">"1584349673402"</span></span><br></pre></td></tr></table></figure></li><li><p>查找不包含关键字的日志，支持多个关键字，关键字之间用<code>\|</code>分隔，表示或</p> <figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -v <span class="string">"handle"</span> info.log</span><br></pre></td></tr></table></figure></li><li><p>根据关键字 A 查找，并且过滤包含关键字 B 的日志</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep <span class="string">"76953334"</span> info.log | grep -v <span class="string">"handle"</span></span><br></pre></td></tr></table></figure></li></ol><h3 id="滚动日志查找"><a href="#滚动日志查找" class="headerlink" title="滚动日志查找"></a>滚动日志查找</h3><p>除了以上在静态日志中查找之外，有时候调试需要看指定日志，而日志又存在滚动刷新较快的情况，此时就可以通过 <code>grep</code> 相关技巧对刷新的滚动日志进行过滤筛选，来达到我们的目的。</p><ol><li><p>滚动日志中根据关键字搜索日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -300f info.log | grep &quot;76953334&quot;</span><br></pre></td></tr></table></figure></li><li><p>滚动日志中根据【关键字 A】搜索日志，且过滤掉包含【关键字 B】的日志</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -300f info.log | grep &quot;76953334&quot; | grep -v &quot;2450&quot;</span><br></pre></td></tr></table></figure></li></ol><h2 id="解压缩"><a href="#解压缩" class="headerlink" title="解压缩"></a>解压缩</h2><p>压缩解压也是比较常用的一些操作，常见的压缩包就是<code>tar.gz</code>与<code>zip</code>两种，下文分别介绍这两种格式的压缩与解压方式。</p><ol><li><p>gzip 压缩文件或目录，具体参数含义见参考链接</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zcvf tempdir/ fileName.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>解压 tar.gz 格式 (gzip) 压缩包 (与压缩命令比较只是参数 c 改成了 x)</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf fileName.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>zip 压缩文件或目录（-r 表示包含子目录）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">zip -r fileName.zip tempdir/</span><br></pre></td></tr></table></figure></li><li><p>zip 解压到指定目录（-o 表示重名文件覆盖时不提示，可选参数）</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip -o fileName.zip -d tempdir2/</span><br></pre></td></tr></table></figure></li></ol><h2 id="进程相关"><a href="#进程相关" class="headerlink" title="进程相关"></a>进程相关</h2><p>工作中偶尔会需要看一下应用进程的信息，比如什么时候启动的，启动了多久这些信息，以下命令可以告诉你答案。</p><ol><li><p>查看端口是否被占用</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -l | grep 8080</span><br></pre></td></tr></table></figure></li><li><p>查看进程启动时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -p 8080 -o lstart</span><br></pre></td></tr></table></figure></li><li><p>查看进程运行多长时间</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -p 8080 -o etime</span><br></pre></td></tr></table></figure></li></ol><h2 id="VIM-小技巧"><a href="#VIM-小技巧" class="headerlink" title="VIM 小技巧"></a>VIM 小技巧</h2><p>列举了几个 VIM 小技巧，批量注释行、替换操作<br><img src="http://img12345.5-project.com/blog/111.gif" alt="">  </p><ol><li>批量注释行<ol><li>control + v 进入列模式</li><li>选择要注释的列</li><li>shift + i 进入 INSERT 模式</li><li>输入# 或其他你想要插入的文字</li><li>连续按两次 ESC</li></ol></li><li>批量取消注释行<ol><li>control + v 进入列模式</li><li>选中要删除的文字</li><li>d 键进行删除</li></ol></li><li><p>搜索并替换关键字 (INFO 替换为 ERROR)<br>全文替换：    vim 正常模式下    <code>:%s/INFO/ERROR</code> 回车确定<br>当前行替换：vim 正常模式下    <code>:s/INFO/ERROR</code> 回车确定<br><img src="http://img12345.5-project.com/blog/vim-replace.gif" alt=""></p></li><li><p>拷贝与清空全文内容<br>拷贝全文内容：vim 正常模式下 <code>:%y</code><br>清空全文内容：vim 正常模式下 <code>:%d</code></p></li></ol><h2 id="系统相关"><a href="#系统相关" class="headerlink" title="系统相关"></a>系统相关</h2><ol><li><p>从路径 <code>/home</code> 下开始向下遍历查找名称包含 <code>nginx.conf</code> 的文件</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find /home -name nginx.conf</span><br></pre></td></tr></table></figure></li><li><p>查看磁盘占用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure></li><li><p>查看当前目录下文件或目录占用空间</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h --max-depth=1</span><br></pre></td></tr></table></figure></li></ol><h2 id="其他文章"><a href="#其他文章" class="headerlink" title="其他文章"></a>其他文章</h2><p>笔者写的一些在 Spring 容器中关于设计模式的实践文章</p><ul><li><a href="http://nullpointer.pw/design-patterns-strategy.html">设计模式之策略模式实战 </a></li><li><a href="http://nullpointer.pw/design-patterns-state.html">设计模式之状态模式实战 </a></li><li><a href="http://nullpointer.pw/design-patterns-chain-responsibility.html">设计模式之责任链模式实战 </a></li><li><a href="http://nullpointer.pw/design-patterns-observer.html">设计模式之观察者模式实战 </a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/peida/archive/2012/11/30/2795656.html">每天一个 linux 命令（28）：tar 命令 </a></li><li><a href="https://www.runoob.com/linux/linux-comm-zip.html">Linux zip 命令 </a></li><li><a href="https://harttle.land/2016/08/08/vim-search-in-file.html">在 Vim 中优雅地查找和替换 </a></li><li><a href="https://harttle.land/2015/12/03/little-known-vim-skills.html">那些鲜为人知的 Vim 小技巧 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;本文非单纯网上介绍 Linux 命令及参数的雷同文章，而是真正在实际工作中能派上用场的 Linux 实用技巧。主要介绍日志排查相关的技巧，捎带常见的其他 Linux 操作以及 vim 技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="Linux" scheme="http://nullpointer.pw/categories/Linux/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之观察者模式实战</title>
    <link href="http://nullpointer.pw/design-patterns-observer.html"/>
    <id>http://nullpointer.pw/design-patterns-observer.html</id>
    <published>2020-03-05T14:18:10.000Z</published>
    <updated>2020-03-05T14:30:33.007Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍观察者模式在项目中的实际应用。</p><a id="more"></a><p>类型：行为型模式</p><p>意图：一对多关系依赖的多个对象，当一个对象状态发生改变，所有依赖的对象都可以得到通知并自动更新</p><p>主要解决：降低对象间的关联依赖性</p><p>观察者模式也称为发布订阅模式，监听器模式。</p><p><a href="http://nullpointer.pw/design-patterns.html">设计模式系列文章目录 </a></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><blockquote><p>抽象主题（Subject）角色：抽象主题角色提供维护一个观察者对象聚集的操作方法，对聚集的增加、删除等。<br>具体主题（ConcreteSubject）角色：将有关状态存入具体的观察者对象；在具体主题的内部状态改变时，给所有登记过的观察者发出通知。具体主题角色负责实现抽象主题中聚集的管理方法。<br>抽象观察者（Observer）角色：为具体观察者提供一个更新接口。<br>具体观察者（ConcreteObserver）角色：存储与主题相关的自洽状态，实现抽象观察者提供的更新接口。</p></blockquote><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><img  src=http://www.plantuml.com/plantuml/svg/ZP512u9048Nl-oi6JrOeT1K9eMlGeLymxewvKRknEmgH_VT4Sy62wlZcVJFlmHIUqN5pEGiiFJkK3FACtiEXAK_Kgxi0M84jFRcMdCzWfptd-vVU32uoewpZQHZe1MJGMgq6ID4VaB5ALxU9yN4m7qAClRRMI4TCytwoHdEa6QuDawjG4eJ8aMsk2fc-dFxDJ-5vboJlZKHOpxiq_JWQTgDr13Q1Q1c5Wg8We_fVF040><h2 id="Java-提供观察者模式的支持"><a href="#Java-提供观察者模式的支持" class="headerlink" title="Java 提供观察者模式的支持"></a>Java 提供观察者模式的支持</h2><p>一般在真实项目之中，不会完全手动实现一个观察者模式，因为在 JAVA 语言的 java.util 库里面，已经提供了一个 Observable 类以及一个 Observer 接口，构成 JAVA 语言对观察者模式的支持。直接使用提供的 util 即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Observable o, Object arg)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到更新"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteSubject</span> <span class="keyword">extends</span> <span class="title">Observable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setChanged();</span><br><span class="line">        <span class="keyword">this</span>.notifyObservers();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ConcreteObserver concreteObserver = <span class="keyword">new</span> ConcreteObserver();</span><br><span class="line">        ConcreteSubject subject = <span class="keyword">new</span> ConcreteSubject();</span><br><span class="line">        subject.addObserver(concreteObserver);</span><br><span class="line">        subject.change();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>除了 Java 自身 提供的观察者模式支持外，Guava 也基于观察者模式实现的 生产/消费模型，在使用上，比 Observable 相对简单，如果需要订阅消息只需要在方法上添加 <strong>@Subscribe</strong> 注解即可。使用  <strong>EventBus 的 post 方法</strong>分发事件给消费者。</p><p>本文以用户注册为例，当用户注册完成后，之后可能会有一系列的耗时操作，比如发送消息通知，同步数据到缓存等操作。为了给用户提供好的体验，这里使用 EventBus 来进行异步化。</p><h3 id="定义抽象主题"><a href="#定义抽象主题" class="headerlink" title="定义抽象主题"></a>定义抽象主题</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractProducer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> AsyncEventBus eventBus = <span class="keyword">new</span> AsyncEventBus(<span class="string">"_event_async_"</span>, Executors.newFixedThreadPool(<span class="number">4</span>));</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerAsyncEvent</span><span class="params">(EventConsumer consumer)</span> </span>&#123;</span><br><span class="line">        eventBus.register(consumer);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(T event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义抽象观察者"><a href="#定义抽象观察者" class="headerlink" title="定义抽象观察者"></a>定义抽象观察者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EventConsumer</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">consume</span><span class="params">(T event)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装-Event-事件对象"><a href="#封装-Event-事件对象" class="headerlink" title="封装 Event 事件对象"></a>封装 Event 事件对象</h3><p>Event 事件对象用于事件宣发时参数传递使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterEvent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> UserDto userDto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@ToString</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDto</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> LocalDateTime registerTime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义具体的主题与观察者对象"><a href="#定义具体的主题与观察者对象" class="headerlink" title="定义具体的主题与观察者对象"></a>定义具体的主题与观察者对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 主题对象，提供注册主题方法</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterProducer</span> <span class="keyword">extends</span> <span class="title">AbstractProducer</span>&lt;<span class="title">UserRegisterEvent</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">(UserRegisterEvent event)</span> </span>&#123;</span><br><span class="line">        eventBus.post(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者对象，监听主题事件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterNotifyConsumer</span> <span class="keyword">implements</span> <span class="title">EventConsumer</span>&lt;<span class="title">UserRegisterEvent</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterProducer userRegisterProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Subscribe</span> <span class="comment">// 监听事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(UserRegisterEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到用户注册事件，开始推送通知"</span>);</span><br><span class="line">        System.out.println(event);</span><br><span class="line">        System.out.println(<span class="string">"接收到用户注册事件，通知推送完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userRegisterProducer.registerAsyncEvent(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 观察者对象，监听主题事件</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterSyncCacheConsumer</span> <span class="keyword">implements</span> <span class="title">EventConsumer</span>&lt;<span class="title">UserRegisterEvent</span>&gt;,</span></span><br><span class="line"><span class="class">        <span class="title">InitializingBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterProducer userRegisterProducer;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        userRegisterProducer.registerAsyncEvent(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="meta">@Subscribe</span> <span class="comment">// 监听事件</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consume</span><span class="params">(UserRegisterEvent event)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"接收到用户注册事件，开始同步 Cache"</span>);</span><br><span class="line">        System.out.println(event.getUserDto());</span><br><span class="line">        System.out.println(<span class="string">"接收到用户注册事件，同步 Cache 完毕"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意，观察者对象需要在类进行实例化的时候，进行注册事件，所以实现了 InitializingBean 接口，监听事件消息，需要在监听方法上添加 @Subscribe 注解。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserRegisterProducerTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> UserRegisterProducer userRegisterProducer;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">post</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        UserRegisterEvent event = <span class="keyword">new</span> UserRegisterEvent();</span><br><span class="line">        event.setUserDto(<span class="keyword">new</span> UserDto(<span class="number">1L</span>, <span class="string">"张三"</span>, LocalDateTime.now()));</span><br><span class="line">        userRegisterProducer.post(event);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">接收到用户注册事件，开始推送通知</span><br><span class="line">接收到用户注册事件，开始同步 Cache</span><br><span class="line">UserDto(id=1, name=张三, registerTime=2020-03-05T22:12:26.386)</span><br><span class="line">接收到用户注册事件，同步 Cache 完毕</span><br><span class="line">UserRegisterEvent(userDto=UserDto(id=1, name=张三, registerTime=2020-03-05T22:12:26.386))</span><br><span class="line">接收到用户注册事件，通知推送完毕</span><br></pre></td></tr></table></figure><p>因为观察者模式是无法控制消费顺序的，可能每次的输出结果都是不一致的。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5bcf53f351882577e5120b99">https://juejin.im/post/5bcf53f351882577e5120b99</a></li><li><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html">https://www.cnblogs.com/java-my-life/archive/2012/05/16/2502279.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍观察者模式在项目中的实际应用。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之责任链模式实战</title>
    <link href="http://nullpointer.pw/design-patterns-chain-responsibility.html"/>
    <id>http://nullpointer.pw/design-patterns-chain-responsibility.html</id>
    <published>2020-03-03T23:29:43.000Z</published>
    <updated>2020-03-04T01:12:24.386Z</updated>
    
    <content type="html"><![CDATA[<p>本文以电商系统订单金额计算为例，电商订单最终的金额可能是这样的</p><p><strong>应支付金额=订单金额-优惠券优惠金额-促销活动优惠金额-会员权益优惠金额</strong></p><p>当然也有可能还会增加其他的计算步骤，使用责任链模式来实现订单金额计算，若增加了其他计算步骤，直接将步骤加入到链中即可，而无需改动以前的代码，最大程度减小出错的可能性。责任链分为纯责任链与不纯责任链，在日常开发中，很少有纯的责任链，所谓纯的责任链，就是单个链上处理器要么独立处理，要么处理不了交给下一个处理器进行处理。</p><a id="more"></a><p><a href="http://nullpointer.pw/design-patterns.html">设计模式系列文章目录 </a></p><p>类型：行为型模式</p><p>意图：为请求创建了一个接收此次请求对象的链，让请求沿着链传递请求。</p><p>使用场景：   </p><ol><li>需要多个对象处理一个请求</li></ol><h2 id="角色："><a href="#角色：" class="headerlink" title="角色："></a>角色：</h2><ul><li>AbstractHandler: 抽象处理者</li><li>ConcreteHandler：具体处理者</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKfCAYufIamkKKZEIImkLd24SZqIyr9oKeiKghaK57GLYakJarEBY_EBhD0L0AMr5QfXXjHcG4I3KWjBKujBD3IvQhcu80Oxv-Sb5wKcbgH2DHg2ZLPM85w74HuTwCwsgT7LnRIIE6L6cCRbwzfXUDmXDIy56800><h2 id="实战开发"><a href="#实战开发" class="headerlink" title="实战开发"></a>实战开发</h2><p>本文参照 Tomcat 源码中的 Filter Chain 实现责任链，使用多个订单处理器对订单进行处理。</p><h3 id="本文示例-UML-图"><a href="#本文示例-UML-图" class="headerlink" title="本文示例 UML 图"></a>本文示例 UML 图</h3><img  src=http://www.plantuml.com/plantuml/svg/lPFB2W8X58RtFiN1DjF5WRR341EpQH6q2DhRA8qmQQXTO9ftpx0WL6WJRRnm_dE-twDMnb9jpySEqRsncZOMceuQ0ylNTaKbwxY67W6Ce7-h1gPy9DjenhLVrqfQVdCL_3o3ZvYkMoeaDCznN5oKO471AnU7rcRZGaYB1eIyZLgTJqf-rl5EVeDFCtVYz5_WbdRS_1SPfpsHn2SNQs5i6Ro0XOjFeVtcw0LseF05bNT24lUPraKjISk2gugXU8A140LuZkCp8nIteSppbCcqC7QPreKsAowP-tCF><h3 id="实现抽象处理者"><a href="#实现抽象处理者" class="headerlink" title="实现抽象处理者"></a>实现抽象处理者</h3><p>为了简化示例，代码中关于优惠金额的计算都采取写死的方式。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderHandleContext context, OrderHandlerChain chain)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 订单处理器的权重</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装处理器链处理元素上下文</span></span><br><span class="line"><span class="comment"> *  </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-11</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandleContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 当前处理器位于处理器 chain 上的位置</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pos;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单号</span></span><br><span class="line">    <span class="keyword">private</span> String orderNo;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订单金额</span></span><br><span class="line">    <span class="keyword">private</span> Double amount;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// VIP 等级</span></span><br><span class="line">    <span class="keyword">private</span> Integer vipLevel;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 优惠券</span></span><br><span class="line">    <span class="keyword">private</span> String couponNo;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 封装处理器权重</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-04</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Getter</span></span><br><span class="line"><span class="meta">@AllArgsConstructor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">enum</span> OrderHandlerWeightEnum &#123;</span><br><span class="line">    COUPON(<span class="number">1</span>, <span class="string">"优惠券"</span>),</span><br><span class="line">    SALES(<span class="number">2</span>, <span class="string">"促销活动"</span>),</span><br><span class="line">    VIP(<span class="number">3</span>, <span class="string">"VIP"</span>),</span><br><span class="line">    ;</span><br><span class="line">    <span class="keyword">private</span> Integer code;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="初始化订单处理器链"><a href="#初始化订单处理器链" class="headerlink" title="初始化订单处理器链"></a>初始化订单处理器链</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-03-03</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderHandlerChain</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;AbstractHandler&gt; chain = <span class="keyword">new</span> ArrayList&lt;&gt;(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handle</span><span class="params">(OrderHandleContext context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getPos() &lt; chain.size()) &#123;</span><br><span class="line">            AbstractHandler handler = chain.get(context.getPos());</span><br><span class="line">            <span class="comment">// 移动位于处理器链中的位置</span></span><br><span class="line">            context.setPos(context.getPos() + <span class="number">1</span>);</span><br><span class="line">            handler.doHandle(context, <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Map&lt;String, AbstractHandler&gt; beans = applicationContext.getBeansOfType(AbstractHandler.class);</span><br><span class="line">        chain.addAll(beans.values());</span><br><span class="line">        <span class="comment">// 根据处理器的权重，对处理器链中元素进行排序</span></span><br><span class="line">        chain.sort(Comparator.comparingInt(AbstractHandler::weight));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现具体处理者"><a href="#实现具体处理者" class="headerlink" title="实现具体处理者"></a>实现具体处理者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CouponOrderHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderHandleContext context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getCouponNo() != <span class="keyword">null</span>) &#123;</span><br><span class="line">            context.setAmount(context.getAmount() - <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> OrderHandlerWeightEnum.COUPON.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SalesOrderHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderHandleContext context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        Double amount = context.getAmount();</span><br><span class="line">        <span class="keyword">if</span> (amount &gt; <span class="number">80</span>) &#123;</span><br><span class="line">            context.setAmount(amount * <span class="number">0.9</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> OrderHandlerWeightEnum.SALES.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VipOrderHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doHandle</span><span class="params">(OrderHandleContext context, OrderHandlerChain chain)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (context.getVipLevel() &gt; <span class="number">2</span>) &#123;</span><br><span class="line">            context.setAmount(context.getAmount() - <span class="number">5</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 调用下一个处理器进行处理</span></span><br><span class="line">        chain.handle(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">int</span> <span class="title">weight</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> OrderHandlerWeightEnum.VIP.getCode();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = App.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ChainTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> OrderHandlerChain chain;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">name</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        OrderHandleContext order = <span class="keyword">new</span> OrderHandleContext()</span><br><span class="line">                .setOrderNo(<span class="string">"123"</span>)</span><br><span class="line">                .setAmount(<span class="number">100</span>d)</span><br><span class="line">                .setVipLevel(<span class="number">3</span>)</span><br><span class="line">                .setCouponNo(<span class="string">"111"</span>);</span><br><span class="line">        chain.handle(order);</span><br><span class="line">        System.out.println(<span class="string">"订单最终金额为： "</span> + order.getAmount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">76.0</span><br></pre></td></tr></table></figure></p><p> 处理器链调用 handle 方法，逐个调用处理器链中的处理器的 doHanle 方法，对订单进行处理，当前处理器处理完毕后，可以选择是否继续交由下一个处理器进行处理，即设置 <code>chain.handle(context);</code>，如果不需要继续往下处理，不调用此代码即可。</p><p> 网上流传的代码都是直接在抽象处理器中包含下一个处理器的引用，这样导致在客户端使用的时候，就需要手动去逐个 set 下级处理器，手误很容易造成处理器死循环的情况，也可能出现缺失某个处理器的情况，因而本文参照 Tomcat 源码中 Filter 的作法，引入了 Chain 类，统一对处理器封装为链，减少客户端使用时出错的可能。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>链式处理的好处在于增加减少新的处理器不会影响其他处理器的逻辑，各个处理器之间相互独立，可以减小耦合带来的影响。</p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="https://juejin.im/post/5bd95adfe51d45607e02ecc0">设计模式 | 责任链模式及典型应用 </a></li><li><a href="https://www.kancloud.cn/sstd521/design/193560">https://www.kancloud.cn/sstd521/design/193560</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以电商系统订单金额计算为例，电商订单最终的金额可能是这样的&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;应支付金额=订单金额-优惠券优惠金额-促销活动优惠金额-会员权益优惠金额&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;当然也有可能还会增加其他的计算步骤，使用责任链模式来实现订单金额计算，若增加了其他计算步骤，直接将步骤加入到链中即可，而无需改动以前的代码，最大程度减小出错的可能性。责任链分为纯责任链与不纯责任链，在日常开发中，很少有纯的责任链，所谓纯的责任链，就是单个链上处理器要么独立处理，要么处理不了交给下一个处理器进行处理。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="结合Spring实践责任链模式" scheme="http://nullpointer.pw/tags/%E7%BB%93%E5%90%88Spring%E5%AE%9E%E8%B7%B5%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之门面模式实战</title>
    <link href="http://nullpointer.pw/design-patterns-facade.html"/>
    <id>http://nullpointer.pw/design-patterns-facade.html</id>
    <published>2020-03-02T22:35:41.000Z</published>
    <updated>2020-03-02T22:39:32.441Z</updated>
    
    <content type="html"><![CDATA[<p>类型：结构型模式</p><p>意图：定义一个统一的系统接口，隐藏多个子系统的复杂性。</p><p>主要解决：降低访问系统客户端内部子系统的复杂度。</p><p>使用场景：解耦合客户端与具体子系统，子系统与客户端无需感知对方，客户端不需要亲自调用子系统的接口，把原本需要与多个子系统的交互全部封装到门面类中，客户端只需要和 Facade 类交互即可。</p><a id="more"></a><p><a href="http://nullpointer.pw/design-patterns.html">设计模式系列文章目录 </a></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li>Facade： 门面角色，委托客户端的请求到具体的客户端</li><li>SubSystem：子系统角色</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><p>使用门面模式封装之前 UML：<br><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLl3DJodDINLKgEPIKD1MA4ajBZ7Kq5ImKYZBpqpXgkL2KUM4fCe8fofd95N6AAf2W28AkhfsC4lH1PpG1Pov75BpKe2E1G00></p><p>使用门面模式封装之后 UML：<br><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd1BJ4vCILMevb9Gq5N8pKyfpKbrLB1Iy8Mma4ITuA9EIABES55deAYsGabgSOcXXYPGj2m_CmKkP8GfP8mGgkM2EWPgAzWr66QXgN92KcM4KvKpaYfK6qE08WgwkdRG4E221WH81EPv324dJ25dBeVKl1HWU080></p><p>可以看到客户端由依赖三个对象变成依赖一个对象，通过门面对象封装子系统，对于客户端，屏蔽子系统内部的复杂性。</p><p>需要注意的是，门面类不要参与任何具体的业务逻辑。    </p><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>在大量使用 Dubbo 进行接口调用的项目系统中，有很多 Dubbo 方法是属于公用的方法，虽然客户端类可以注入不同的 Dubbo 服务类进行接口调用，但是明显客户端与其他子系统的依赖过于紧密。</p><p>当一个子系统需要进行修改时，需要修改所有调用此系统的接口，此时最适合使用门面模式来封装这些子系统的接口，然后统一对客户端提供方法进行调用，大大降低客户端与子系统间的耦合性。</p><p>本文为了简化示例，就不未引入 Dubbo，而是直接 Mock 了两个远程服务类。示例提供一个针对获取用户相关信息的门面类。</p><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="定义两个-Mock-的远程服务类"><a href="#定义两个-Mock-的远程服务类" class="headerlink" title="定义两个 Mock 的远程服务类"></a>定义两个 Mock 的远程服务类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockUserRemoteService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNewUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 调用远程接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">getUserInfo</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 调用远程接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> UserInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockDeptRemoteService</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptInfo <span class="title">getDeptInfo</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// TODO 调用远程接口</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DeptInfo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义用户门面类"><a href="#定义用户门面类" class="headerlink" title="定义用户门面类"></a>定义用户门面类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserFacade</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockUserRemoteService userRemoteService;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockDeptRemoteService deptRemoteService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是新用户</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isNewUser</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteService.isNewUser(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> UserInfo <span class="title">getUserInfo</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userRemoteService.getUserInfo(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取用户部门信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DeptInfo <span class="title">getDeptInfo</span><span class="params">(Long userId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> deptRemoteService.getDeptInfo(userId);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试客户端调用"><a href="#测试客户端调用" class="headerlink" title="测试客户端调用"></a>测试客户端调用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = App.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FacadeTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">protected</span> UserFacade userFacade;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> userId = <span class="number">11L</span>;</span><br><span class="line">        UserInfo userInfo = userFacade.getUserInfo(userId);</span><br><span class="line">        DeptInfo deptInfo = userFacade.getDeptInfo(userId);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>门面模式还是很好理解的，封装了子系统的复杂性，通过门面对象只暴露客户端需要的接口，一些内部的接口可以做到对客户端隐藏。</p><blockquote><p><strong>门面模式的优点</strong><br>　　门面模式的优点：<br>　　<strong>●　　松散耦合</strong><br>　　门面模式松散了客户端与子系统的耦合关系，让子系统内部的模块能更容易扩展和维护。<br>　　<strong>●　　简单易用</strong><br>　　门面模式让子系统更加易用，客户端不再需要了解子系统内部的实现，也不需要跟众多子系统内部的模块进行交互，只需要跟门面类交互就可以了。<br>　　<strong>●　　更好的划分访问层次</strong><br>　　通过合理使用 Facade，可以帮助我们更好地划分访问的层次。有些方法是对系统外的，有些方法是系统内部使用的。把需要暴露给外部的功能集中到门面中，这样既方便客户端使用，也很好地隐藏了内部的细节。</p></blockquote><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.kancloud.cn/sstd521/design/193594">门面模式的注意事项 </a></li><li><a href="https://www.cnblogs.com/java-my-life/archive/2012/05/02/2478101.html">《JAVA 与模式》之门面模式 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型：结构型模式&lt;/p&gt;
&lt;p&gt;意图：定义一个统一的系统接口，隐藏多个子系统的复杂性。&lt;/p&gt;
&lt;p&gt;主要解决：降低访问系统客户端内部子系统的复杂度。&lt;/p&gt;
&lt;p&gt;使用场景：解耦合客户端与具体子系统，子系统与客户端无需感知对方，客户端不需要亲自调用子系统的接口，把原本需要与多个子系统的交互全部封装到门面类中，客户端只需要和 Facade 类交互即可。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式之状态模式实战</title>
    <link href="http://nullpointer.pw/design-patterns-state.html"/>
    <id>http://nullpointer.pw/design-patterns-state.html</id>
    <published>2020-02-29T06:06:32.000Z</published>
    <updated>2020-03-03T11:43:22.034Z</updated>
    
    <content type="html"><![CDATA[<p>本文以运营活动状态转换为例，结合 Spring 演示状态模式的实践应用。</p><a id="more"></a><p>类型：行为型模式</p><p>意图：允许对象在内部状态发生改变时改变它的行为，对象看起来好像修改了它的类。</p><p>主要解决：一个对象存在多个状态，每个状态行为不同，状态可以相互转换。</p><p>使用场景：1、行为随状态改变而改变的场景。 2、减少 switch..case 以及 if…else</p><p><a href="http://nullpointer.pw/design-patterns.html">设计模式系列文章目录 </a></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li><p>State：抽象状态角色，负责对象状态定义，并且封装环境角色以实现状态切换。</p></li><li><p>Context：环境角色，定义客户端需要的接口，并且负责具体状态的切换。</p></li><li><p>ConcreteState：具体状态角色，当前状态要做的事情，以及当前状态如何转换其他状态。</p></li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><img  src=http://www.plantuml.com/plantuml/svg/LSx12O0m40J0_rLnJqNIWOXW2LPmnWCVCM9k1K7iNIKe-DxPPLk396np81_4ZBibGdVmGSHSST9rKqDHqaaaWo691sVQGw0tVDmaSGoQsJVaaq9VzIJl-EAQtAQSrixzFRKQn_lK1G00><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>本文以运营活动状态为例，结合 Spring 演示状态模式的实践应用。</p><p>运营活动创建初始状态为草稿状态，编辑好活动之后，运营会后台启用活动，此时活动状态为已启用；<br>当达到活动开始时间时，定时任务会将活动状态置为进行中；<br>当达到活动结束时间时，定时任务会将活动状态置为已结束。<br>进行中的活动也可能会因为某些原因需要手动停用，此时活动状态置为已停用。</p><p>状态之间有着严格的前置校验，比如草稿状态可以继续保存为草稿，也可以进行启动，但不能直接切换为进行中，可以直接编辑切换回草稿箱状态；比如已停用的状态只有在启用之后才能被置为进行中。</p><p>活动状态的切换约束如下图：</p><table><thead><tr><th style="text-align:center">新状态→<br /> 当前状态↓</th><th style="text-align:center">草稿箱</th><th style="text-align:center">已启用</th><th style="text-align:center">进行中</th><th style="text-align:center">已停用</th><th style="text-align:center">已结束</th></tr></thead><tbody><tr><td style="text-align:center">草稿箱</td><td style="text-align:center">✅</td><td style="text-align:center">✅</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr><tr><td style="text-align:center">已启用</td><td style="text-align:center">✅</td><td style="text-align:center">❌</td><td style="text-align:center">✅</td><td style="text-align:center">✅</td><td style="text-align:center">❌</td></tr><tr><td style="text-align:center">进行中</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">✅</td><td style="text-align:center">✅</td></tr><tr><td style="text-align:center">已停用</td><td style="text-align:center">❌</td><td style="text-align:center">✅</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr><tr><td style="text-align:center">已结束</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td><td style="text-align:center">❌</td></tr></tbody></table><p>如果不采取状态模式，可能写出的代码就是不断使用 if 判断前置状态是否符合规则，当增加了新的状态，需要改动判断的地方，从而可能引入了 Bug。</p><h3 id="本文示例-UML-图"><a href="#本文示例-UML-图" class="headerlink" title="本文示例 UML 图"></a>本文示例 UML 图</h3><img  src=http://www.plantuml.com/plantuml/svg/vLR1Ri8m3BtxAonnwJJr2q0Jqs3Ipdo1svejKabGOofGuTyfGOMswhAC8pqcUNxnUtQipArG8RjD3fHOAIWLJ7Eo5jzJKQMImqf862k0oMthmsZXlI1rrm28hrWQbQ5bwO6ZFu9VN73L977wgdU_kK0vR3dg7oR6v4mQBPMyA6XzPx_H_XR2cfASm_7Edd1ufkp_-DTAA_ipX3y1T2lHE5VLL76lFjHUJGSBuOuYJzWrnM1lmnmDyZ7GlGSySmgQ5hvm3FJLSobUkkH69NbrkNPKYXTNnb5f_dJG9vSC_M5luhVkg8Vk19yTutXWslbGhGdXWzrVbVVALYVwSAtgmPnrLlyupW00><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><h3 id="定义抽象状态角色"><a href="#定义抽象状态角色" class="headerlink" title="定义抽象状态角色"></a>定义抽象状态角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityState</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 抽象状态角色需要持有环境上下文对象</span></span><br><span class="line">    <span class="keyword">protected</span> ActivityContext activityContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActivityContext</span><span class="params">(ActivityContext activityContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activityContext = activityContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Integer <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 判断是否是当前状态</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">boolean</span> <span class="title">isSameStatus</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> type().equals(activity.getStatus());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 保存草稿</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">saveDraft</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 启用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">enable</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 开始</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停用</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">disable</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 停止</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">finish</span><span class="params">(Activity activity)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义环境角色"><a href="#定义环境角色" class="headerlink" title="定义环境角色"></a>定义环境角色</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityContext</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 持有抽象状态角色引用</span></span><br><span class="line">    <span class="keyword">private</span> ActivityState activityState;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setActivityState</span><span class="params">(ActivityState activityState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.activityState = activityState;</span><br><span class="line">        <span class="keyword">this</span>.activityState.setActivityContext(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveDraft</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 委托具体的状态角色</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activityState.saveDraft(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enable</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activityState.enable(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activityState.start(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">disable</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activityState.disable(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">finish</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.activityState.finish(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义具体状态角色"><a href="#定义具体状态角色" class="headerlink" title="定义具体状态角色"></a>定义具体状态角色</h3><p>因为本文示例具体状态角色有很多，因此只列举一个开启状态角色举例参考，更多代码可以参考本文对应的 GitHub 示例代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityEnableState</span> <span class="keyword">extends</span> <span class="title">ActivityState</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ActivityDraftState activityDraftState;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ActivityStartState activityStartState;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ActivityDisableState activityDisableState;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ActivityStateEnum.ENABLE.getCode();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">saveDraft</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.activityContext.setActivityState(activityDraftState);</span><br><span class="line">        <span class="keyword">return</span> activityContext.saveDraft(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">enable</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 如果当前状态已经是 enable 了，则无法再次 enable</span></span><br><span class="line">        <span class="keyword">if</span> (isSameStatus(activity)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        activity.setStatus(type());</span><br><span class="line">        <span class="comment">//TODO 更新数据库</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">start</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.activityContext.setActivityState(activityStartState);</span><br><span class="line">        <span class="keyword">return</span> activityContext.start(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">disable</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.activityContext.setActivityState(activityDisableState);</span><br><span class="line">        <span class="keyword">return</span> activityContext.disable(activity);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">finish</span><span class="params">(Activity activity)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 非进行中的活动状态，不允许直接进行 finish</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装具体状态实例工厂"><a href="#封装具体状态实例工厂" class="headerlink" title="封装具体状态实例工厂"></a>封装具体状态实例工厂</h3><p>状态角色应该是单例的，结合 Spring 与工厂模式对实例进行封装，方便根据数据库的 status 值获取对应的状态角色实例。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActivityStateFactory</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;Integer, ActivityState&gt; STATE_MAP = <span class="keyword">new</span> HashMap&lt;&gt;(ActivityStateEnum.values().length);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Map&lt;String, ActivityState&gt; beans = applicationContext.getBeansOfType(ActivityState.class);</span><br><span class="line">        beans.values().forEach(item -&gt; STATE_MAP.put(item.type(), item));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = App.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 一般活动都是从数据库查询出来了，此处为方便测试直接 new</span></span><br><span class="line">        Activity activity = <span class="keyword">new</span> Activity()</span><br><span class="line">                .setId(<span class="number">1L</span>)</span><br><span class="line">                .setName(<span class="string">"测试活动"</span>)</span><br><span class="line">                .setStatus(ActivityStateEnum.DRAFT.getCode())</span><br><span class="line">                .setCreateTime(LocalDateTime.now());</span><br><span class="line"></span><br><span class="line">        ActivityState activityState = ActivityStateFactory.STATE_MAP.get(activity.getStatus());</span><br><span class="line">        ActivityContext context = <span class="keyword">new</span> ActivityContext();</span><br><span class="line">        context.setActivityState(activityState);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"保存草稿: "</span> + (context.saveDraft(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为已启用: "</span> + (context.enable(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为进行中: "</span> + (context.start(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为已停用: "</span> + (context.disable(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为已启用: "</span> + (context.enable(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为进行中: "</span> + (context.start(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为已结束: "</span> + (context.finish(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">        System.out.println(<span class="string">"更新活动状态为进行中: "</span> + (context.start(activity) ? <span class="string">"成功"</span> : <span class="string">"失败"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>结果输出：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">保存草稿: 成功</span><br><span class="line">更新活动状态为已启用: 成功</span><br><span class="line">更新活动状态为进行中: 成功</span><br><span class="line">更新活动状态为已停用: 成功</span><br><span class="line">更新活动状态为已启用: 成功</span><br><span class="line">更新活动状态为进行中: 成功</span><br><span class="line">更新活动状态为已结束: 成功</span><br><span class="line">更新活动状态为进行中: 失败</span><br></pre></td></tr></table></figure></p><p>可以看到状态切换路径：草稿-&gt; 草稿-&gt; 已启用-&gt; 进行中-&gt; 已停用-&gt; 已启用-&gt; 进行中-&gt; 已结束-&gt; 进行中，前面都是正确切换，但是已结束无法切换为进行中状态，从而验证了状态模式的应用。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>看上一篇策略模式的文章中的 UML，和本文的 UML 是相同的。那么他们的区别是什么呢？<br>策略模式是提供了可相互替换的算法，根据客户端选择一种算法指定一种行为；<br>状态模式则包含了对象状态，根据对象状态不同，行为也不一样，即状态决定行为，将行为对应的逻辑封装到具体状态类中，在环境类中消除逻辑判断，且具体实现不可相互替换。</p><p>状态模式中，客户端角色与状态对象不需要进行交互，所有的交互都委托给环境角色进行。</p><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.runoob.com/design-pattern/state-pattern.html">https://www.runoob.com/design-pattern/state-pattern.html</a></li><li><a href="https://www.cnblogs.com/kubixuesheng/p/5180509.html">https://www.cnblogs.com/kubixuesheng/p/5180509.html</a></li><li><a href="https://www.kancloud.cn/sstd521/design/193606">https://www.kancloud.cn/sstd521/design/193606</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文以运营活动状态转换为例，结合 Spring 演示状态模式的实践应用。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
      <category term="Spring 状态模式实战" scheme="http://nullpointer.pw/tags/Spring-%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>设计模式之策略模式实战</title>
    <link href="http://nullpointer.pw/design-patterns-strategy.html"/>
    <id>http://nullpointer.pw/design-patterns-strategy.html</id>
    <published>2020-02-19T12:38:23.000Z</published>
    <updated>2020-03-09T22:17:46.652Z</updated>
    
    <content type="html"><![CDATA[<p>类型：行为型模式</p><p>意图：定义一系列算法，不同算法策略可以相互替换，并且互不影响。</p><p>主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。</p><p>使用场景：一个系统需要动态地在几种算法中选择一种。</p><a id="more"></a><p><a href="http://nullpointer.pw/design-patterns.html">设计模式系列文章目录</a></p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ul><li>策略上下文角色：持有抽象策略角色的引用，访问策略的入口</li><li>抽象策略角色</li><li>具体策略角色</li></ul><h2 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h2><img  src=http://www.plantuml.com/plantuml/svg/SoWkIImgAStDuKhEIImkLd3Epoj9hIYfvb9Gq5KeBYbAB4bDhmHoj64oda2oA2qnELL3awkMAnF6KmY6gWNfL52eJam2QKukgTNEBqW5ocJcvu4rm6r9BaejIOLfCeJe0bf3Z6eZ7AfXyWesDNfwc7OGa3VYWlfG8L_N3kuTBeVKl1HWy000><h2 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h2><p>以抽奖活动发奖为例，奖品多种多样，可能是现金奖，话费奖品，实物奖等等，每种奖品的发放方式都不一样，比如现金是直接转账，话费奖品是调用运营商提供接口发放，实物奖需要人工快递寄送。在未采用策略模式之前，少不了使用 if…else…来判断发放，当增加一种奖品类型时，就需要增加 if 判断。而采取策略模式之后，只需实现一个策略类即可，对原来的逻辑无需做任何改动，也不会影响其他策略的正常逻辑。</p><h3 id="本文示例UML图"><a href="#本文示例UML图" class="headerlink" title="本文示例UML图"></a>本文示例UML图</h3><img  src=http://www.plantuml.com/plantuml/svg/ZPB1Yi9038RlynGvhdJh0uY8KbmHASZMYoSPfx4xK6Ta6a6tstVVQ5SHfhFqcdp_J_8dqugae_En5AgKLGLhfxynGvCdrX1U26e144D5JX8Mrz6pd_rLk1q1Nb2T2Ty6eX52iz0Tf4BmuBjR1BNStmmLDRczjLjTEy3IhBJ9GyeNliNdnnDTUzEfDTYVJcHP9b_I5TXRue4VlALrBSz1rXmtQTLacy_PPhxOxjBPUfJAqvXvROftts1o5qOFOO7a8Hr7uJY5yASU_mo7WO03T7U-0RWxtW3yJxelep_UqCRn17fPnpPu1J7b6l_wBm00><h3 id="定义抽象策略接口"><a href="#定义抽象策略接口" class="headerlink" title="定义抽象策略接口"></a>定义抽象策略接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PrizeSendStrategy</span> </span>&#123;</span><br><span class="line">    String DEFAULT = <span class="string">"default"</span>;</span><br><span class="line">    String MONEY = <span class="string">"money"</span>;</span><br><span class="line">    String IN_KIND = <span class="string">"in_kind"</span>;</span><br><span class="line">    String CALL_CHARGE = <span class="string">"call_charge"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">doSend</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现具体的策略"><a href="#实现具体的策略" class="headerlink" title="实现具体的策略"></a>实现具体的策略</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CallChargePrizeSendStrategy</span> <span class="keyword">implements</span> <span class="title">PrizeSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> CALL_CHARGE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放话费奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MoneyPrizeSendStrategy</span> <span class="keyword">implements</span> <span class="title">PrizeSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> MONEY;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放现金奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InKindPrizeSendStrategy</span> <span class="keyword">implements</span> <span class="title">PrizeSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> IN_KIND;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"发放实物奖品"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EmptyPrizeSendStrategy</span> <span class="keyword">implements</span> <span class="title">PrizeSendStrategy</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">type</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> DEFAULT;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"不发奖"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现对抽象策略封装的上下文对象"><a href="#实现对抽象策略封装的上下文对象" class="headerlink" title="实现对抽象策略封装的上下文对象"></a>实现对抽象策略封装的上下文对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrizeSendContext</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> PrizeSendStrategy prizeSendStrategy;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">PrizeSendContext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrizeSendStrategy</span><span class="params">(PrizeSendStrategy prizeSendStrategy)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prizeSendStrategy = prizeSendStrategy;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">executePrizeSendStrategy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        prizeSendStrategy.doSend();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="抽取策略工厂"><a href="#抽取策略工厂" class="headerlink" title="抽取策略工厂"></a>抽取策略工厂</h3><p>客户端需要判断要使用哪一个具体的策略类，若还是按照传统的方法 if…else…来判断策略模式就没有意义了，因此策略模式一般都是结合其他模式共同使用。本文中策略类使用 String 来标识，也可以在策略类中增加抽象方法，返回值为枚举类型。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrizeSendStrategyFactory</span> <span class="keyword">implements</span> <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, PrizeSendStrategy&gt; PRIZE_SEND_STRATEGY_MAP = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> PrizeSendStrategy <span class="title">getPrizeSendStrategy</span><span class="params">(String strategyKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> PRIZE_SEND_STRATEGY_MAP.getOrDefault(strategyKey, PRIZE_SEND_STRATEGY_MAP.get(DEFAULT));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setApplicationContext</span><span class="params">(ApplicationContext applicationContext)</span> <span class="keyword">throws</span> BeansException </span>&#123;</span><br><span class="line">        Map&lt;String, PrizeSendStrategy&gt; beans = applicationContext.getBeansOfType(PrizeSendStrategy.class);</span><br><span class="line">        beans.values().forEach(bean -&gt; PRIZE_SEND_STRATEGY_MAP.put(bean.type(), bean));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> WeJan</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020-02-06</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span>(classes = App.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StrategyTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        PrizeSendContext sendContext = <span class="keyword">new</span> PrizeSendContext();</span><br><span class="line">        sendContext.setPrizeSendStrategy(PrizeSendStrategyFactory.getPrizeSendStrategy(<span class="string">"money"</span>));</span><br><span class="line">        sendContext.executePrizeSendStrategy();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">发放现金奖品</span><br></pre></td></tr></table></figure><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.runoob.com/design-pattern/strategy-pattern.html">https://www.runoob.com/design-pattern/strategy-pattern.html</a></li><li><a href="https://juejin.im/post/5c25b8bcf265da61117a5ea1">https://juejin.im/post/5c25b8bcf265da61117a5ea1</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;类型：行为型模式&lt;/p&gt;
&lt;p&gt;意图：定义一系列算法，不同算法策略可以相互替换，并且互不影响。&lt;/p&gt;
&lt;p&gt;主要解决：在有多种算法相似的情况下，使用 if…else 所带来的复杂和难以维护。&lt;/p&gt;
&lt;p&gt;使用场景：一个系统需要动态地在几种算法中选择一种。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>设计模式实战目录</title>
    <link href="http://nullpointer.pw/design-patterns.html"/>
    <id>http://nullpointer.pw/design-patterns.html</id>
    <published>2020-02-19T12:30:22.000Z</published>
    <updated>2020-03-05T14:31:18.692Z</updated>
    
    <content type="html"><![CDATA[<p>重新学习一下设计模式，掌握好设计模式对代码质量的提高还是很有效果的。</p><a id="more"></a><p>有时间就会更新。有些模式不太好想示例，所以目前的示例可能在想到更好的示例之后，会被后期替换掉。</p><h2 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h2><ul><li style="list-style: none"><input type="checkbox" checked></input> <a href="/design-patterns-strategy.html">设计模式之策略模式实战</a></li><li style="list-style: none"><input type="checkbox" checked></input> <a href="/design-patterns-state.html">设计模式之状态模式实战</a></li><li style="list-style: none"><input type="checkbox" checked></input> <a href="/design-patterns-facade.html">设计模式之门面模式实战</a></li><li style="list-style: none"><input type="checkbox" checked></input> <a href="/design-patterns-chain-responsibility.html">设计模式之责任链模式实战</a></li><li style="list-style: none"><input type="checkbox" checked></input> <a href="/design-patterns-observer.html">设计模式之观察者模式实战</a></li><li style="list-style: none"><input type="checkbox"></input> 设计模式之命令模式实战 </li><li style="list-style: none"><input type="checkbox"></input> 设计模式之模板方法模式实战</li></ul><h2 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns">https://github.com/Mosiki/learning-modules/tree/master/learning-designpatterns</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;重新学习一下设计模式，掌握好设计模式对代码质量的提高还是很有效果的。&lt;/p&gt;
    
    </summary>
    
      <category term="设计模式" scheme="http://nullpointer.pw/categories/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
    
  </entry>
  
  <entry>
    <title>Hibernate Validator 校验最佳实践</title>
    <link href="http://nullpointer.pw/hibernate-validator-best-practice.html"/>
    <id>http://nullpointer.pw/hibernate-validator-best-practice.html</id>
    <published>2020-02-04T09:13:39.000Z</published>
    <updated>2020-02-05T02:44:03.117Z</updated>
    
    <content type="html"><![CDATA[<p>几年前刚学习 SpringBoot 的时候，就接触并开始使用 HibernateValidator 校验框架，注解校验结合统一异常处理，对代码的整洁性提高特别有帮助。但是目前发现公司里比较新的项目中对参数进行校验还是使用以前传统的方式，需要逐一对请求对象中的属性使用 if 来判断合法性，当需要校验的属性很多时，一大坨的 if 判断校验代码就不可避免。本文介绍 HibernateValidator 校验框架的日常使用，不涉及自定义约束注解。</p><a id="more"></a><h2 id="没有对比就没有伤害"><a href="#没有对比就没有伤害" class="headerlink" title="没有对比就没有伤害"></a>没有对比就没有伤害</h2><p>首先来看一下使用校验框架前后的代码对比<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200204173055.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>使用校验框架后，代码简洁很多有木有~</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><p>首先需要引入依赖，<strong>需要注意是否依赖有冲突，如果有一定要解决掉冲突</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.hibernate.validator<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hibernate-validator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>6.1.0.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>依赖引入后，Spring 环境需要配置一下校验器。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Validator <span class="title">validator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ValidatorFactory validatorFactory = Validation.byProvider(HibernateValidator.class)</span><br><span class="line">                .configure()</span><br><span class="line">                <span class="comment">// 快速失败</span></span><br><span class="line">                .failFast(<span class="keyword">true</span>)</span><br><span class="line">                .buildValidatorFactory();</span><br><span class="line">        <span class="keyword">return</span> validatorFactory.getValidator();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里设置 failFast 为 true，代表着如果有多个参数的情况下，只要校验出一个参数有误就返回错误而不再继续校验。</p><h2 id="为对象添加校验注解"><a href="#为对象添加校验注解" class="headerlink" title="为对象添加校验注解"></a>为对象添加校验注解</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentVo</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"学号不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"邮箱地址不能为空"</span>)</span><br><span class="line">    <span class="meta">@Email</span>(message = <span class="string">"邮箱地址不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Hibernate Validator 是对 JSR 349 验证规范的具体实现，相关的<a href="#常用注解">常用注解 </a> 我贴在文末以供参考。</p><h2 id="请求接口处理"><a href="#请求接口处理" class="headerlink" title="请求接口处理"></a>请求接口处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;StudentVo&gt; <span class="title">create</span><span class="params">(@Validated StudentVo student)</span> </span>&#123;</span><br><span class="line">  System.out.println(student.toString());</span><br><span class="line">  <span class="keyword">return</span> Result.success(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;StudentVo&gt; <span class="title">update</span><span class="params">(@Validated StudentVo student)</span> </span>&#123;</span><br><span class="line">  System.out.println(student.toString());</span><br><span class="line">  <span class="keyword">return</span> Result.success(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意 <strong>@Validated</strong> 是 <code>org.springframework.validation.annotation.Validated</code>，不要引入错了。加了这个注解之后，就会自动会参数进行校验。如果校验不通过，会抛出 <code>BindException</code> 或者 <code>MethodArgumentNotValidException</code>这两个异常中的一个异常，一般项目中为了规范接口返回值，都会进行统一异常处理。</p><h2 id="校验异常统一异常处理"><a href="#校验异常统一异常处理" class="headerlink" title="校验异常统一异常处理"></a>校验异常统一异常处理</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(BindException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">validateErrorHandler</span><span class="params">(BindException e)</span> </span>&#123;</span><br><span class="line">        ObjectError error = e.getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(error.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(MethodArgumentNotValidException.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; validateErrorHandler(MethodArgumentNotValidException e) &#123;</span><br><span class="line">        ObjectError error = e.getBindingResult().getAllErrors().get(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span> Result.fail(error.getDefaultMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(Throwable.class)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> Result&lt;?&gt; handleException(HttpServletRequest request, Throwable ex) &#123;</span><br><span class="line">        <span class="keyword">return</span> Result.fail(ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为配置校验为 failFast，因此错误信息中只会有一条记录。</p><h2 id="第一次测试"><a href="#第一次测试" class="headerlink" title="第一次测试"></a>第一次测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST -d <span class="string">"name=张三"</span> <span class="string">'http://localhost:8082/learning-validator/create'</span></span><br></pre></td></tr></table></figure><p>只填写了 name 参数，而 id 与 email 未填写的情况下进行请求，返回结果</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"success"</span>:<span class="literal">false</span>,<span class="attr">"msg"</span>:<span class="string">"学号不能为空"</span>&#125;</span><br></pre></td></tr></table></figure><p>按照一般开发逻辑而言，create 接口是不需要传递 id 参数的，但是 update 接口一般必须要传 id 参数，难不成用这个这个校验框架后需要写两个对象么？其实不是的。这就引出了 <strong>校验分组</strong> 的概念，即可以选择校验某些组的属性进行校验。</p><h2 id="校验分组"><a href="#校验分组" class="headerlink" title="校验分组"></a>校验分组</h2><p>首先需要创建两个分组，<strong>CreateGroup</strong> 与 <strong>UpdateGroup</strong>，分别代表着新增时需要校验与更新时需要校验。两个组都是空的接口，只是作为一个标记类使用。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">CreateGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UpdateGroup</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着修改请求对象，分别指定哪些对象是哪些组需要校验的，如果不指定组，默认都会进行校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentVo</span> </span>&#123;</span><br><span class="line">    <span class="meta">@NotNull</span>(groups = UpdateGroup.class, message = <span class="string">"学号不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(message = <span class="string">"姓名不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@NotNull</span>(groups = CreateGroup.class, message = <span class="string">"邮箱地址不能为空"</span>)</span><br><span class="line">    <span class="meta">@Email</span>(groups = CreateGroup.class, message = <span class="string">"邮箱地址不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">  </span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文示例中请求对象，id 属性只在更新时校验；name 属性无论是新增还是更新都要校验；email 属性只在新增时进行校验，而 age 属性因为未指定校验注解，因此不进行校验，这里的 groups 可以是多个分组。</p><p>指定属性的分组之后，控制器接口也需要指定使用哪一个组来进行校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/create"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;StudentVo&gt; <span class="title">create</span><span class="params">(@Validated(CreateGroup.class)</span> StudentVo student) </span>&#123;</span><br><span class="line">  System.out.println(student.toString());</span><br><span class="line">  <span class="keyword">return</span> Result.success(student);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;StudentVo&gt; <span class="title">update</span><span class="params">(@Validated(UpdateGroup.class)</span> StudentVo student) </span>&#123;</span><br><span class="line">  System.out.println(student.toString());</span><br><span class="line">  <span class="keyword">return</span> Result.success(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="第二次测试"><a href="#第二次测试" class="headerlink" title="第二次测试"></a>第二次测试</h2><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST -d <span class="string">"name=张三"</span> <span class="string">'http://localhost:8082/learning-validator/create'</span></span><br></pre></td></tr></table></figure><p>只填写了 name 参数，而 id 与 email 未填写的情况下进行请求，返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"success"</span>:<span class="literal">false</span>,<span class="attr">"msg"</span>:<span class="string">"邮箱地址不能为空"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>填写 name 参数以及 email 参数进行请求<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST \</span><br><span class="line">   -d <span class="string">"name=张三"</span> \</span><br><span class="line">   -d <span class="string">"email=vcmq@foxmail.com"</span> \</span><br><span class="line"> <span class="string">'http://localhost:8082/learning-validator/create'</span></span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"data"</span>:&#123;<span class="attr">"name"</span>:<span class="string">"张三"</span>,<span class="attr">"email"</span>:<span class="string">"vcmq@foxmail.com"</span>&#125;,<span class="attr">"success"</span>:<span class="literal">true</span>,<span class="attr">"msg"</span>:<span class="string">"success"</span>&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到 id 这个字段在 create 的时候，并没有进行校验。修改为 update 接口进行测试。<br><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">curl -i -X POST \                                             </span><br><span class="line">   -d <span class="string">"name=张三"</span> \</span><br><span class="line">   -d <span class="string">"email=vcmq@foxmail.com"</span> \</span><br><span class="line"> <span class="string">'http://localhost:8082/learning-validator/update'</span></span><br></pre></td></tr></table></figure></p><p>返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"success"</span>:<span class="literal">false</span>,<span class="attr">"msg"</span>:<span class="string">"学号不能为空"</span>&#125;</span><br></pre></td></tr></table></figure></p><h2 id="手动校验"><a href="#手动校验" class="headerlink" title="手动校验"></a>手动校验</h2><p>除了使用@Validated 注解方式校验，也可以进行手动校验，手动校验同样也支持分组校验。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/create2"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Result&lt;StudentVo&gt; <span class="title">create2</span><span class="params">(StudentVo student)</span> </span>&#123;</span><br><span class="line">  ValidatorUtils.validateEntity(student, CreateGroup.class);</span><br><span class="line">  System.out.println(student.toString());</span><br><span class="line">  <span class="keyword">return</span> Result.success(student);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>校验工具类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ValidatorUtils</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Validator validator;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123;</span><br><span class="line">    validator = Validation.byProvider(HibernateValidator.class)</span><br><span class="line">      .configure()</span><br><span class="line">      <span class="comment">// 快速失败</span></span><br><span class="line">      .failFast(<span class="keyword">true</span>)</span><br><span class="line">      .buildValidatorFactory().getValidator();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> object 待校验对象</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> groups 待校验的组</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@throws</span> ApiException 校验不通过，则报 ApiException 异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">validateEntity</span><span class="params">(Object object, Class&lt;?&gt;... groups)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> ApiException </span>&#123;</span><br><span class="line">    Set&lt;ConstraintViolation&lt;Object&gt;&gt; constraintViolations = validator.validate(object, groups);</span><br><span class="line">    <span class="keyword">if</span> (!constraintViolations.isEmpty()) &#123;</span><br><span class="line">      constraintViolations.stream().findFirst()</span><br><span class="line">        .map(ConstraintViolation::getMessage)</span><br><span class="line">        .ifPresent(v1 -&gt; &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> ApiException(v1);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="常用注解"><a href="#常用注解" class="headerlink" title="常用注解"></a>常用注解</h2><h3 id="空与非空检查"><a href="#空与非空检查" class="headerlink" title="空与非空检查"></a>空与非空检查</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th></tr></thead><tbody><tr><td>@Null</td><td>Object</td><td>为 null</td></tr><tr><td>@NotNull</td><td>Object</td><td>不为 null</td></tr><tr><td>@NotBlank</td><td>CharSequence</td><td>不为 null，且必须有一个非空格字符</td></tr><tr><td>@NotEmpty</td><td>CharSequence、Collection、Map、Array</td><td>不为 null，且不为空（length/size&gt;0）</td></tr></tbody></table><h3 id="Boolean-值检查"><a href="#Boolean-值检查" class="headerlink" title="Boolean 值检查"></a>Boolean 值检查</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@AssertTrue</td><td>boolean、Boolean</td><td>为 true</td><td>为 null 有效</td></tr><tr><td>@AssertFalse</td><td>boolean、Boolean</td><td>为 false</td><td>为 null 有效</td></tr></tbody></table><h3 id="日期检查"><a href="#日期检查" class="headerlink" title="日期检查"></a>日期检查</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@Future</td><td>Date、Calendar、Instant、LocalDate、LocalDateTime、LocalTime、MonthDay、OffsetDateTime、OffsetTime、Year、YearMonth、ZonedDateTime、HijrahDate、JapaneseDate、MinguoDate、ThaiBuddhistDate</td><td>验证日期为当前时间之后</td><td>为 null 有效</td></tr><tr><td>@FutureOrPresent</td><td>Date、Calendar、Instant、LocalDate、LocalDateTime、LocalTime、MonthDay、OffsetDateTime、OffsetTime、Year、YearMonth、ZonedDateTime、HijrahDate、JapaneseDate、MinguoDate、ThaiBuddhistDate</td><td>验证日期为当前时间或之后</td><td>为 null 有效</td></tr><tr><td>@Past</td><td>Date、Calendar、Instant、LocalDate、LocalDateTime、LocalTime、MonthDay、OffsetDateTime、OffsetTime、Year、YearMonth、ZonedDateTime、HijrahDate、JapaneseDate、MinguoDate、ThaiBuddhistDate</td><td>验证日期为当前时间之前</td><td>为 null 有效</td></tr><tr><td>@PastOrPresent</td><td>Date、Calendar、Instant、LocalDate、LocalDateTime、LocalTime、MonthDay、OffsetDateTime、OffsetTime、Year、YearMonth、ZonedDateTime、HijrahDate、JapaneseDate、MinguoDate、ThaiBuddhistDate</td><td>验证日期为当前时间或之前</td><td>为 null 有效</td></tr></tbody></table><h3 id="数值检查"><a href="#数值检查" class="headerlink" title="数值检查"></a>数值检查</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@Max</td><td>BigDecimal、BigInteger，byte、short、int、long 以及包装类</td><td>小于或等于</td><td>为 null 有效</td></tr><tr><td>@Min</td><td>BigDecimal、BigInteger，byte、short、int、long 以及包装类</td><td>大于或等于</td><td>为 null 有效</td></tr><tr><td>@DecimalMax</td><td>BigDecimal、BigInteger、CharSequence，byte、short、int、long 以及包装类</td><td>小于或等于</td><td>为 null 有效</td></tr><tr><td>@DecimalMin</td><td>BigDecimal、BigInteger、CharSequence，byte、short、int、long 以及包装类</td><td>大于或等于</td><td>为 null 有效</td></tr><tr><td>@Negative</td><td>BigDecimal、BigInteger，byte、short、int、long、float、double 以及包装类</td><td>负数</td><td>为 null 有效，0 无效</td></tr><tr><td>@NegativeOrZero</td><td>BigDecimal、BigInteger，byte、short、int、long、float、double 以及包装类</td><td>负数或零</td><td>为 null 有效</td></tr><tr><td>@Positive</td><td>BigDecimal、BigInteger，byte、short、int、long、float、double 以及包装类</td><td>正数</td><td>为 null 有效，0 无效</td></tr><tr><td>@PositiveOrZero</td><td>BigDecimal、BigInteger，byte、short、int、long、float、double 以及包装类</td><td>正数或零</td><td>为 null 有效</td></tr><tr><td>@Digits(integer = 3, fraction = 2)</td><td>BigDecimal、BigInteger、CharSequence，byte、short、int、long 以及包装类</td><td>整数位数和小数位数上限</td><td>为 null 有效</td></tr></tbody></table><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th><th>备注</th></tr></thead><tbody><tr><td>@Pattern</td><td>CharSequence</td><td>匹配指定的正则表达式</td><td>为 null 有效</td></tr><tr><td>@Email</td><td>CharSequence</td><td>邮箱地址</td><td>为 null 有效，默认正则 <code>&#39;.*&#39;</code></td></tr><tr><td>@Size</td><td>CharSequence、Collection、Map、Array</td><td>大小范围（length/size&gt;0）</td><td>为 null 有效</td></tr></tbody></table><h3 id="hibernate-validator-扩展约束（部分）"><a href="#hibernate-validator-扩展约束（部分）" class="headerlink" title="hibernate-validator 扩展约束（部分）"></a>hibernate-validator 扩展约束（部分）</h3><table><thead><tr><th>注解</th><th>支持 Java 类型</th><th>说明</th></tr></thead><tbody><tr><td>@Length</td><td>String</td><td>字符串长度范围</td></tr><tr><td>@Range</td><td>数值类型和 String</td><td>指定范围</td></tr><tr><td>@URL</td><td></td><td>URL 地址验证</td></tr></tbody></table><h2 id="示例代码"><a href="#示例代码" class="headerlink" title="示例代码"></a>示例代码</h2><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-validator">Hibernate Validator 校验最佳实践示例代码</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://juejin.im/post/5dafcdcb6fb9a04ddc6258f9">如何优雅的做数据校验-Hibernate Validator 详细使用说明 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;几年前刚学习 SpringBoot 的时候，就接触并开始使用 HibernateValidator 校验框架，注解校验结合统一异常处理，对代码的整洁性提高特别有帮助。但是目前发现公司里比较新的项目中对参数进行校验还是使用以前传统的方式，需要逐一对请求对象中的属性使用 if 来判断合法性，当需要校验的属性很多时，一大坨的 if 判断校验代码就不可避免。本文介绍 HibernateValidator 校验框架的日常使用，不涉及自定义约束注解。&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://nullpointer.pw/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="Hibernate Validator 校验" scheme="http://nullpointer.pw/tags/Hibernate-Validator-%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="校验统一异常处理" scheme="http://nullpointer.pw/tags/%E6%A0%A1%E9%AA%8C%E7%BB%9F%E4%B8%80%E5%BC%82%E5%B8%B8%E5%A4%84%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>hexo 自定义文章 url 地址</title>
    <link href="http://nullpointer.pw/hexo-custom-article-url.html"/>
    <id>http://nullpointer.pw/hexo-custom-article-url.html</id>
    <published>2020-01-26T08:32:17.000Z</published>
    <updated>2020-01-27T04:53:35.493Z</updated>
    
    <content type="html"><![CDATA[<p>笔者初次通过 hexo 搭建博客时，对 hexo 不太了解，后来发现中文标题的文章 URL 会转义成<code>http://nullpointer.pw/2018/09/17/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html</code> 类似模样，，，当标题比较长时，URL 就会很长，hexo 默认的 URL 是<code>:year/:month/:title</code>，为了减小 URL 长度，于是笔者做了一件比较傻缺的事情，将 URL 修改成了只有标题，这也造成如今 repo 列表文件过多，同时也并未解决中文标题转义的问题，因此需要自定义文章 URL。</p><a id="more"></a><h2 id="自定义文章-URL"><a href="#自定义文章-URL" class="headerlink" title="自定义文章 URL"></a>自定义文章 URL</h2><p>先说说中文转义 URL 的方式，首先需要修改 hexo 根目录下的_config.yml 文件，</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#permalink: :year/:month/:title/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:year/:month/:urlname.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br><span class="line"><span class="attr">  urlname:</span> <span class="string">index</span></span><br></pre></td></tr></table></figure><p>将原永久链接 permalink 中的<em>:title</em> 替换为为 urlname.html ，同时在 permalink_defaults 增加 urlname 属性，这样就可以通过在文章内容的 Formatter 配置文章的 URL 链接地址，笔者之前修改过一次永久链接格式，只保留了标题即：<code>permalink: :title.html</code>，现在修改为了 <code>permalink: :urlname.html</code> ,本文文章配置如下图，<br><img src="http://img12345.5-project.com/blog/20200126164057.png" alt="">  </p><p>本文最终的 URL 地址就是：<code>http://nullpointer.pw/hexo-custom-article-url.html</code>  </p><h2 id="修改文章模板"><a href="#修改文章模板" class="headerlink" title="修改文章模板"></a>修改文章模板</h2><p>修改 post.md</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">&#123;&#123;</span> <span class="string">title</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">date:</span> <span class="string">&#123;&#123;</span> <span class="string">date</span> <span class="string">&#125;&#125;</span></span><br><span class="line"><span class="attr">urlname:</span> </span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">1</span></span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">-</span> <span class="number">2</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>这样通过命令 <code>hexo new xxxxxx</code>命令新建的博客文章中就自动带有这个属性。</p><h2 id="兼容旧文章-URL"><a href="#兼容旧文章-URL" class="headerlink" title="兼容旧文章 URL"></a>兼容旧文章 URL</h2><p>因为旧的文章可能已经被搜索引擎收录，如果直接粗暴修改就会造成收录的结果出现 404 的情况，还有阅读数统计一般也是根据文章 URL 来做的，笔者之前也有过因为修改文章 URL 造成所有文章阅读数归零的遭遇。</p><p>总之，这显然不是我们想要看到的情况；</p><p>所以为了保持旧的文章 URL 不变，需要对所有旧文章同样增加这个 urlname 属性，属性的值设置为当前文章的文件名即可。比如 <code>http://nullpointer.pw/和我一起打造个简单搜索之 SpringDataElasticSearch 关键词高亮.html</code>这篇文章为了不改变原 URL 地址，在 md 文件中修改为：</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">title:</span> <span class="string">和我一起打造个简单搜索之</span> <span class="string">SpringDataElasticSearch</span> <span class="string">关键词高亮</span></span><br><span class="line"><span class="attr">tags:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SpringDataElasticSearch</span> <span class="string">高亮</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">SpringDataElasticSearch</span> <span class="string">关键词高亮</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ElasticsearchTemplate</span> <span class="string">使用</span> </span><br><span class="line"><span class="attr">categories:</span></span><br><span class="line"><span class="bullet">  -</span> <span class="string">ElasticSearch</span></span><br><span class="line"><span class="attr">date:</span> <span class="number">2018</span><span class="bullet">-09</span><span class="bullet">-17</span> <span class="number">21</span><span class="string">:27:03</span></span><br><span class="line"><span class="attr">urlname:</span> <span class="string">和我一起打造个简单搜索之</span> <span class="string">SpringDataElasticSearch</span> <span class="string">关键词高亮</span></span><br><span class="line"><span class="meta">---</span></span><br></pre></td></tr></table></figure><p>笔者改了好一会儿才改完所有文章，还好文章不是很多。文章特别多的博主，恐怕只能写个脚本批量修改了。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>可以自定义文章 URL 的好处多多，第一个是减小 URL 长度，便于搜索引擎收录，也方便自己在其他地方直接引用，不会出现类似一串乱码 URL 的尴尬情况；</p><p>另外由于文章 URL 与文章标题关系不是特别紧密，不会造成修改标题导致 URL 改变的窘况，可以后期修改不适当的标题。</p><p>好处多多，希望对你有用~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://printempw.github.io/hexo-posts-in-subfolder/">https://printempw.github.io/hexo-posts-in-subfolder/</a></li><li><a href="https://blog.csdn.net/jingbin_/article/details/80617210">https://blog.csdn.net/jingbin_/article/details/80617210</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;笔者初次通过 hexo 搭建博客时，对 hexo 不太了解，后来发现中文标题的文章 URL 会转义成&lt;code&gt;http://nullpointer.pw/2018/09/17/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html&lt;/code&gt; 类似模样，，，当标题比较长时，URL 就会很长，hexo 默认的 URL 是&lt;code&gt;:year/:month/:title&lt;/code&gt;，为了减小 URL 长度，于是笔者做了一件比较傻缺的事情，将 URL 修改成了只有标题，这也造成如今 repo 列表文件过多，同时也并未解决中文标题转义的问题，因此需要自定义文章 URL。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nullpointer.pw/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="hexo-修改永久链接" scheme="http://nullpointer.pw/tags/hexo-%E4%BF%AE%E6%94%B9%E6%B0%B8%E4%B9%85%E9%93%BE%E6%8E%A5/"/>
    
  </entry>
  
  <entry>
    <title>必知必会之流程图</title>
    <link href="http://nullpointer.pw/flow-chart-draw.html"/>
    <id>http://nullpointer.pw/flow-chart-draw.html</id>
    <published>2020-01-22T14:18:46.000Z</published>
    <updated>2020-01-26T13:48:47.396Z</updated>
    
    <content type="html"><![CDATA[<p>流程图在各行各业都有所应用，尤其广泛应用与技术设计，产品设计。画好流程图，可以让别人能够很轻松地理解业务，特别是遇到比较复杂的业务时，用言语解释可能需要花费一上午甚至一天，但是用图去表示可能只需要 1 个小时。不多说，直奔主题。</p><a id="more"></a><h2 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h2><p>看了网上的一些关于流程图绘制的资料，组件太多，组件含义的解释如同机翻，没有具体实例，让人无从下手，看得令人头大。其实大可不必学习所有组件，因为常用的就只有那几个组件，掌握基本的组件使用，以后可以看情况逐渐扩展。</p><p>首先眼熟一下几个常用的流程图基本组件：<br><img src="http://img12345.5-project.com/blog/20200114192225.png" alt="">  </p><p>再看一下流程图的结构构成：<br><img src="http://img12345.5-project.com/blog/20200114203419.png" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20200114203447.png" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20200114203509.png" alt="">  </p><p>常用的流程图就是顺序结构与选择结构二者结合的结构。在绘制流程图的过程中还需要注意如下几点，此处引用参考内容：</p><blockquote><p>（1）绘制流程图时，为了提高流程图的逻辑性，应遵循从左到右、从上到下的顺序排列。</p><p>（2）绘制流程图时，为了提高流程图的逻辑性，应遵循从左到右、从上到下的顺序排列。一个流程从开始符开始，以结束符结束。开始符号只能出现一次，而结束符号可出现多次。若流程足够清晰，可省略开始、结束符号。</p><p>（3）菱形为判断符号，必须要有“是和否（或Y和N）”两种处理结果，意思是说，菱形判断框一定需要有两条箭头流出；且判断符号的上下端流入流出一般用“是（或Y）”，左右端流入流出用“否（或Y）”。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200122211333.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>（4）同一流程图内，符号大小需要保持一致，同时连接线不能交叉，连接线不能无故弯曲。</p><p>（5）流程处理关系为并行关系的，需要将流程放在同一高度。</p><p>（6）必要时应采用标注，以此来清晰地说明流程，标注要用专门的标注符号。</p><p>（7）处理流程须以单一入口和单一出口绘制，同一路径的指示箭头应只有一个。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200122211353.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>（8）同一路径的指示箭头应只有一个。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200122211407.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>（9）流程图中，如果有参考其他已经定义的流程，不需重复绘制，直接用已定义流程符号即可。</p></blockquote><p>以上为需要储备的基础流程图知识，参考地址：<a href="http://www.woshipm.com/zhichang/2329530.html">画了多年的流程图，你真的画规范了吗？</a></p><h2 id="工具准备"><a href="#工具准备" class="headerlink" title="工具准备"></a>工具准备</h2><p>所谓工欲善其事必先利其器，绘制流程图需要趁手的兵器，我推荐两个在线绘制的网站。</p><ul><li><a href="https://www.processon.com/i/58490e6ce4b0d594ec5b4ce3">ProcessOn</a></li><li><a href="https://www.draw.io/">Draw.io</a></li></ul><p>draw.io 提供了桌面版，目前我使用的就是这个， processOn 免费版有数量限制，不过一般也够用了。</p><h2 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h2><p>以下笔者就以本人前段时间开发的抽奖系统实践绘制技术流程图，以供参考。</p><p>需求就是开发一个春节用的抽奖系统，代码实现上还是不难，但是步骤还是比较多的，画流程图一个原因是帮助自己理清业务设计业务，另一个原因就是可以直接将流程图提供给对应的测试，从而达到针对每个步骤进行测试的目的。</p><h2 id="流程图实践绘制"><a href="#流程图实践绘制" class="headerlink" title="流程图实践绘制"></a>流程图实践绘制</h2><p>流程图的绘制规则如上文参考中的规则进行，处理组件只有一个输入一个输出，菱形判定必定有两个输出，左右端流出代表否定，不同流程使用子流程组件进行引用，连接线无交叉等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200122212251.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>笔者使用Draw.io绘制本图，但是常用的组件分散于不同的分类中，为了方便使用，笔者将常用的几个基本组件放到便笺本分类。这个分类可以进行导入导出，这里分享我的导出内容，可以直接拷贝出来粘贴保存到一个文件中，然后在便笺本中导入即可。  </p><p><img src="http://img12345.5-project.com/blog/20200122213527.png" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20200122213410.png" alt=""></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mxlibrary</span>&gt;</span>[&#123;"xml":"jVFBDsIgEHwN14bCxbOtevIRRNZCAkJgtfT3QkEbD008kOzM7IQZIHyw6RKEV1cnwRB+InwIzmGdbBrAGMKoloSPhDGaD2HnHbVfVepFgAf+Y2DV8BLmCZWpRMTFNEKhzbHGnvCjFFFBcdIMZqURohe3sjfnBpmLSvgCbZpKpU7eZRdRBGzXQEBIu1FXquW8gLOAYckrs5ao6sahtqEK9KSaizdOxIqnr3PrnYdW/QO3J161nx94Aw==","w":80,"h":30,"aspect":"fixed","title":"开始/结束"&#125;,&#123;"xml":"jVBLDsIgED3N7CnEC9hqVx6CyKSQgDQw2vb2TgvauGjigmTmfch7A6oNc5/0aG/RoAd1AdWmGKlMYW7Re5DCGVAdSCn4gbwesM3GilEnfNA/BlkML+2fWJACZFp8BSwFjtU1oM5GZ4urU/AyWUeYR31fdRM3YKz+holwPky0QTVOjzEgpYUlkzNkq0KU1MKiG2y1nSqmc9mHr3Xvx0Ot+Fn3U27cz6Xf","w":100,"h":50,"aspect":"fixed","title":"处理"&#125;,&#123;"xml":"jZA9DsIwDIVP4z1NFmZa6MTECQK16kgJqVL37/aEJlB1qMQQ6fl7dvRsUKWb66A7uvkGLagLqDJ4z0m5uURrQQrTgKpAShEfyOuBW6yu6HTAF/8zINPAqO2AiSTQ82IzCOTdY+hBnScyjPdOPz/OFDNHRuxi6KqIMn+FgXE+jLOinKVG75DDElsm0zCljlNKLAhNS7xnuk91+5vcdosir/cttzOu3u7Kbw==","w":80,"h":80,"aspect":"fixed","title":"判定"&#125;,&#123;"xml":"jZJRbsMgDIZPwzsF7QKla/cy7aEnoIkXUJ0QgdMkO/0coKs2qdIiRbK/3z8xdoQ2/XKKdnTvoQUU+lVoE0OgEvWLAUShpG+FPgilJL9CHZ+ou6zK0UYY6D8GVQw3ixMUUkCiFStIzo5bOMbQQEpC72fnCc6jbTY8c+/MHPXc/GHH4cU21y6GaWg/JkI/QOWtTQ6270pOPsNAR9t7XBm8Ad6AfGOrcPZf2aRqbgKGmLvRMj/MLfpuYNbwTYHFfaIYrvCn1JjtCI9450PY+tnXa0MkWJ6OLqM6txOEHiiuXDL7llytkGW80oHvXLW9VGZTybsf62MRHNRd3NPHzrP265f4Bg==","w":100,"h":50,"aspect":"fixed","title":"子流程"&#125;,&#123;"xml":"jVJRasMwDD2N/12bHWDLln4NdgUzi9jMiYqstsntp0VJm7AVZjBIT3pPkmXjm348Ujild4xQjH8zviFEVqsfGyjFOJuj8a/GOSvXuPZB9DBH7SkQDPwfglPCJZQzKKJA5aksAAzxmQiv4g04CPgSQ03wI3AQJ3FfFrMy4Rc0WJBmqm9bK0ciKgqxg4d9ztDS5BGwB6ZJUq45ctKMJx3FJshd4j1GUALny14+VHW7m9ytwgdmKezstJdZGRXP9AlL0vb5Vt74N48DdcC/eGJshrpD8zJW9750Td/+iW8=","w":50,"h":50,"aspect":"fixed","title":"虚线"&#125;]<span class="tag">&lt;/<span class="name">mxlibrary</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="流程图导出"><a href="#流程图导出" class="headerlink" title="流程图导出"></a>流程图导出</h2><p>本图通过桌面版客户端 Draw.io 绘制，绘制通过导出功能导出，导出方法：先 ctrl + a 选中所有组件，选择文件-导出为文件-png，设置边框宽度，勾选 仅所选内容，即可导出PNG图片。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200122212857.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://www.woshipm.com/zhichang/2329530.html">画了多年的流程图，你真的画规范了吗？</a></li><li><a href="http://www.chanpin100.com/article/105363">深入浅出为你解读四类「流程图」，附摩拜/ofo案例分析</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;流程图在各行各业都有所应用，尤其广泛应用与技术设计，产品设计。画好流程图，可以让别人能够很轻松地理解业务，特别是遇到比较复杂的业务时，用言语解释可能需要花费一上午甚至一天，但是用图去表示可能只需要 1 个小时。不多说，直奔主题。&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nullpointer.pw/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="流程图绘制" scheme="http://nullpointer.pw/tags/%E6%B5%81%E7%A8%8B%E5%9B%BE%E7%BB%98%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Java8 时间 API 全集合</title>
    <link href="http://nullpointer.pw/Java8%E6%97%B6%E9%97%B4API%E5%85%A8%E9%9B%86%E5%90%88.html"/>
    <id>http://nullpointer.pw/Java8时间API全集合.html</id>
    <published>2020-01-21T22:56:38.000Z</published>
    <updated>2020-02-23T05:06:36.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>Java 8 已经面世很长时间，目前连 Java 13、Java 14 都已经出来了，但自己对于 Java8 中的一些 API 用法还不是很熟悉，今年才算全面切换到 Java8。在日常开发过程中，不可避免地会使用到 Java 8 的新时间 API，比如 LocalDateTime、LocalDate 等，放弃使用难用的 Date；但是每次需要进行转换操作时，总是需要重复去 Google 搜索，索性一次性过一遍所有的时间 API，总结一些常用的转换方法，比如时间戳与 LocalDateTime 互转，Date 与 LocalDateTime 互转。</p><a id="more"></a><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter DATE_TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM-dd HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter TIME_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"HH:mm:ss"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter MONTH_DAY_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"MM-dd"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter YEAR_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyy"</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> DateTimeFormatter YEAR_MONTH_FORMATTER = DateTimeFormatter.ofPattern(<span class="string">"yyyy-MM"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 通用方法</span></span><br><span class="line">        <span class="comment">// plus/plusXXX  当前日期或时间加上一段 (年/月/周/日/小时/分钟) 日期或时间</span></span><br><span class="line">        <span class="comment">// minus/minusXXX  当前日期或时间减去一段 (年/月/周/日/小时/分钟) 日期或时间</span></span><br><span class="line">        <span class="comment">// isBefore 要比较的日期或时间是否在当前对象之前</span></span><br><span class="line">        <span class="comment">// isAfter  要比较的日期或时间是否在当前对象之后</span></span><br><span class="line">        <span class="comment">// parse 通过字符串创建日期或时间</span></span><br><span class="line">        <span class="comment">// format 将日期或时间格式化为字符串</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------LocalDate---------"</span>);</span><br><span class="line">        <span class="comment">//  日期</span></span><br><span class="line">        LocalDate today = LocalDate.now();</span><br><span class="line">        System.out.println(<span class="string">"当前日期："</span> + today);</span><br><span class="line">        System.out.println(<span class="string">"当前日期加上 3 天："</span> + today.plusDays(<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"当前日期减去 3 天："</span> + today.minusDays(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"年："</span> + today.getYear());</span><br><span class="line">        System.out.println(<span class="string">"月 (EN)："</span> + today.getMonth());</span><br><span class="line">        System.out.println(<span class="string">"月 (1-12)："</span> + today.getMonthValue());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"当周第几天："</span> + today.getDayOfWeek());</span><br><span class="line">        System.out.println(<span class="string">"当月第几天："</span> + today.getDayOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"当年第几天："</span> + today.getDayOfYear());</span><br><span class="line">        System.out.println(<span class="string">"是否闰年："</span> + today.isLeapYear());</span><br><span class="line">        System.out.println(<span class="string">"当月共多少天："</span> + today.lengthOfMonth());</span><br><span class="line">        System.out.println(<span class="string">"当年共多少天："</span> + today.lengthOfYear());</span><br><span class="line"></span><br><span class="line">        LocalDate nextDay = today.plusDays(<span class="number">1</span>);</span><br><span class="line">        Period until = today.until(nextDay);</span><br><span class="line">        System.out.println(<span class="string">"today-nextDay 间隔天数: "</span> + until.getDays());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"isBefore："</span> + today.isBefore(nextDay));</span><br><span class="line">        System.out.println(<span class="string">"isAfter： "</span> + today.isAfter(nextDay));</span><br><span class="line"></span><br><span class="line">        LocalDate parseDate = LocalDate.parse(<span class="string">"2020-01-24"</span>);</span><br><span class="line">        System.out.println(<span class="string">"parseDate："</span> + parseDate);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------LocalDateTime---------"</span>);</span><br><span class="line">        <span class="comment">// 日期时间</span></span><br><span class="line">        LocalDateTime nowLocalDateTime = LocalDateTime.now();</span><br><span class="line">        System.out.println(<span class="string">"当前时间："</span> + nowLocalDateTime.format(DATE_TIME_FORMATTER));</span><br><span class="line">        System.out.println(<span class="string">"当前时间加上 3 小时："</span> + nowLocalDateTime.plusHours(<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"当前时间减去 3 小时："</span> + nowLocalDateTime.minusHours(<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"年："</span> + nowLocalDateTime.getYear());</span><br><span class="line">        System.out.println(<span class="string">"月 (EN)："</span> + nowLocalDateTime.getMonth());</span><br><span class="line">        System.out.println(<span class="string">"月 (1-12)："</span> + nowLocalDateTime.getMonthValue());</span><br><span class="line">        System.out.println(<span class="string">"月 (1-12)："</span> + nowLocalDateTime.getMonthValue());</span><br><span class="line"></span><br><span class="line">        LocalDateTime nextDayNow = nowLocalDateTime.plusDays(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"isBefore："</span> + nowLocalDateTime.isBefore(nextDayNow));</span><br><span class="line">        System.out.println(<span class="string">"isAfter："</span> + nowLocalDateTime.isAfter(nextDayNow));</span><br><span class="line"></span><br><span class="line">        LocalDateTime parseDateTime = LocalDateTime.parse(<span class="string">"2020-01-21 18:05:35"</span>, DATE_TIME_FORMATTER);</span><br><span class="line">        System.out.println(<span class="string">"parseDateTime："</span> + parseDateTime);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------LocalTime---------"</span>);</span><br><span class="line">        <span class="comment">// 时间</span></span><br><span class="line">        LocalTime localTime = LocalTime.now(Clock.systemDefaultZone());</span><br><span class="line">        System.out.println(<span class="string">"当前时间："</span> + localTime.format(TIME_FORMATTER));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------MonthDay---------"</span>);</span><br><span class="line">        <span class="comment">// 月天</span></span><br><span class="line">        MonthDay monthDay = MonthDay.now();</span><br><span class="line">        System.out.println(<span class="string">"当前月天："</span> + monthDay.format(MONTH_DAY_FORMATTER));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------Year---------"</span>);</span><br><span class="line">        <span class="comment">// 年</span></span><br><span class="line">        Year year = Year.now();</span><br><span class="line">        System.out.println(<span class="string">"当前年："</span> + year.format(YEAR_FORMATTER));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------YearMonth---------"</span>);</span><br><span class="line">        <span class="comment">// 年月</span></span><br><span class="line">        YearMonth yearMonth = YearMonth.now();</span><br><span class="line">        System.out.println(<span class="string">"当前年月："</span> + yearMonth.format(YEAR_MONTH_FORMATTER));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------DayOfWeek---------"</span>);</span><br><span class="line">        <span class="comment">// 星期</span></span><br><span class="line">        DayOfWeek dayOfWeek = DayOfWeek.from(LocalDateTime.now());</span><br><span class="line">        System.out.println(<span class="string">"当前星期第几天："</span> + dayOfWeek.getValue());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------Month---------"</span>);</span><br><span class="line">        <span class="comment">// 月份</span></span><br><span class="line">        Month month = Month.from(LocalDate.now());</span><br><span class="line">        System.out.println(<span class="string">"当年第几月"</span> + month.getValue());</span><br><span class="line">        System.out.println(<span class="string">"当月天数："</span> + month.length(Year.now().isLeap()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------clock---------"</span>);</span><br><span class="line">        <span class="comment">// 时钟对象</span></span><br><span class="line">        Clock clock = Clock.systemDefaultZone();</span><br><span class="line">        System.out.println(<span class="string">"当前时间时间戳："</span> + clock.millis());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------duration---------"</span>);</span><br><span class="line">        <span class="comment">// 基于时间的时间区间（单位：小时、分钟、毫秒、秒、纳秒等）</span></span><br><span class="line">        Duration duration = Duration.between(nowLocalDateTime, nowLocalDateTime.plusHours(<span class="number">2</span>));</span><br><span class="line">        System.out.println(<span class="string">"秒："</span> + duration.getSeconds());</span><br><span class="line">        System.out.println(<span class="string">"毫秒："</span> + duration.toMillis());</span><br><span class="line">        System.out.println(<span class="string">"分钟："</span> + duration.toMinutes());</span><br><span class="line">        System.out.println(<span class="string">"小时："</span> + duration.toHours());</span><br><span class="line">        System.out.println(<span class="string">"天："</span> + duration.toDays());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------period---------"</span>);</span><br><span class="line">        <span class="comment">//  基于日期的时间区间（单位：年、月、日）</span></span><br><span class="line">        Period period = Period.between(LocalDate.now(), LocalDate.now()</span><br><span class="line">                .plusYears(<span class="number">1</span>)</span><br><span class="line">                .plusMonths(<span class="number">2</span>)</span><br><span class="line">                .plusDays(<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"天："</span> + period.getDays());</span><br><span class="line">        System.out.println(<span class="string">"月："</span> + period.getMonths());</span><br><span class="line">        System.out.println(<span class="string">"年："</span> + period.getYears());</span><br><span class="line">        System.out.println(<span class="string">"总月数："</span> + period.toTotalMonths());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------Instant---------"</span>);</span><br><span class="line">        <span class="comment">// 在时间线上的瞬间点</span></span><br><span class="line">        Instant instant = Instant.now();</span><br><span class="line">        System.out.println(<span class="string">"毫秒："</span> + instant.toEpochMilli());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"--------实用方法---------"</span>);</span><br><span class="line">        <span class="comment">// 指定日期的凌晨 00:00:00</span></span><br><span class="line">        LocalDateTime todayStartTime = today.atStartOfDay();</span><br><span class="line">        System.out.println(<span class="string">"指定日期的开始时间："</span> + todayStartTime.format(DATE_TIME_FORMATTER));</span><br><span class="line">        <span class="comment">// 或者</span></span><br><span class="line">        LocalDateTime todayStart = LocalDateTime.of(today, LocalTime.MIN);</span><br><span class="line">        System.out.println(<span class="string">"指定日期的开始时间: "</span> + todayStart.format(DATE_TIME_FORMATTER));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 指定日期的凌晨 23:59:59</span></span><br><span class="line">        LocalDateTime todayEnd = LocalDateTime.of(today, LocalTime.MAX);</span><br><span class="line">        System.out.println(<span class="string">"指定日期的结束时间："</span> + todayEnd.format(DATE_TIME_FORMATTER));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 毫秒时间戳转 LocalDateTime</span></span><br><span class="line">        System.out.println(<span class="string">"毫秒时间戳转 LocalDateTime："</span> + LocalDateTime.ofInstant(Instant.ofEpochMilli(<span class="number">1579646281991L</span>), ZoneOffset.ofHours(<span class="number">8</span>)).toString());</span><br><span class="line">        <span class="comment">// LocalDateTime 转时间戳</span></span><br><span class="line">        System.out.println(<span class="string">"LocalDateTime 转时间戳："</span> + nowLocalDateTime.toInstant(ZoneOffset.ofHours(<span class="number">8</span>)).toEpochMilli());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// LocalDateTime 转 yyyy-MM-dd HH:mm:ss 格式 String</span></span><br><span class="line">        System.out.println(<span class="string">"LocalDateTime 转 yyyy-MM-dd HH:mm:ss 格式 String："</span> + LocalDateTime.now().format(DATE_TIME_FORMATTER));</span><br><span class="line">        <span class="comment">// yyyy-MM-dd HH:mm:ss 格式 String 转 LocalDateTime</span></span><br><span class="line">        LocalDateTime parseLocalDateTime = LocalDateTime.parse(<span class="string">"2020-01-22 23:59:59"</span>, DATE_TIME_FORMATTER);</span><br><span class="line">        System.out.println(<span class="string">"yyyy-MM-dd HH:mm:ss 格式 String 转 LocalDateTime："</span> + parseLocalDateTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Date 转 LocalDateTime</span></span><br><span class="line">        Date nowDate = <span class="keyword">new</span> Date();</span><br><span class="line">        LocalDateTime date2LocalTime = LocalDateTime.ofInstant(nowDate.toInstant(), ZoneOffset.ofHours(<span class="number">8</span>));</span><br><span class="line">        System.out.println(<span class="string">"Date 转 LocalDateTime："</span> + date2LocalTime);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// LocalDateTime 转 Date</span></span><br><span class="line">        Date localDateTime2Date = Date.from(nowLocalDateTime.toInstant(ZoneOffset.ofHours(<span class="number">8</span>)));</span><br><span class="line">        System.out.println(<span class="string">"LocalDateTime 转 Date："</span> + localDateTime2Date);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">// LocalDate转LocalDateTime</span></span><br><span class="line">      LocalDateTime localDate2LocalDateTime = LocalDateTime.of(today, LocalTime.parse(<span class="string">"00:00:00"</span>));</span><br><span class="line"></span><br><span class="line">      <span class="comment">// LocalDateTime转LocalDate</span></span><br><span class="line">      LocalDate localDateTime2LocalDate = nowLocalDateTime.toLocalDate();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">--------LocalDate---------</span><br><span class="line">当前日期：2020-01-22</span><br><span class="line">当前日期加上 3 天：2020-01-25</span><br><span class="line">当前日期减去 3 天：2020-01-19</span><br><span class="line">年：2020</span><br><span class="line">月 (EN)：JANUARY</span><br><span class="line">月 (1-12)：1</span><br><span class="line">当周第几天：WEDNESDAY</span><br><span class="line">当月第几天：22</span><br><span class="line">当年第几天：22</span><br><span class="line">是否闰年：<span class="literal">true</span></span><br><span class="line">当月共多少天：31</span><br><span class="line">当年共多少天：366</span><br><span class="line">today-nextDay 间隔天数: 1</span><br><span class="line">isBefore：<span class="literal">true</span></span><br><span class="line">isAfter： <span class="literal">false</span></span><br><span class="line">parseDate：2020-01-24</span><br><span class="line">--------LocalDateTime---------</span><br><span class="line">当前时间：2020-01-22 07:06:13</span><br><span class="line">当前时间加上 3 小时：2020-01-22T10:06:13.979</span><br><span class="line">当前时间减去 3 小时：2020-01-22T04:06:13.979</span><br><span class="line">年：2020</span><br><span class="line">月 (EN)：JANUARY</span><br><span class="line">月 (1-12)：1</span><br><span class="line">月 (1-12)：1</span><br><span class="line">isBefore：<span class="literal">true</span></span><br><span class="line">isAfter：<span class="literal">false</span></span><br><span class="line">parseDateTime：2020-01-21T18:05:35</span><br><span class="line">--------LocalTime---------</span><br><span class="line">当前时间：07:06:13</span><br><span class="line">--------MonthDay---------</span><br><span class="line">当前月天：01-22</span><br><span class="line">--------Year---------</span><br><span class="line">当前年：2020</span><br><span class="line">--------YearMonth---------</span><br><span class="line">当前年月：2020-01</span><br><span class="line">--------DayOfWeek---------</span><br><span class="line">当前星期第几天：3</span><br><span class="line">--------Month---------</span><br><span class="line">当年第几月 1</span><br><span class="line">当月天数：31</span><br><span class="line">--------clock---------</span><br><span class="line">当前时间时间戳：1579647973982</span><br><span class="line">--------duration---------</span><br><span class="line">秒：7200</span><br><span class="line">毫秒：7200000</span><br><span class="line">分钟：120</span><br><span class="line">小时：2</span><br><span class="line">天：0</span><br><span class="line">--------period---------</span><br><span class="line">天：3</span><br><span class="line">月：2</span><br><span class="line">年：1</span><br><span class="line">总月数：14</span><br><span class="line">--------Instant---------</span><br><span class="line">毫秒：1579647973983</span><br><span class="line">--------实用方法---------</span><br><span class="line">指定日期的开始时间：2020-01-22 00:00:00</span><br><span class="line">指定日期的开始时间: 2020-01-22 00:00:00</span><br><span class="line">指定日期的结束时间：2020-01-22 23:59:59</span><br><span class="line">毫秒时间戳转 LocalDateTime：2020-01-22T06:38:01.991</span><br><span class="line">LocalDateTime 转时间戳：1579647973979</span><br><span class="line">LocalDateTime 转 yyyy-MM-dd HH:mm:ss 格式 String：2020-01-22 07:06:13</span><br><span class="line">yyyy-MM-dd HH:mm:ss 格式 String 转 LocalDateTime：2020-01-22T23:59:59</span><br><span class="line">Date 转 LocalDateTime：2020-01-22T07:06:13.984</span><br><span class="line">LocalDateTime 转 Date：Wed Jan 22 07:06:13 CST 2020</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.172u.top/JDK1.8cn/">在线 JDK8 中文文档 </a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;Java 8 已经面世很长时间，目前连 Java 13、Java 14 都已经出来了，但自己对于 Java8 中的一些 API 用法还不是很熟悉，今年才算全面切换到 Java8。在日常开发过程中，不可避免地会使用到 Java 8 的新时间 API，比如 LocalDateTime、LocalDate 等，放弃使用难用的 Date；但是每次需要进行转换操作时，总是需要重复去 Google 搜索，索性一次性过一遍所有的时间 API，总结一些常用的转换方法，比如时间戳与 LocalDateTime 互转，Date 与 LocalDateTime 互转。&lt;/p&gt;
    
    </summary>
    
      <category term="java" scheme="http://nullpointer.pw/categories/java/"/>
    
    
      <category term="LocalDateTime转时间戳" scheme="http://nullpointer.pw/tags/LocalDateTime%E8%BD%AC%E6%97%B6%E9%97%B4%E6%88%B3/"/>
    
      <category term="时间戳转LocalDateTime" scheme="http://nullpointer.pw/tags/%E6%97%B6%E9%97%B4%E6%88%B3%E8%BD%ACLocalDateTime/"/>
    
      <category term="Date转LocalDateTime" scheme="http://nullpointer.pw/tags/Date%E8%BD%ACLocalDateTime/"/>
    
      <category term="LocalDateTime转Date" scheme="http://nullpointer.pw/tags/LocalDateTime%E8%BD%ACDate/"/>
    
      <category term="LocalDateTime转LocalDate" scheme="http://nullpointer.pw/tags/LocalDateTime%E8%BD%ACLocalDate/"/>
    
      <category term="LocalDate转LocalDateTime" scheme="http://nullpointer.pw/tags/LocalDate%E8%BD%ACLocalDateTime/"/>
    
      <category term="LocalDateTime转String" scheme="http://nullpointer.pw/tags/LocalDateTime%E8%BD%ACString/"/>
    
      <category term="String转LocalDateTime" scheme="http://nullpointer.pw/tags/String%E8%BD%ACLocalDateTime/"/>
    
      <category term="Java8获取凌晨时间" scheme="http://nullpointer.pw/tags/Java8%E8%8E%B7%E5%8F%96%E5%87%8C%E6%99%A8%E6%97%B6%E9%97%B4/"/>
    
  </entry>
  
  <entry>
    <title>mapstruct最佳实践</title>
    <link href="http://nullpointer.pw/mapstruct%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"/>
    <id>http://nullpointer.pw/mapstruct最佳实践.html</id>
    <published>2020-01-17T14:21:58.000Z</published>
    <updated>2020-01-22T14:41:03.401Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>按照日常开发习惯，对于不同领域层使用不同JavaBean对象传输数据，避免相互影响，因此基于数据库实体对象User衍生出比如UserDto、UserVo等对象，于是在不同层之间进行数据传输时，不可避免地需要将这些对象进行互相转换操作。</p><p>常见的转换方式有：</p><ul><li>调用getter/setter方法进行属性赋值</li><li>调用BeanUtil.copyPropertie进行反射属性赋值</li></ul><p>第一种方式不必说，属性多了就需要写一大坨getter/setter代码。第二种方式比第一种方式要简便很多，但是坑巨多，比如sources与target写反，难以定位某个字段在哪里进行的赋值，同时因为用到反射，导致性能也不佳。</p><p>鉴于此，今天写一写第三种对象转换方式，本文使用的是 MapStruct 工具进行转换，MapStruct 原理也很简单，就是在代码编译阶段生成对应的赋值代码，底层原理还是调用getter/setter方法，但是这是由工具替我们完成，MapStruct在不影响性能的情况下，解决了前面两种方式弊端，很赞~</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>为了讲解 MapStruct 工具的使用，本文使用常见的 User 类以及对应 UserDto 对象来演示。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password; <span class="comment">// 密码</span></span><br><span class="line">    <span class="keyword">private</span> Integer sex;  <span class="comment">// 性别</span></span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday; <span class="comment">// 生日</span></span><br><span class="line">    <span class="keyword">private</span> LocalDateTime createTime; <span class="comment">// 创建时间</span></span><br><span class="line">    <span class="keyword">private</span> String config; <span class="comment">// 其他扩展信息，以JSON格式存储</span></span><br><span class="line">  <span class="keyword">private</span> String test; <span class="comment">// 测试字段</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Accessors</span>(chain = <span class="keyword">true</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserVo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Long id;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line">    <span class="keyword">private</span> LocalDate birthday;</span><br><span class="line">    <span class="keyword">private</span> String createTime;</span><br><span class="line">    <span class="keyword">private</span> List&lt;UserConfig&gt; config;</span><br><span class="line">  <span class="keyword">private</span> String test; <span class="comment">// 测试字段</span></span><br><span class="line">    <span class="meta">@Data</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">UserConfig</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String field1;</span><br><span class="line">        <span class="keyword">private</span> Integer field2;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意观察这两个类的区别。</p><h2 id="一、MapStruct-配置以及基础使用"><a href="#一、MapStruct-配置以及基础使用" class="headerlink" title="一、MapStruct 配置以及基础使用"></a>一、MapStruct 配置以及基础使用</h2><p>项目中引入 MapStruct 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mapstruct<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mapstruct-processor<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.3.1.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>因为项目中的对象转换操作基本都一样，因此抽取除了一个转换基类，不同对象如果只是简单转换可以直接继承该基类，而无需覆写基类任何方法，即只需要一个空类即可。如果子类覆写了基类的方法，则基类上的 <strong>@Mapping</strong> 会失效。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@MapperConfig</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BaseMapping</span>&lt;<span class="title">SOURCE</span>, <span class="title">TARGET</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射同名属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"createTime"</span>, dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="function">TARGET <span class="title">sourceToTarget</span><span class="params">(SOURCE var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向，映射同名属性</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InheritInverseConfiguration</span>(name = <span class="string">"sourceToTarget"</span>)</span><br><span class="line">    <span class="function">SOURCE <span class="title">targetToSource</span><span class="params">(TARGET var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射同名属性，集合形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InheritConfiguration</span>(name = <span class="string">"sourceToTarget"</span>)</span><br><span class="line">    <span class="function">List&lt;TARGET&gt; <span class="title">sourceToTarget</span><span class="params">(List&lt;SOURCE&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向，映射同名属性，集合形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@InheritConfiguration</span>(name = <span class="string">"targetToSource"</span>)</span><br><span class="line">    <span class="function">List&lt;SOURCE&gt; <span class="title">targetToSource</span><span class="params">(List&lt;TARGET&gt; var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 映射同名属性，集合流形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;TARGET&gt; <span class="title">sourceToTarget</span><span class="params">(Stream&lt;SOURCE&gt; stream)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 反向，映射同名属性，集合流形式</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function">List&lt;SOURCE&gt; <span class="title">targetToSource</span><span class="params">(Stream&lt;TARGET&gt; stream)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实现 User 与 UserVo 对象的转换器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.mapstruct.Mapper;</span><br><span class="line"><span class="keyword">import</span> org.mapstruct.Mapping;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Mapper</span>(componentModel = <span class="string">"spring"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserMapping</span> <span class="keyword">extends</span> <span class="title">BaseMapping</span>&lt;<span class="title">User</span>, <span class="title">UserVo</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"gender"</span>, source = <span class="string">"sex"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"createTime"</span>, dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">UserVo <span class="title">sourceToTarget</span><span class="params">(User var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"sex"</span>, source = <span class="string">"gender"</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"password"</span>, ignore = <span class="keyword">true</span>)</span><br><span class="line">    <span class="meta">@Mapping</span>(target = <span class="string">"createTime"</span>, dateFormat = <span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">User <span class="title">targetToSource</span><span class="params">(UserVo var1)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> List&lt;UserConfig&gt; <span class="title">strConfigToListUserConfig</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.parseArray(config, UserConfig.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">default</span> String <span class="title">listUserConfigToStrConfig</span><span class="params">(List&lt;UserConfig&gt; list)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> JSON.toJSONString(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>本文示例使用的是 Spring 的方式，@Mapper 注解的 componentModel 属性值为 spring，不过应该大多数都用的此模式进行开发。</p><p>@Mapping用于配置对象的映射关系，示例中 User 对象性别属性名为 sex，而UserVo对象性别属性名为gender，因此需要配置 target 与 source 属性。</p><p>password 字段不应该返回到前台，可以采取两种方式不进行转换，第一种就是在vo对象中不出现password字段，第二种就是在@Mapping中设置该字段 ignore = true。</p><p>MapStruct 提供了时间格式化的属性 <strong>dataFormat</strong>，支持Date、LocalDate、LocalDateTime等时间类型与String的转换。示例中birthday 属性为 LocalDate 类型，可以无需指定dataFormat自动完成转换，而LocalDateTime类型默认使用的是ISO格式时间，在国内往往不符合需求，因此需要手动指定一下 dataFormat。</p><h2 id="二、自定义属性类型转换方法"><a href="#二、自定义属性类型转换方法" class="headerlink" title="二、自定义属性类型转换方法"></a>二、自定义属性类型转换方法</h2><p>一般常用的类型字段转换 MapStruct都能替我们完成，但是有一些是我们自定义的对象类型，MapStruct就不能进行字段转换，这就需要我们编写对应的类型转换方法，笔者使用的是JDK8，支持接口中的默认方法，可以直接在转换器中添加自定义类型转换方法。</p><p>示例中User对象的config属性是一个JSON字符串，UserVo对象中是List<UserConfig>类型的，这需要实现JSON字符串与对象的互转。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">default</span> List&lt;UserConfig&gt; <span class="title">strConfigToListUserConfig</span><span class="params">(String config)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> JSON.parseArray(config, UserConfig.class);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">default</span> String <span class="title">listUserConfigToStrConfig</span><span class="params">(List&lt;UserConfig&gt; list)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> JSON.toJSONString(list);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果是 JDK8以下的，不支持默认方法，可以另外定义一个 转换器，然后再当前转换器的 @Mapper 中通过 uses = XXX.class 进行引用。</p><p>定义好方法之后，MapStruct当匹配到合适类型的字段时，会调用我们自定义的转换方法进行转换。</p><h2 id="三、单元测试"><a href="#三、单元测试" class="headerlink" title="三、单元测试"></a>三、单元测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MapStructTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Resource</span></span><br><span class="line">  <span class="keyword">private</span> UserMapping userMapping;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">tetDomain2DTO</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    User user = <span class="keyword">new</span> User()</span><br><span class="line">      .setId(<span class="number">1L</span>)</span><br><span class="line">      .setUsername(<span class="string">"zhangsan"</span>)</span><br><span class="line">      .setSex(<span class="number">1</span>)</span><br><span class="line">      .setPassword(<span class="string">"abc123"</span>)</span><br><span class="line">      .setCreateTime(LocalDateTime.now())</span><br><span class="line">      .setBirthday(LocalDate.of(<span class="number">1999</span>, <span class="number">9</span>, <span class="number">27</span>))</span><br><span class="line">      .setConfig(<span class="string">"[&#123;\"field1\":\"Test Field1\",\"field2\":500&#125;]"</span>);</span><br><span class="line">    UserVo userVo = userMapping.sourceToTarget(user);</span><br><span class="line">    log.info(<span class="string">"User: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="comment">//        User: User(id=1, username=zhangsan, password=abc123, sex=1, birthday=1999-09-27, createTime=2020-01-17T17:46:20.316, config=[&#123;"field1":"Test Field1","field2":500&#125;])</span></span><br><span class="line">    log.info(<span class="string">"UserVo: &#123;&#125;"</span>, userVo);</span><br><span class="line">    <span class="comment">//        UserVo: UserVo(id=1, username=zhangsan, gender=1, birthday=1999-09-27, createTime=2020-01-17 17:46:20, config=[UserVo.UserConfig(field1=Test Field1, field2=500)])</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Test</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testDTO2Domain</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    UserConfig userConfig = <span class="keyword">new</span> UserConfig();</span><br><span class="line">    userConfig.setField1(<span class="string">"Test Field1"</span>);</span><br><span class="line">    userConfig.setField2(<span class="number">500</span>);</span><br><span class="line"></span><br><span class="line">    UserVo userVo = <span class="keyword">new</span> UserVo()</span><br><span class="line">      .setId(<span class="number">1L</span>)</span><br><span class="line">      .setUsername(<span class="string">"zhangsan"</span>)</span><br><span class="line">      .setGender(<span class="number">2</span>)</span><br><span class="line">      .setCreateTime(<span class="string">"2020-01-18 15:32:54"</span>)</span><br><span class="line">      .setBirthday(LocalDate.of(<span class="number">1999</span>, <span class="number">9</span>, <span class="number">27</span>))</span><br><span class="line">      .setConfig(Collections.singletonList(userConfig));</span><br><span class="line">    User user = userMapping.targetToSource(userVo);</span><br><span class="line">    log.info(<span class="string">"UserVo: &#123;&#125;"</span>, userVo);</span><br><span class="line">    <span class="comment">//        UserVo: UserVo(id=1, username=zhangsan, gender=2, birthday=1999-09-27, createTime=2020-01-18 15:32:54, config=[UserVo.UserConfig(field1=Test Field1, field2=500)])</span></span><br><span class="line">    log.info(<span class="string">"User: &#123;&#125;"</span>, user);</span><br><span class="line">    <span class="comment">//        User: User(id=1, username=zhangsan, password=null, sex=2, birthday=1999-09-27, createTime=2020-01-18T15:32:54, config=[&#123;"field1":"Test Field1","field2":500&#125;])</span></span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><ol><li>当两个对象属性不一致时，比如User对象中某个字段不存在与UserVo当中时，在编译时会有警告提示，可以在@Mapping中配置 ignore = true，当字段较多时，可以直接在@Mapper中设置unmappedTargetPolicy属性或者unmappedSourcePolicy属性为 ReportingPolicy.IGNORE即可。</li><li>如果项目中也同时使用到了 Lombok，一定要注意 Lombok的版本要等于或者高于<strong>1.18.10</strong>，否则会有编译不通过的情况发生，笔者掉进这个坑很久才爬了出来，希望各位不要重复踩坑。</li></ol><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><p>本文涉及代码已上传到 Github，以供参考。</p><ul><li><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-mapstruct">mapstruct最佳实践示例代码</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://mapstruct.org/documentation/stable/reference/html/">官方文档：https://mapstruct.org/documentation/stable/reference/html/</a></li><li><a href="https://mapstruct.org/faq/">官方FAQ：https://mapstruct.org/faq/</a></li><li><a href="https://github.com/mapstruct/mapstruct-examples">官方Example：https://github.com/mapstruct/mapstruct-examples</a></li><li><a href="http://www.kailing.pub/MapStruct1.3/index.html">机翻中文版文档：http://www.kailing.pub/MapStruct1.3/index.html</a></li><li><a href="https://www.cnblogs.com/javaguide/p/11861749.html">5种常见Bean映射工具的性能比对：https://www.cnblogs.com/javaguide/p/11861749.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;按照日常开发习惯，对于不同领域层使用不同JavaBean对象传输数据，避免相互影响，因此基于数据库实体对象User衍生出比如UserDto、UserVo等对象，于是在不同层之间进行数据传输时，不可避免地需要将这些对象进行互相转换操作。&lt;/p&gt;
&lt;p&gt;常见的转换方式有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调用getter/setter方法进行属性赋值&lt;/li&gt;
&lt;li&gt;调用BeanUtil.copyPropertie进行反射属性赋值&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;第一种方式不必说，属性多了就需要写一大坨getter/setter代码。第二种方式比第一种方式要简便很多，但是坑巨多，比如sources与target写反，难以定位某个字段在哪里进行的赋值，同时因为用到反射，导致性能也不佳。&lt;/p&gt;
&lt;p&gt;鉴于此，今天写一写第三种对象转换方式，本文使用的是 MapStruct 工具进行转换，MapStruct 原理也很简单，就是在代码编译阶段生成对应的赋值代码，底层原理还是调用getter/setter方法，但是这是由工具替我们完成，MapStruct在不影响性能的情况下，解决了前面两种方式弊端，很赞~&lt;/p&gt;
    
    </summary>
    
      <category term="框架" scheme="http://nullpointer.pw/categories/%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="mapstruct自定义类型转换" scheme="http://nullpointer.pw/tags/mapstruct%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    
  </entry>
  
  <entry>
    <title>数据库与应用服务器时间不同步踩坑记</title>
    <link href="http://nullpointer.pw/%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E8%B8%A9%E5%9D%91%E8%AE%B0.html"/>
    <id>http://nullpointer.pw/数据库与应用服务器时间不同步踩坑记.html</id>
    <published>2020-01-12T06:53:47.000Z</published>
    <updated>2020-01-22T14:34:11.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="业务说明"><a href="#业务说明" class="headerlink" title="业务说明"></a>业务说明</h2><p>这样一个业务场景，有一个抽奖活动，抽奖活动中如果完成一次分享的任务，就会增加一次抽奖机会。<br>前端判断用户分享成功后，会调用一次保存分享记录的接口，将分享记录入库。<br>完成后，前端会调用获取调用查询【活动任务可完成次数】接口，如果任务可完成次数为0，则置灰分享按钮。</p><a id="more"></a><p><a href="http://nullpointer.pw/数据库与应用服务器时间不同步踩坑记.html">本文原文链接地址: http://nullpointer.pw/数据库与应用服务器时间不同步踩坑记.html</a></p><p>如图所示：<br><img src="http://img12345.5-project.com/blog/20200108202842.png" alt=""></p><h2 id="定位问题"><a href="#定位问题" class="headerlink" title="定位问题"></a>定位问题</h2><p>测试给我提了一个 BUG，在<strong>测试环境</strong>，完成分享任务后，重新调用【活动任务可完成次数】后，发现接口返回可完成次数仍然是 1，<br>但是过了好几分钟后，重新进入活动页，接口返回了可完成次数为 0，分享按钮也已经置灰不可点击。</p><p>这就很奇怪了，一开始怀疑是缓存的问题，结果并不是，在测试环境远程 Debug 后发现，每次分享成功后，查询数据库分享任务的完成次数竟然没有查询到数据，<br>而数据中确实存在了分享的记录，将查询 SQL 和查询参数取出来放到 Navicat 中一查，结果是因为时间区间筛选掉了分享的那条记录。<br>SQL 如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> t_share_record <span class="keyword">where</span> uid = <span class="string">"1234567"</span> <span class="keyword">and</span> activity_id = <span class="number">38867247</span></span><br><span class="line"> <span class="keyword">and</span> create_time <span class="keyword">between</span> <span class="string">'2020-01-08 00:00:00'</span> <span class="keyword">and</span> <span class="string">'2020-01-08 19:18:29'</span></span><br></pre></td></tr></table></figure><p>而数据库中的那条分享记录的create_time 是  <strong>2020-01-08 19:19:21</strong>， 这条记录不在筛选的时间区间内，因而被过滤掉了。</p><h2 id="问题原因"><a href="#问题原因" class="headerlink" title="问题原因"></a>问题原因</h2><p>时序图如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200112145944.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>可以看到，分享保存记录为第 8 步，但是重新查询任务可完成接口是第 10 步，但目前的情况则是，第10步中查询时的时间竟然要早于第 8 步数据入库的时间。难道插入数据竟然要这么久？也不至于耗费近一分钟吧！</p><p>于是怀疑是数据库时间问题，在MySQL执行查询命令</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="keyword">now</span>();</span><br></pre></td></tr></table></figure><p>然后，在部署应用的服务器上执行命令</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><p>查看结果，果然二者时间相差了近一分钟。最终的原因就是：因为数据库和应用服务器不在同一台服务器上，而其他测试人员修改了应用服务器的时间，导致两个服务器时间不一致从而出现这个问题。想到这里，马上向运维确认线上服务器时间与数据库时间是否同步，还好，回答我的是同步的，心里的石头算放下了。</p><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>查看插入分享记录的 Mybatis 中XML如下</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> t_share_record(uid, activity_id, create_time) <span class="keyword">values</span>(#&#123;uid&#125;, #&#123;activityId&#125;, <span class="keyword">now</span>())</span><br></pre></td></tr></table></figure><p>这样写是没问题的，但是根据时间段筛选数据时，时间区间却又是从应用服务器生成传递参数传入SQL的，Mybatis 中XML如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> t_share_record <span class="keyword">where</span> uid = #&#123;uid&#125; <span class="keyword">and</span> activity_id = #&#123;activityId&#125;</span><br><span class="line"> <span class="keyword">and</span> create_time <span class="keyword">between</span> #&#123;beginTime&#125; <span class="keyword">and</span> #&#123;endTime&#125;</span><br></pre></td></tr></table></figure><p>为了避免以上这种因为应用服务器与数据库时间不一致导致的问题，这里的SQL筛选时间的结束时间也通过数据库服务器获取。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> * <span class="keyword">from</span> t_share_record <span class="keyword">where</span> uid = #&#123;uid&#125; <span class="keyword">and</span> activity_id = #&#123;activityId&#125;</span><br><span class="line"> <span class="keyword">and</span> create_time <span class="keyword">between</span> #&#123;beginTime&#125; <span class="keyword">and</span> <span class="keyword">now</span>()</span><br></pre></td></tr></table></figure><p>当然，为了防止出现更多类似的问题，应用服务器与数据库服务器的时间一定要通过时间同步设置保持完全一致才是最合理的。</p><p>希望对你有所帮助！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;业务说明&quot;&gt;&lt;a href=&quot;#业务说明&quot; class=&quot;headerlink&quot; title=&quot;业务说明&quot;&gt;&lt;/a&gt;业务说明&lt;/h2&gt;&lt;p&gt;这样一个业务场景，有一个抽奖活动，抽奖活动中如果完成一次分享的任务，就会增加一次抽奖机会。&lt;br&gt;前端判断用户分享成功后，会调用一次保存分享记录的接口，将分享记录入库。&lt;br&gt;完成后，前端会调用获取调用查询【活动任务可完成次数】接口，如果任务可完成次数为0，则置灰分享按钮。&lt;/p&gt;
    
    </summary>
    
      <category term="Bug" scheme="http://nullpointer.pw/categories/Bug/"/>
    
    
      <category term="解决数据库与应用服务器时间不同步导致的问题" scheme="http://nullpointer.pw/tags/%E8%A7%A3%E5%86%B3%E6%95%B0%E6%8D%AE%E5%BA%93%E4%B8%8E%E5%BA%94%E7%94%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%B6%E9%97%B4%E4%B8%8D%E5%90%8C%E6%AD%A5%E5%AF%BC%E8%87%B4%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>2019年终总结</title>
    <link href="http://nullpointer.pw/2019%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html"/>
    <id>http://nullpointer.pw/2019年终总结.html</id>
    <published>2020-01-04T01:39:31.000Z</published>
    <updated>2020-02-01T01:35:45.054Z</updated>
    
    <content type="html"><![CDATA[<p>来杭州不足一年，我就拥有了 M 型发型，不知道该喜还是忧，今天为这苦逼的一年画上句号，希望 2020 年能不如此苦逼吧！本来计划着 2019 年 12 月 29 日写完的年终总结，自己拖拖拉拉搞到今天才算写完。</p><a id="more"></a><p>三月份从北京离开，本意是跳出自己的舒适区，杭州今年却还没有下过雪，倒是最近总是淅淅沥沥地下小雨，给人湿冷湿冷的感觉，来到杭州发现这边的环境果然让我很不舒适。  </p><p>不仅仅是气候环境。。。  </p><p>不过，来了杭州确实让自己身上的缺点暴露出来，在新的公司工作时，也发现了自己某些能力的欠缺，果然最让自己害怕的就是自己最薄弱的地方，找到自己的不足并去努力提升改进，或许是我来做出来杭州这个选择，唯一值得欢喜之处吧！</p><h2 id="技术"><a href="#技术" class="headerlink" title="技术"></a>技术</h2><p>就我个人本身而言，学习新的东西能学下去的基本上是我不得不学的，还有就是我真的特别感兴趣的。这看着好像问题不大？不得不学的大部分都是工作中需要用到的，还有需要教导别人的，学了就能派上用场，效果最好。但是事实是，能马上学会并且能应用的技术，太过于浮于表面，而这些技术更深层面的东西才是精髓所在，而自己却往往总是忽略了这一点，</p><p>在某些时刻，虚弱的内功让我不堪一击。</p><p>来年需沉下心来，学习更深层次，<strong>相信刻意练习，没有什么是学不会的。</strong></p><h2 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h2><p>从今年 9 月份开始，形成了每日总结的习惯，从一开始的流水账到逐渐添加自己的思考，目前也连续了一百多天。在做总结的过程中发现自己在很多时候，无法想起今天究竟做了哪些工作、今天发生了哪些有趣的事情，今天学到了哪些知识，只能为自己又一天的碌碌无为地荒废而自责</p><p>无时无刻，丰富的互联网总是在消费着注意力，一不小心半个小时，一个小时就过去了，而手头很急的事情却丝毫没有进展，这也是造成自己每日荒废的罪魁祸首。</p><p>于是，自己便开始尝试上班或者学习开启番茄闹钟，被动打断总是不可避免，但确实有效地控制了自己的注意力，能让自己专注做事；</p><p>以前上班自己总是戴着耳机听随机算法推荐的歌曲，尝试番茄闹钟之后，发现歌曲也会让自己的注意力漂移，于是便不再听歌曲，而是改听大自然白噪声，加上女朋友送的 SONY 降噪耳机主动降噪效果，对外界抗干扰能力也变强很多。</p><p>通过番茄闹钟，找到了自己最高效的时间段，也是意外的收获。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191229203900.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>注意力得到了一定的控制，但是还是不够，因为还是会有大把的空闲时间被白白浪费掉。没有产出，是一件让我感觉很痛苦的事情，特别是每周写周报的时候，痛感尤甚。</p><p>于是，我踏上了学习 GTD 的道路，安排好下一日的任务，尽量利用好每一块时间，不过还没实践太久，现在便不多言。</p><h2 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h2><p>坚持两年多写博客的习惯，可能因为从北京离开，习惯也被遗落在了北京吧！今年只更新了 6 篇博客，还水了几篇非技术类文章，和去年 20 几篇真的差远了。其实自己博客选题的 list 已经被拉得很长了，自己却总是找接口没时间懒癌发作拖延症发作不去写，来年 GTD 要实践起来，好习惯应该一直保持下去。</p><h2 id="收获"><a href="#收获" class="headerlink" title="收获"></a>收获</h2><p>来杭州不满一年，发际线后移了一公分，真的好悲伤，甚至有点不太敢照镜子！求推荐护发养发洗发露~</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>抢票真的挺难的，我现在才感觉到。离家太远机票又贵，害怕最后一天不能赶回来上班，提前抢票也是秒没，这是在在北京从未有过的烦恼。</p><h2 id="立-Flag"><a href="#立-Flag" class="headerlink" title="立 Flag"></a>立 Flag</h2><p>Flag 还是一定要立的，万一都实现了呢！😎ི</p><ol><li>恢复每月写 2 篇博客的习惯</li><li>早睡早起 240 天，番茄数量 25 个/周</li><li>读完《重构》《Java8 实战》《Spring 实战》《Spring 源码深度解析》《领域驱动设计》</li><li>读完《搞定》《思考，快与慢》《稀缺》《万历十五年》《原则》</li><li>每月在博客单独页面同步 <a href="http://nullpointer.pw/flags">flag 进度</a></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200103214813.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;来杭州不足一年，我就拥有了 M 型发型，不知道该喜还是忧，今天为这苦逼的一年画上句号，希望 2020 年能不如此苦逼吧！本来计划着 2019 年 12 月 29 日写完的年终总结，自己拖拖拉拉搞到今天才算写完。&lt;/p&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://nullpointer.pw/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>easypoi导入Excel最佳实践</title>
    <link href="http://nullpointer.pw/easypoi%E5%AF%BC%E5%85%A5Excel%E6%9C%80%E4%BD%B3%E5%AE%9E%E8%B7%B5.html"/>
    <id>http://nullpointer.pw/easypoi导入Excel最佳实践.html</id>
    <published>2019-12-28T07:50:55.000Z</published>
    <updated>2020-01-22T14:36:59.833Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一直以来，使用EasyPOI做了不少导入导出的需求，但是每次做完都是临时去看官方文档现学现用，正巧最近朋友遇到这么个需求，用到了EasyPOI来完成导入，我也正好整理整理EasyPOI的导入用法。</p><a id="more"></a><p>需求是这样的：现在要在后台导入用户的简历，简历的格式是这样子的：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191223194318.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>一个人有多个属性，某些属性如申请职位、薪资是单一属性，即只会有一个值；某些属性如工作经历、教育经历、获奖情况是一组属性，可能会有多组值。现在要将这批简历数据导入到库中。</p><h2 id="零、文件准备："><a href="#零、文件准备：" class="headerlink" title="零、文件准备："></a>零、文件准备：</h2><ul><li><p><a href="https://github.com/Mosiki/learning-modules/tree/master/learning-easypoi/src/main/resources/excel">示例Excel以及示例Excel2</a></p></li><li><p>加入 EasyPOI 的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.afterturn<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>easypoi-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="一、定义EasyPOI导入实体类"><a href="#一、定义EasyPOI导入实体类" class="headerlink" title="一、定义EasyPOI导入实体类"></a>一、定义EasyPOI导入实体类</h2><p>首先定义一个 EasyPOI 实体类，单个属性使用 <code>@Excel</code>注解声明，name 属性需要与Excel中的表头保持一致，比如 <code>姓名*</code>中的 * 号就不能省略掉。一对多关系使用 <code>@Collection</code> 注解声明，name 是最上方的表头，对应的集合元素类型需要另外定义一个对象，这里因为篇幅问题，只展示一个工作经历以及教育经历对应的集合对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalentUserInputEntity</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"姓名*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"性别*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer gender;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"手机号*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始工作时间*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date workTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"民族*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String national;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"语言水平*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String languageProficiency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"出生日期*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date birth;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jobsName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位类型*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"薪资*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer salary;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工作地点*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String workArea;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"工作经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;ExperienceInputEntity&gt; experienceList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"教育经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;EducationInputEntity&gt; educationList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"获奖情况"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardsInputEntity&gt; awardList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"技能证书"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;PunishmentInputEntity&gt; punishmentList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"特长"</span>)</span><br><span class="line">    <span class="keyword">private</span> String specialty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作经历对象</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExperienceInputEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"公司名称*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"所在行业*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String industry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始时间*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date beginTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"结束时间*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date finishTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位名称*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jobTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"所属部门*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工作内容*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 教育经历对象</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EducationInputEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"学校*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String schoolName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"学历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Integer record;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始年份*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date beginTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"毕业年份*"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date finishTime;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"专业*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String profession;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 省略其他</span></span><br></pre></td></tr></table></figure><h2 id="二、EasyPOI基础导入"><a href="#二、EasyPOI基础导入" class="headerlink" title="二、EasyPOI基础导入"></a>二、EasyPOI基础导入</h2><p>这里为方便演示，直接将导入结果转成JSON打印输出。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">  params.setHeadRows(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// params.setTitleRows(0);</span></span><br><span class="line">  List&lt;TalentUserInputEntity&gt; result = ExcelImportUtil.importExcel(multipartFile.getInputStream(),</span><br><span class="line">                                                                   TalentUserInputEntity.class, params);</span><br><span class="line">  System.out.println(JSONUtil.toJsonStr(result));</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>这里需要注意表头的行数设置一定要正确！否则集合数据将无法读取，可以通过WPS或者office查看实际表头所占用的行数，一定要区分表头与标题的区别，表头是列名称，标题是表头上面的文字，本文示例文件中没有标题，所以setTitleRows为0</strong>  </p><p><img src="http://img12345.5-project.com/blog/20191224062255.png" alt=""></p><h2 id="三、值替换"><a href="#三、值替换" class="headerlink" title="三、值替换"></a>三、值替换</h2><p>使用 postman 或者 Talend API Tester 等工具进行上传 <code>示例文件.xlsx</code>，结果控制台输出了异常，异常如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java.lang.NumberFormatException: For input string: &quot;男&quot;</span><br><span class="line">...</span><br><span class="line">cn.afterturn.easypoi.exception.excel.ExcelImportException: Excel 值获取失败</span><br></pre></td></tr></table></figure><p>原因是因为数据库中性别字段类型为 Integer 类型的，所以导入对象也设置成了 Integer，而 Excel 中填写的是男/女汉字，自然就出错了，这里就需要使用 easypoi 的 replace 方式来替换最终值，修改 <code>gender</code> 字段上的注解为：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// replace格式为 "替换前的值_替换后的值"</span></span><br><span class="line"><span class="meta">@Excel</span>(name = <span class="string">"性别*"</span>, replace = &#123;<span class="string">"男_0"</span>, <span class="string">"女_1"</span>&#125;)</span><br><span class="line"><span class="keyword">private</span> Integer gender;</span><br></pre></td></tr></table></figure><p>同理，薪资类型和教育经历中的学历需要替换需要的值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Excel</span>(name = <span class="string">"薪资*"</span>, replace = &#123;<span class="string">"3K以下_1"</span>, <span class="string">"3K-5K_2"</span>, <span class="string">"5K-10K_3"</span>, <span class="string">"10K-20K_4"</span>, <span class="string">"20K-50K_5"</span>, <span class="string">"50K以上_6"</span>&#125;)</span><br><span class="line"><span class="keyword">private</span> Integer salary;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Excel</span>(name = <span class="string">"学历*"</span>, replace =&#123;<span class="string">"初中及以下_1"</span>,<span class="string">"中专_2"</span>,<span class="string">"高中_3"</span>,<span class="string">"大专_4"</span>,<span class="string">"本科_5"</span>,<span class="string">"硕士_6"</span>,<span class="string">"博士_7"</span>&#125;)</span><br><span class="line"><span class="keyword">private</span> Integer record;</span><br></pre></td></tr></table></figure><p>再重新尝试导入，控制台输出了导入的JSON内容</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"experienceList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1571673600000</span>,</span><br><span class="line">                <span class="attr">"companyName"</span>: <span class="string">"科技公司1"</span>,</span><br><span class="line">                <span class="attr">"jobTitle"</span>: <span class="string">"运营"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"运营方案处理"</span>,</span><br><span class="line">                <span class="attr">"industry"</span>: <span class="string">"互联网"</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1546358400000</span>,</span><br><span class="line">                <span class="attr">"department"</span>: <span class="string">"运营部"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1571673600000</span>,</span><br><span class="line">                <span class="attr">"companyName"</span>: <span class="string">"财务公司"</span>,</span><br><span class="line">                <span class="attr">"jobTitle"</span>: <span class="string">"会计"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"审计"</span>,</span><br><span class="line">                <span class="attr">"industry"</span>: <span class="string">"财务"</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1574179200000</span>,</span><br><span class="line">                <span class="attr">"department"</span>: <span class="string">"会计部"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"languageProficiency"</span>: <span class="string">"英语四级"</span>,</span><br><span class="line">        <span class="attr">"jobsName"</span>: <span class="string">"销售"</span>,</span><br><span class="line">        <span class="attr">"educationList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"profession"</span>: <span class="string">"计算机"</span>,</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1530374400000</span>,</span><br><span class="line">                <span class="attr">"record"</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1409500800000</span>,</span><br><span class="line">                <span class="attr">"schoolName"</span>: <span class="string">"山东大学"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"profession"</span>: <span class="string">"计算机"</span>,</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1593532800000</span>,</span><br><span class="line">                <span class="attr">"record"</span>: <span class="number">6</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1409500800000</span>,</span><br><span class="line">                <span class="attr">"schoolName"</span>: <span class="string">"山东大学"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"birth"</span>: <span class="number">851097600000</span>,</span><br><span class="line">        <span class="attr">"salary"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"workTime"</span>: <span class="number">1549900800000</span>,</span><br><span class="line">        <span class="attr">"categoryName"</span>: <span class="string">"销售"</span>,</span><br><span class="line">        <span class="attr">"phone"</span>: <span class="string">"13122223333"</span>,</span><br><span class="line">        <span class="attr">"workArea"</span>: <span class="string">"浙江省金华市义乌市"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"张无忌"</span>,</span><br><span class="line">        <span class="attr">"national"</span>: <span class="string">"汉族"</span>,</span><br><span class="line">        <span class="attr">"punishmentList"</span>: [</span><br><span class="line">            &#123;&#125;,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"awardList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"date"</span>: <span class="number">1530374400000</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"国家奖学金"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"国家一级奖学金"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;&#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"specialty"</span>: <span class="string">"特长就是太多特长"</span>,</span><br><span class="line">        <span class="attr">"experienceList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1571673600000</span>,</span><br><span class="line">                <span class="attr">"companyName"</span>: <span class="string">"科技公司1"</span>,</span><br><span class="line">                <span class="attr">"jobTitle"</span>: <span class="string">"java开发"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"code"</span>,</span><br><span class="line">                <span class="attr">"industry"</span>: <span class="string">"互联网"</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1546358400000</span>,</span><br><span class="line">                <span class="attr">"department"</span>: <span class="string">"开发部门"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"gender"</span>: <span class="number">0</span>,</span><br><span class="line">        <span class="attr">"languageProficiency"</span>: <span class="string">"英语八级"</span>,</span><br><span class="line">        <span class="attr">"jobsName"</span>: <span class="string">"java"</span>,</span><br><span class="line">        <span class="attr">"educationList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"profession"</span>: <span class="string">"计算机"</span>,</span><br><span class="line">                <span class="attr">"finishTime"</span>: <span class="number">1530374400000</span>,</span><br><span class="line">                <span class="attr">"record"</span>: <span class="number">5</span>,</span><br><span class="line">                <span class="attr">"beginTime"</span>: <span class="number">1409500800000</span>,</span><br><span class="line">                <span class="attr">"schoolName"</span>: <span class="string">"安徽大学"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"birth"</span>: <span class="number">851097600000</span>,</span><br><span class="line">        <span class="attr">"salary"</span>: <span class="number">4</span>,</span><br><span class="line">        <span class="attr">"workTime"</span>: <span class="number">1549900800000</span>,</span><br><span class="line">        <span class="attr">"categoryName"</span>: <span class="string">"开发"</span>,</span><br><span class="line">        <span class="attr">"phone"</span>: <span class="string">"18311111111"</span>,</span><br><span class="line">        <span class="attr">"workArea"</span>: <span class="string">"浙江省金华市义乌市"</span>,</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"张小凡"</span>,</span><br><span class="line">        <span class="attr">"national"</span>: <span class="string">"汉族"</span>,</span><br><span class="line">        <span class="attr">"punishmentList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"date"</span>: <span class="number">1530374400000</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"技能没有"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"awardList"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"date"</span>: <span class="number">1530374400000</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"国家奖学金"</span>,</span><br><span class="line">                <span class="attr">"description"</span>: <span class="string">"国家一级奖学金"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    // 省略其他...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h2 id="四、导入之基础校验"><a href="#四、导入之基础校验" class="headerlink" title="四、导入之基础校验"></a>四、导入之基础校验</h2><p>现在产品需要对导入的Excel进行校验，不合法的Excel不允许入库，需要返回具体的错误信息给前端，提示给用户，错误信息中需要包含行号以及对应的错误。</p><p>因为 EasyPOI 支持 Hibernate Validator ，所以直接使用就可以了，因为要将错误信息以及错误行号返回，所以需要用到 EasyPOI 的高级用法，实现 <code>IExcelDataModel</code>与 <code>IExcelModel</code>接口，<code>IExcelDataModel</code>负责设置行号，<code>IExcelModel</code> 负责设置错误信息。</p><p>修改导入实体类，增加字段 <code>rowNum</code> 与 <code>errorMsg</code>以及增加校验注解。</p><p>如果使用到了 @Pattern 注解，则字段类型必须是 <strong>String</strong> 类型，否则会抛出异常，本文中的原 <code>Integer</code> 类型的 <code>gender</code> 修改成为 <code>String</code> 类型的 <code>genderStr</code>，<code>record</code> 字段也修改为了 String 类型的 <code>recordStr</code>等等。同理如果校验 Date 类型字段，先将类型改成String，正则表达式参考下文写法。</p><p><strong>这里需要注意，如果@Excel注解中设置了 <code>replace</code> 属性，则Hibernate Validator 校验的是替换后的值</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalentUserInputEntity</span> <span class="keyword">implements</span> <span class="title">IExcelDataModel</span>, <span class="title">IExcelModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间格式校验正则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE_REGEXP = <span class="string">"(Mon|Tue|Wed|Thu|Fri|Sat|Sun)( )(Dec|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov)( )\\d&#123;2&#125;( )(00:00:00)( )(CST)( )\\d&#123;4&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"姓名*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[姓名]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"性别*"</span>, replace = &#123;<span class="string">"男_0"</span>, <span class="string">"女_1"</span>&#125;)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[01]"</span>, message = <span class="string">"性别错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String genderStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"手机号*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始工作时间*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[开始工作时间]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String workTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"民族*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[民族]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String national;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"语言水平*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[语言水平]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String languageProficiency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"出生日期*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[出生日期]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String birthStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[职位]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jobsName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位类型*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[职位类型]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"薪资*"</span>, replace = &#123;<span class="string">"3K以下_1"</span>, <span class="string">"3K-5K_2"</span>, <span class="string">"5K-10K_3"</span>, <span class="string">"10K-20K_4"</span>, <span class="string">"20K-50K_5"</span>, <span class="string">"50K以上_6"</span>&#125;)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[123456]"</span>, message = <span class="string">"薪资信息错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String salaryStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工作地点*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[工作地点]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String workArea;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"工作经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;ExperienceInputEntity&gt; experienceList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"教育经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;EducationInputEntity&gt; educationList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"获奖情况"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardsInputEntity&gt; awardList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"技能证书"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;PunishmentInputEntity&gt; punishmentList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"特长"</span>)</span><br><span class="line">    <span class="keyword">private</span> String specialty;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 工作经历</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExperienceInputEntity</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"公司名称*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String companyName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"所在行业*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String industry;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始时间*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[工作经历][开始时间]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String beginTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"结束时间*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[工作经历][结束时间]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String finishTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位名称*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jobTitle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"所属部门*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String department;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工作内容*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String description;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 教育经历</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EducationInputEntity</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"学校*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String schoolName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"学历*"</span>, replace = &#123;<span class="string">"初中及以下_1"</span>, <span class="string">"中专_2"</span>, <span class="string">"高中_3"</span>, <span class="string">"大专_4"</span>, <span class="string">"本科_5"</span>, <span class="string">"硕士_6"</span>, <span class="string">"博士_7"</span>&#125;)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[1234567]"</span>, message = <span class="string">"学历信息错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String recordStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始年份*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[教育经历][开始年份]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String beginTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"毕业年份*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[教育经历][毕业年份]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String finishTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"专业*"</span>)</span><br><span class="line">    <span class="keyword">private</span> String profession;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 其他省略...</span></span><br></pre></td></tr></table></figure><p>修改完实体类后，修改导入处的代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">  <span class="comment">// 表头设置为2行</span></span><br><span class="line">  params.setHeadRows(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 标题行设置为0行，默认是0，可以不设置</span></span><br><span class="line">  params.setTitleRows(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 开启Excel校验</span></span><br><span class="line">  params.setNeedVerfiy(<span class="keyword">true</span>);</span><br><span class="line">  ExcelImportResult&lt;TalentUserInputEntity&gt; result = ExcelImportUtil.importExcelMore(multipartFile.getInputStream(),</span><br><span class="line">                                                                                    TalentUserInputEntity.class, params);</span><br><span class="line">  System.out.println(<span class="string">"是否校验失败: "</span> + result.isVerfiyFail());</span><br><span class="line">  System.out.println(<span class="string">"校验失败的集合:"</span> + JSONObject.toJSONString(result.getFailList()));</span><br><span class="line">  System.out.println(<span class="string">"校验通过的集合:"</span> + JSONObject.toJSONString(result.getList()));</span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity entity : result.getFailList()) &#123;</span><br><span class="line">    String msg = <span class="string">"第"</span> + entity.getRowNum() + <span class="string">"行的错误是："</span> + entity.getErrorMsg();</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>为了方便测试，我基于正确的Excel另存一份个别字段有误的 示例Excel2 并上传，解析结果为：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191224221916.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里贴出部分校验失败集合数据，可以看到第50行和61行是原Excel中错误的数据，也已经打印了出来，但是教育经历中的教育水平也是错误的，却没被打印出来，查看源码发现，EasyPOI 对 Collection 中的对象并没有进行校验，我们在下文中解决。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191224221513.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="五、导入值自定义校验之重复值校验"><a href="#五、导入值自定义校验之重复值校验" class="headerlink" title="五、导入值自定义校验之重复值校验"></a>五、导入值自定义校验之重复值校验</h2><p>上文所作的校验只是一些基本的校验，可能会有诸如Excel中重复行校验，Excel中数据与数据库重复校验等等。这种校验就无法通过 Hibernate Validator 来完成，只能写代码来实现校验逻辑了。</p><p>首先从简单的Excel数据与数据库值重复校验开始。为了便于演示，就不引入数据库了，直接Mock一些数据用来判断是否重复。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MockTalentDataService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> List&lt;TalentUser&gt; talentUsers = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        TalentUser u1 = <span class="keyword">new</span> TalentUser(<span class="number">1L</span>, <span class="string">"凌风"</span>, <span class="string">"18311342567"</span>);</span><br><span class="line">        TalentUser u2 = <span class="keyword">new</span> TalentUser(<span class="number">2L</span>, <span class="string">"张三"</span>, <span class="string">"18512343567"</span>);</span><br><span class="line">        TalentUser u3 = <span class="keyword">new</span> TalentUser(<span class="number">3L</span>, <span class="string">"李四"</span>, <span class="string">"18902343267"</span>);</span><br><span class="line">        talentUsers.add(u1);</span><br><span class="line">        talentUsers.add(u2);</span><br><span class="line">        talentUsers.add(u3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 校验是否重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkForDuplicates</span><span class="params">(String name, String phone)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 姓名与手机号相等个数不等于0则为重复</span></span><br><span class="line">        <span class="keyword">return</span> talentUsers.stream().anyMatch(e -&gt; e.getName().equals(name) &amp;&amp; e.getPhone().equals(phone));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中Mock数据中 ID 为 1 的数据与示例Excel2 中的数据是重复的。<br>EasyPOI 提供了校验的接口，这需要我们自己写一个用于校验的类。在这个类中，可以对导入时的每一行数据进行校验，框架通过 ExcelVerifyHandlerResult 对象来判断是否校验通过，校验不通过需要传递 ErrorMsg。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalentImportVerifyHandler</span> <span class="keyword">implements</span> <span class="title">IExcelVerifyHandler</span>&lt;<span class="title">TalentUserInputEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockTalentDataService mockTalentDataService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExcelVerifyHandlerResult <span class="title">verifyHandler</span><span class="params">(TalentUserInputEntity inputEntity)</span> </span>&#123;</span><br><span class="line">        StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 根据姓名与手机号判断数据是否重复</span></span><br><span class="line">        String name = inputEntity.getName();</span><br><span class="line">        String phone = inputEntity.getPhone();</span><br><span class="line">        <span class="comment">// mock 数据库</span></span><br><span class="line">        <span class="keyword">boolean</span> duplicates = mockTalentDataService.checkForDuplicates(name, phone);</span><br><span class="line">        <span class="keyword">if</span> (duplicates) &#123;</span><br><span class="line">            joiner.add(<span class="string">"数据与数据库数据重复"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (joiner.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExcelVerifyHandlerResult(<span class="keyword">false</span>, joiner.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExcelVerifyHandlerResult(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改校验处代码，设置校验类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> TalentImportVerifyHandler talentImportVerifyHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">  <span class="comment">// 表头设置为2行</span></span><br><span class="line">  params.setHeadRows(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 标题行设置为0行，默认是0，可以不设置</span></span><br><span class="line">  params.setTitleRows(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 开启Excel校验</span></span><br><span class="line">  params.setNeedVerfiy(<span class="keyword">true</span>);</span><br><span class="line">  params.setVerifyHandler(talentImportVerifyHandler);</span><br><span class="line">  ExcelImportResult&lt;TalentUserInputEntity&gt; result = ExcelImportUtil.importExcelMore(multipartFile.getInputStream(),</span><br><span class="line">                                                                                    TalentUserInputEntity.class, params);</span><br><span class="line">  System.out.println(<span class="string">"是否校验失败: "</span> + result.isVerfiyFail());</span><br><span class="line">  System.out.println(<span class="string">"校验失败的集合:"</span> + JSONObject.toJSONString(result.getFailList()));</span><br><span class="line">  System.out.println(<span class="string">"校验通过的集合:"</span> + JSONObject.toJSONString(result.getList()));</span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity entity : result.getFailList()) &#123;</span><br><span class="line">    <span class="keyword">int</span> line = entity.getRowNum() + <span class="number">1</span>;</span><br><span class="line">    String msg = <span class="string">"第"</span> + line + <span class="string">"行的错误是："</span> + entity.getErrorMsg();</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传 示例Excel2 文件测试，结果输出：  </p><p><img src="http://img12345.5-project.com/blog/20191228134843.png" alt=""></p><p>而第七行的数据正是与Mock中的数据相重复的。<br><img src="http://img12345.5-project.com/blog/20191228134936.png" alt=""></p><h2 id="六、导入值自定义校验之Collection对象校验"><a href="#六、导入值自定义校验之Collection对象校验" class="headerlink" title="六、导入值自定义校验之Collection对象校验"></a>六、导入值自定义校验之Collection对象校验</h2><p>上文中还有一个待解决的问题，就是Collection中的对象添加了Hibernate Validator 注解校验但是并未生效的问题，现在就来解决一下。上一步中实现了导入对象的校验类，校验类会校验Excel中的每一条数据， 那我是不是可以直接在校验类中校验Collection中对象了呢？实践证明行不通，因为这个校验类的verifyHandler方法只会被调用一次，所以Collection中只有一条记录。既然这里行不通的话，就只能对导入结果再进行校验了。</p><p>因为Collection中的数据EasyPOI校验不到，所以有问题的数据也可能会被框架放到result.getList()中而不是result.getFailList() 中，为了校验需要将两个集合合并为一个集合，使用 EasyPOI 自带的工具类 PoiValidationUtil 进行校验 Collection 中的对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> TalentImportVerifyHandler talentImportVerifyHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">  <span class="comment">// 表头设置为2行</span></span><br><span class="line">  params.setHeadRows(<span class="number">2</span>);</span><br><span class="line">  <span class="comment">// 标题行设置为0行，默认是0，可以不设置</span></span><br><span class="line">  params.setTitleRows(<span class="number">0</span>);</span><br><span class="line">  <span class="comment">// 开启Excel校验</span></span><br><span class="line">  params.setNeedVerfiy(<span class="keyword">true</span>);</span><br><span class="line">  params.setVerifyHandler(talentImportVerifyHandler);</span><br><span class="line">  ExcelImportResult&lt;TalentUserInputEntity&gt; result = ExcelImportUtil.importExcelMore(multipartFile.getInputStream(),</span><br><span class="line">                                                                                    TalentUserInputEntity.class, params);</span><br><span class="line">  System.out.println(<span class="string">"是否校验失败: "</span> + result.isVerfiyFail());</span><br><span class="line">  System.out.println(<span class="string">"校验失败的集合:"</span> + JSONObject.toJSONString(result.getFailList()));</span><br><span class="line">  System.out.println(<span class="string">"校验通过的集合:"</span> + JSONObject.toJSONString(result.getList()));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并结果集</span></span><br><span class="line">  List&lt;TalentUserInputEntity&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  resultList.addAll(result.getFailList());</span><br><span class="line">  resultList.addAll(result.getList());</span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity inputEntity : resultList) &#123;</span><br><span class="line">    StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>);</span><br><span class="line">    joiner.add(inputEntity.getErrorMsg());</span><br><span class="line">    <span class="comment">// 校验Collection的元素</span></span><br><span class="line">    inputEntity.getExperienceList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getEducationList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getAwardList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getPunishmentList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.setErrorMsg(joiner.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity entity : result.getFailList()) &#123;</span><br><span class="line">    <span class="keyword">int</span> line = entity.getRowNum() + <span class="number">1</span>;</span><br><span class="line">    String msg = <span class="string">"第"</span> + line + <span class="string">"行的错误是："</span> + entity.getErrorMsg();</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">(StringJoiner joiner, Object object)</span> </span>&#123;</span><br><span class="line">  String validationMsg = PoiValidationUtil.validation(object, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isNotEmpty(validationMsg)) &#123;</span><br><span class="line">    joiner.add(validationMsg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传 示例Excel2 ，结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191228145220.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="七、导入值自定义校验之Excel重复行校验"><a href="#七、导入值自定义校验之Excel重复行校验" class="headerlink" title="七、导入值自定义校验之Excel重复行校验"></a>七、导入值自定义校验之Excel重复行校验</h2><p>上文中对Excel中数据与数据库数据进行重复校验，可有些需求是要求数据库在入库前需要对Excel的的重复行进行校验。这需要在校验类中完成，但校验类中并没有全部行的数据，该如何实现呢？博主的做法是将导入的数据放到 ThreadLocal 中进行暂存，从而达到在校验类中校验Excel重复行的目的。<strong>ThreadLocal使用注意完之后一定要及时清理！</strong></p><p>首先定义什么叫重复行，完全相同的两行是重复行，本文中设定name 与 phone 相同的行为重复行，由于只需要比较这两个字段，所以我们需要重写导入对象的equals与hashCode方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalentUserInputEntity</span> <span class="keyword">implements</span> <span class="title">IExcelDataModel</span>, <span class="title">IExcelModel</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间格式校验正则</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String DATE_REGEXP = <span class="string">"(Mon|Tue|Wed|Thu|Fri|Sat|Sun)( )(Dec|Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov)( )\\d&#123;2&#125;( )(00:00:00)( )(CST)( )\\d&#123;4&#125;"</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 行号</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> rowNum;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 错误消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> String errorMsg;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"姓名*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[姓名]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"性别*"</span>, replace = &#123;<span class="string">"男_0"</span>, <span class="string">"女_1"</span>&#125;)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[01]"</span>, message = <span class="string">"性别错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String genderStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"手机号*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[0-9]&#123;11&#125;"</span>, message = <span class="string">"手机号不正确"</span>)</span><br><span class="line">    <span class="keyword">private</span> String phone;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"开始工作时间*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[开始工作时间]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String workTimeStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"民族*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[民族]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String national;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"语言水平*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[语言水平]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String languageProficiency;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"出生日期*"</span>)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = DATE_REGEXP, message = <span class="string">"[出生日期]时间格式错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String birthStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[职位]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String jobsName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"职位类型*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[职位类型]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String categoryName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"薪资*"</span>, replace = &#123;<span class="string">"3K以下_1"</span>, <span class="string">"3K-5K_2"</span>, <span class="string">"5K-10K_3"</span>, <span class="string">"10K-20K_4"</span>, <span class="string">"20K-50K_5"</span>, <span class="string">"50K以上_6"</span>&#125;)</span><br><span class="line">    <span class="meta">@Pattern</span>(regexp = <span class="string">"[123456]"</span>, message = <span class="string">"薪资信息错误"</span>)</span><br><span class="line">    <span class="keyword">private</span> String salaryStr;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"工作地点*"</span>)</span><br><span class="line">    <span class="meta">@NotBlank</span>(message = <span class="string">"[工作地点]不能为空"</span>)</span><br><span class="line">    <span class="keyword">private</span> String workArea;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"工作经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;ExperienceInputEntity&gt; experienceList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"教育经历*"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;EducationInputEntity&gt; educationList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"获奖情况"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;AwardsInputEntity&gt; awardList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExcelCollection</span>(name = <span class="string">"技能证书"</span>)</span><br><span class="line">    <span class="keyword">private</span> List&lt;PunishmentInputEntity&gt; punishmentList;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Excel</span>(name = <span class="string">"特长"</span>)</span><br><span class="line">    <span class="keyword">private</span> String specialty;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        TalentUserInputEntity that = (TalentUserInputEntity) o;</span><br><span class="line">        <span class="keyword">return</span> Objects.equals(name, that.name) &amp;&amp;</span><br><span class="line">                Objects.equals(phone, that.phone);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, phone);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改校验类代码，实现重复行的校验逻辑</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalentImportVerifyHandler</span> <span class="keyword">implements</span> <span class="title">IExcelVerifyHandler</span>&lt;<span class="title">TalentUserInputEntity</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ThreadLocal&lt;List&lt;TalentUserInputEntity&gt;&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> MockTalentDataService mockTalentDataService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ExcelVerifyHandlerResult <span class="title">verifyHandler</span><span class="params">(TalentUserInputEntity inputEntity)</span> </span>&#123;</span><br><span class="line">        StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>);</span><br><span class="line">        <span class="comment">// 根据姓名与手机号判断数据是否重复</span></span><br><span class="line">        String name = inputEntity.getName();</span><br><span class="line">        String phone = inputEntity.getPhone();</span><br><span class="line">        <span class="comment">// mock 数据库</span></span><br><span class="line">        <span class="keyword">boolean</span> duplicates = mockTalentDataService.checkForDuplicates(name, phone);</span><br><span class="line">        <span class="keyword">if</span> (duplicates) &#123;</span><br><span class="line">            joiner.add(<span class="string">"数据与数据库数据重复"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;TalentUserInputEntity&gt; threadLocalVal = threadLocal.get();</span><br><span class="line">        <span class="keyword">if</span> (threadLocalVal == <span class="keyword">null</span>) &#123;</span><br><span class="line">            threadLocalVal = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        threadLocalVal.forEach(e -&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (e.equals(inputEntity)) &#123;</span><br><span class="line">                <span class="keyword">int</span> lineNumber = e.getRowNum() + <span class="number">1</span>;</span><br><span class="line">                joiner.add(<span class="string">"数据与第"</span> + lineNumber + <span class="string">"行重复"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="comment">// 添加本行数据对象到ThreadLocal中</span></span><br><span class="line">        threadLocalVal.add(inputEntity);</span><br><span class="line">        threadLocal.set(threadLocalVal);</span><br><span class="line">        <span class="keyword">if</span> (joiner.length() != <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> ExcelVerifyHandlerResult(<span class="keyword">false</span>, joiner.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ExcelVerifyHandlerResult(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> ThreadLocal&lt;List&lt;TalentUserInputEntity&gt;&gt; getThreadLocal() &#123;</span><br><span class="line">        <span class="keyword">return</span> threadLocal;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于校验类中使用了ThreadLocal，因此需要及时释放，修改导入处的代码。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> TalentImportVerifyHandler talentImportVerifyHandler;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping</span>(<span class="string">"/upload"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Boolean <span class="title">upload</span><span class="params">(@RequestParam(<span class="string">"file"</span>)</span> MultipartFile multipartFile) <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">  ExcelImportResult&lt;TalentUserInputEntity&gt; result;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    ImportParams params = <span class="keyword">new</span> ImportParams();</span><br><span class="line">    <span class="comment">// 表头设置为2行</span></span><br><span class="line">    params.setHeadRows(<span class="number">2</span>);</span><br><span class="line">    <span class="comment">// 标题行设置为0行，默认是0，可以不设置</span></span><br><span class="line">    params.setTitleRows(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 开启Excel校验</span></span><br><span class="line">    params.setNeedVerfiy(<span class="keyword">true</span>);</span><br><span class="line">    params.setVerifyHandler(talentImportVerifyHandler);</span><br><span class="line">    result = ExcelImportUtil.importExcelMore(multipartFile.getInputStream(),</span><br><span class="line">                                             TalentUserInputEntity.class, params);</span><br><span class="line">  &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">// 清除threadLocal 防止内存泄漏</span></span><br><span class="line">    ThreadLocal&lt;List&lt;TalentUserInputEntity&gt;&gt; threadLocal = talentImportVerifyHandler.getThreadLocal();</span><br><span class="line">    <span class="keyword">if</span> (threadLocal != <span class="keyword">null</span>) &#123;</span><br><span class="line">      threadLocal.remove();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  System.out.println(<span class="string">"是否校验失败: "</span> + result.isVerfiyFail());</span><br><span class="line">  System.out.println(<span class="string">"校验失败的集合:"</span> + JSONObject.toJSONString(result.getFailList()));</span><br><span class="line">  System.out.println(<span class="string">"校验通过的集合:"</span> + JSONObject.toJSONString(result.getList()));</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 合并结果集</span></span><br><span class="line">  List&lt;TalentUserInputEntity&gt; resultList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">  resultList.addAll(result.getFailList());</span><br><span class="line">  resultList.addAll(result.getList());</span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity inputEntity : resultList) &#123;</span><br><span class="line">    StringJoiner joiner = <span class="keyword">new</span> StringJoiner(<span class="string">","</span>);</span><br><span class="line">    joiner.add(inputEntity.getErrorMsg());</span><br><span class="line">    <span class="comment">// 校验Collection的元素</span></span><br><span class="line">    inputEntity.getExperienceList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getEducationList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getAwardList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.getPunishmentList().forEach(e -&gt; verify(joiner, e));</span><br><span class="line">    inputEntity.setErrorMsg(joiner.toString());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">for</span> (TalentUserInputEntity entity : result.getFailList()) &#123;</span><br><span class="line">    <span class="keyword">int</span> line = entity.getRowNum() + <span class="number">1</span>;</span><br><span class="line">    String msg = <span class="string">"第"</span> + line + <span class="string">"行的错误是："</span> + entity.getErrorMsg();</span><br><span class="line">    System.out.println(msg);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">verify</span><span class="params">(StringJoiner joiner, Object object)</span> </span>&#123;</span><br><span class="line">  String validationMsg = PoiValidationUtil.validation(object, <span class="keyword">null</span>);</span><br><span class="line">  <span class="keyword">if</span> (StringUtils.isNotEmpty(validationMsg)) &#123;</span><br><span class="line">    joiner.add(validationMsg);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>导入示例Excel2，结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191228155741.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>至此，我们就完成了导入的大部分需求。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><ul><li><a href="https://github.com/Mosiki/learning-modules">示例代码</a></li></ul><p>这篇博客花费了我不少时间来写，文中的代码也上传到了GitHub上，并且在写文章的同时，学习了一下Git tag 的使用，读者可以在 GitHub 的分支切换可以切换到不同tag看代码。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20191228154341.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一直以来，使用EasyPOI做了不少导入导出的需求，但是每次做完都是临时去看官方文档现学现用，正巧最近朋友遇到这么个需求，用到了EasyPOI来完成导入，我也正好整理整理EasyPOI的导入用法。&lt;/p&gt;
    
    </summary>
    
      <category term="EasyPOI" scheme="http://nullpointer.pw/categories/EasyPOI/"/>
    
    
      <category term="easypoi导入Excel" scheme="http://nullpointer.pw/tags/easypoi%E5%AF%BC%E5%85%A5Excel/"/>
    
      <category term="easypoi导入Excel时间格式校验" scheme="http://nullpointer.pw/tags/easypoi%E5%AF%BC%E5%85%A5Excel%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="easypoi导入Collection校验" scheme="http://nullpointer.pw/tags/easypoi%E5%AF%BC%E5%85%A5Collection%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="easypoi导入重复行校验" scheme="http://nullpointer.pw/tags/easypoi%E5%AF%BC%E5%85%A5%E9%87%8D%E5%A4%8D%E8%A1%8C%E6%A0%A1%E9%AA%8C/"/>
    
      <category term="easypoi导入重复值校验" scheme="http://nullpointer.pw/tags/easypoi%E5%AF%BC%E5%85%A5%E9%87%8D%E5%A4%8D%E5%80%BC%E6%A0%A1%E9%AA%8C/"/>
    
  </entry>
  
  <entry>
    <title>ParallelsDesktop安装精简版系统</title>
    <link href="http://nullpointer.pw/ParallelsDesktop%E5%AE%89%E8%A3%85%E7%B2%BE%E7%AE%80%E7%89%88%E7%B3%BB%E7%BB%9F.html"/>
    <id>http://nullpointer.pw/ParallelsDesktop安装精简版系统.html</id>
    <published>2019-09-12T14:36:34.000Z</published>
    <updated>2020-01-22T14:46:28.035Z</updated>
    
    <content type="html"><![CDATA[<p>分享一个虚拟机安装精简版 Windows10 系统的方法，只占用 5G 存储空间大小的完整版 win10 系统哦，不要安装那些垃圾阉割过的win7或者xp系统了，win10 也可以占用这么小的空间哦~</p><p>用了 Mac 这么久，感觉开发确实用 Mac 更方便更友好一些，但是有时候就会用到 Windows 系统，比如需要用到 XShell 之类 win 上独有的软件。这时候在 Mac 上安一个 Windows 虚拟机就很有用处了。即使是 Windows 电脑，做一些敏感操作容易中毒时候（比如作死玩玩病毒之类的），也最好隔离系统在虚拟机里鼓捣。</p><p>在 Mac 上 Parallels Desktop 安装的虚拟机全屏后，和Mac系统无缝切换，就是舒服~</p><p>啥？你还问我有什么用？如果你买个 128 GB 存储的 Mac 就知道有没有用了。（我的 256 也不够用，因此鼓捣出这么个方法来）</p><a id="more"></a><p>Windows 系统很占空间，新安装的系统动辄占用 40G - 60G 存储空间，如果安装到虚拟机中，就显得不是那么划算了。（在虚拟机中安过原版镜像的同学，对于虚拟机占用空间的大小，肯定深有体会）</p><p>原版镜像的 ISO 文件一般都要 13G 以上，于是我在 远景论坛 找到一个大神精简过的 Win10 ESD 镜像，只精简了无用的一些服务，无捆绑，镜像包仅 1G 大小，安装后也仅占用 4G 空间，真香！</p><p>如果你不知道我叨叨的是什么，就不用继续往下看了，以下以 Parallels Desktop 虚拟机举例，其他虚拟机比如 Vmware Fusion 之类的请触类旁通。</p><h2 id="安装准备"><a href="#安装准备" class="headerlink" title="安装准备"></a>安装准备</h2><p>几乎所有的虚拟机软件安装时，只支持 ISO 文件，但是一般封装的系统都是 ESD WIM 之类的镜像格式，So，需要转换成 ISO 格式。</p><p>我这里给出转换好的大神精简的镜像 ISO 文件，用了一年多了，很稳定，和原版镜像没有任何差别，占用空间相对原版镜像少的不是一点半点。若想要自己封装 ISO，见文末参考链接。</p><p><a href="https://pan.baidu.com/s/12mMWCCqRuREJC-2RM4gZ8g"><strong>Win10精简版 ISO 镜像以及引导镜像下载</strong></a>    提取码: <strong>vcmq</strong></p><p>网盘内有两个 ISO 文件，<strong>WePE_64_V2.0.iso</strong> 为引导镜像，<strong>win10.iso</strong> 为系统镜像。</p><p>下载文件到本地。</p><h2 id="安装引导镜像"><a href="#安装引导镜像" class="headerlink" title="安装引导镜像"></a>安装引导镜像</h2><ol><li>新建虚拟机，选择 <strong>WePE_64_V2.0.iso</strong> 这个引导镜像，可能会有如下之类的提示，无视跳过即可。</li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190912215326.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>选择系统类型为 win10</p></li><li><p>这里随便选一个就行</p><p><img src="http://img12345.5-project.com/blog/20190912215506.png" alt=""></p></li><li><p>选择保存位置以及设置虚拟机名称</p></li><li><p>关闭设定，继续安装虚拟机，直到开机进入 PE 引导系统</p></li></ol><h2 id="安装-win10"><a href="#安装-win10" class="headerlink" title="安装 win10"></a>安装 win10</h2><ol><li><p>配置虚拟机连接的镜像为 <strong>win10.iso</strong></p><p><img src="http://img12345.5-project.com/blog/20190912220349.png" alt=""></p></li><li><p>打开引导系统内左下角的分区工具 DiskGenius，右键硬盘选择建立新分区（这里的大小是不准确的，不用理会），确定之后，选择保存更改，然后格式化选是（放心不会影响你的宿主机环境）</p><p><img src="http://img12345.5-project.com/blog/20190912220905.png" alt=""></p></li><li><p>操作完如图所示（我的是 256G，这里也显示的是 256GB）</p><p><img src="http://img12345.5-project.com/blog/20190912221112.png" alt=""></p></li><li><p>打开 Windows 安装器，选择 win10 镜像（在DVD 驱动器内）</p><p><img src="http://img12345.5-project.com/blog/20190912221241.png" alt=""></p></li><li><p>选择开始安装，然后点确定，等待安装，安装完需要手动在开始菜单中手动重启。</p></li><li><p>重启后，系统自动进行 win10系统 的加载，稍等一会儿即可</p><p><img src="http://img12345.5-project.com/blog/20190912221809.png" alt=""></p></li></ol><h2 id="收尾工作"><a href="#收尾工作" class="headerlink" title="收尾工作"></a>收尾工作</h2><ol><li><p>选择桌面上的系统激活工具，直接选择激活即可。</p></li><li><p>这时候全屏虚拟机，会发现分辨率不是最佳的，因为你需要安装一下虚拟机工具，退出全屏</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190912224112.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>选择安装 Parallels Tools</p></li><li><p>进入我的电脑，DVD驱动器，运行 Autorun 文件进行安装，安装完选择重启系统</p></li></ol><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190912222617.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><ol><li><p>重启后，选择最大化（而不是融合模式）  </p><p><img src="http://img12345.5-project.com/blog/20190912222847.png" alt=""></p></li><li><p>稍等一会，虚拟机会自动调整分辨率到自适应。系统也会成功激活，桌面激活软件会自动消失。</p></li><li><p>完成！</p></li></ol><h2 id="亮点"><a href="#亮点" class="headerlink" title="亮点"></a>亮点</h2><p>看一下虚拟机占用吧嘿嘿~</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190912223211.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>希望对你有所帮助吧~</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://jingyan.baidu.com/article/1876c85261a7f5890b137683.html">https://jingyan.baidu.com/article/1876c85261a7f5890b137683.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;分享一个虚拟机安装精简版 Windows10 系统的方法，只占用 5G 存储空间大小的完整版 win10 系统哦，不要安装那些垃圾阉割过的win7或者xp系统了，win10 也可以占用这么小的空间哦~&lt;/p&gt;
&lt;p&gt;用了 Mac 这么久，感觉开发确实用 Mac 更方便更友好一些，但是有时候就会用到 Windows 系统，比如需要用到 XShell 之类 win 上独有的软件。这时候在 Mac 上安一个 Windows 虚拟机就很有用处了。即使是 Windows 电脑，做一些敏感操作容易中毒时候（比如作死玩玩病毒之类的），也最好隔离系统在虚拟机里鼓捣。&lt;/p&gt;
&lt;p&gt;在 Mac 上 Parallels Desktop 安装的虚拟机全屏后，和Mac系统无缝切换，就是舒服~&lt;/p&gt;
&lt;p&gt;啥？你还问我有什么用？如果你买个 128 GB 存储的 Mac 就知道有没有用了。（我的 256 也不够用，因此鼓捣出这么个方法来）&lt;/p&gt;
    
    </summary>
    
      <category term="其他" scheme="http://nullpointer.pw/categories/%E5%85%B6%E4%BB%96/"/>
    
    
      <category term="ParallelsDesktop安装精简版系统" scheme="http://nullpointer.pw/tags/ParallelsDesktop%E5%AE%89%E8%A3%85%E7%B2%BE%E7%AE%80%E7%89%88%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="Vmvare安装精简版系统" scheme="http://nullpointer.pw/tags/Vmvare%E5%AE%89%E8%A3%85%E7%B2%BE%E7%AE%80%E7%89%88%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="精简版win10系统" scheme="http://nullpointer.pw/tags/%E7%B2%BE%E7%AE%80%E7%89%88win10%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="虚拟机安装esd格式系统镜像" scheme="http://nullpointer.pw/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85esd%E6%A0%BC%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/"/>
    
      <category term="虚拟机安装wim格式系统镜像" scheme="http://nullpointer.pw/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%AE%89%E8%A3%85wim%E6%A0%BC%E5%BC%8F%E7%B3%BB%E7%BB%9F%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>Java内存分页工具类</title>
    <link href="http://nullpointer.pw/Java%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB.html"/>
    <id>http://nullpointer.pw/Java内存分页工具类.html</id>
    <published>2019-07-23T14:34:01.000Z</published>
    <updated>2020-01-22T14:38:21.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>工作过程中，经常会遇到基于内存数据进行分页处理的情况，例如批量更新数据库时，集合过大需要分批更新的情况，还有例如对缓存中的集合数据进行分页获取这种情况。<br>本文提供了通用的内存分页工具，参考了网络上的一些代码，主要基于 <strong>subList()</strong> 方法实现，希望对你有所帮助！工具类源码在本文底部。<br><a id="more"></a></p><h2 id="优化前"><a href="#优化前" class="headerlink" title="优化前"></a>优化前</h2><p>首先来看一下正常如果要实现这些需求的话，代码的实现是怎么样的</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页进行批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">batchUpdateStudent</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> limit = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">int</span> size = students.size();</span><br><span class="line">    <span class="keyword">int</span> m = size / limit;</span><br><span class="line">    <span class="keyword">int</span> n = size % limit;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i++) &#123;</span><br><span class="line">        List&lt;Student&gt; list = students.subList((i - <span class="number">1</span>) * limit, i * limit);</span><br><span class="line">        studentDao.batchUpdate(list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (n != <span class="number">0</span>) &#123;</span><br><span class="line">        List&lt;Student&gt; list = students.subList(m * limit, students.size());</span><br><span class="line">        studentDao.batchUpdate(list);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">pageStudents</span><span class="params">(Integer page, Integer pageSize)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (page &lt; <span class="number">1</span>) &#123;</span><br><span class="line">        page = <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> start = (page - <span class="number">1</span>) * pageSize;</span><br><span class="line">    <span class="keyword">int</span> limit = page * pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 从缓存中获取全量数据</span></span><br><span class="line">    List&lt;Student&gt; students = studentCache.getStudents();</span><br><span class="line">    <span class="keyword">if</span> (CollectionUtils.isEmpty(students)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (limit &gt; students.size()) &#123;</span><br><span class="line">        limit = students.size();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> students.subList(start, limit), students.size();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看出方法的代码比较冗余，如果多处需要内存分页，重复代码不可避免会有很多！</p><h2 id="优化后"><a href="#优化后" class="headerlink" title="优化后"></a>优化后</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 分页进行批量更新</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">batchUpdateStudent</span><span class="params">(List&lt;Student&gt; students)</span> </span>&#123;</span><br><span class="line">RAMPager&lt;Student&gt; pager = <span class="keyword">new</span> RAMPager&lt;&gt;(students, <span class="number">100</span>);</span><br><span class="line"><span class="comment">// 方式一：使用迭代器</span></span><br><span class="line">Iterator&lt;List&lt;Student&gt;&gt; iterator = pager.iterator();</span><br><span class="line"><span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">studentDao.batchUpdate(iterator.next());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二：使用索引</span></span><br><span class="line"><span class="comment">//for (int i = 1; i &lt;= pager.getPageCount(); i++) &#123;</span></span><br><span class="line"><span class="comment">//studentDao.batchUpdate(pager.page(i));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 分页获取数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">pageStudents</span><span class="params">(Integer page, Integer pageSize)</span> </span>&#123;</span><br><span class="line"><span class="comment">// 从缓存中获取全量数据</span></span><br><span class="line">List&lt;Student&gt; students = studentCache.getStudents();</span><br><span class="line">RAMPager&lt;Student&gt; pager = <span class="keyword">new</span> RAMPager&lt;&gt;(students, pageSize);</span><br><span class="line"><span class="keyword">return</span> pager.page(page);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注：如果只是分页，而不需要关注页码，使用迭代器即可；</p><h2 id="工具类源码"><a href="#工具类源码" class="headerlink" title="工具类源码"></a>工具类源码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类名称：RAMPager</span></span><br><span class="line"><span class="comment"> * 类描述：内存分页工具</span></span><br><span class="line"><span class="comment"> * 创建人：WeJan</span></span><br><span class="line"><span class="comment"> * 创建时间：2019年07月22日 13:43</span></span><br><span class="line"><span class="comment"> * Version: 1.1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RAMPager</span>&lt;<span class="title">T</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;T&gt; data;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> pageSize;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data     原始数据</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageSize 每页条数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RAMPager</span><span class="params">(List&lt;T&gt; data, <span class="keyword">int</span> pageSize)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.data = data;</span><br><span class="line">        <span class="keyword">this</span>.pageSize = pageSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取某页数据，从第1页开始</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> pageNum 第几页</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 分页数据</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">page</span><span class="params">(<span class="keyword">int</span> pageNum)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pageNum &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            pageNum = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> from = (pageNum - <span class="number">1</span>) * pageSize;</span><br><span class="line">        <span class="keyword">int</span> to = Math.min(pageNum * pageSize, data.size());</span><br><span class="line">        <span class="keyword">if</span> (from &gt; to) &#123;</span><br><span class="line">            from = to;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.subList(from, to);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取总页数</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (pageSize == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> data.size() % pageSize == <span class="number">0</span> ? (data.size() / pageSize) : (data.size() / pageSize + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 元素迭代器</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterator&lt;List&lt;T&gt;&gt; iterator() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> Itr();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">Itr</span> <span class="keyword">implements</span> <span class="title">Iterator</span>&lt;<span class="title">List</span>&lt;<span class="title">T</span>&gt;&gt; </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        Itr() &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">return</span> page &lt;= getPageCount();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> List&lt;T&gt; <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> i = page;</span><br><span class="line">            <span class="keyword">if</span> (i &gt; getPageCount())</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">            page = i + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> RAMPager.<span class="keyword">this</span>.page(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;Integer&gt; list = Arrays.asList(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>);</span><br><span class="line">        System.out.println(<span class="string">"原始数据是："</span> + list);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> pageSize = <span class="number">2</span>;</span><br><span class="line">        System.out.println(<span class="string">"每页大小是："</span> + pageSize);</span><br><span class="line"></span><br><span class="line">        RAMPager&lt;Integer&gt; pager = <span class="keyword">new</span> RAMPager&lt;&gt;(list, pageSize);</span><br><span class="line">        System.out.println(<span class="string">"总页数是: "</span> + pager.getPageCount());</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&lt;- - - - - - - - - - - - - -&gt;"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 无需感知页码情况下使用</span></span><br><span class="line">        Iterator&lt;List&lt;Integer&gt;&gt; iterator = pager.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">            List&lt;Integer&gt; next = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"next: "</span> + next);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"&lt;- - - - - - - - - - - - - -&gt;"</span>);</span><br><span class="line">        <span class="comment">// 需要指定页码情况使用，页码从第一页开始，且小于等于总页数！</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= pager.getPageCount(); i++) &#123;</span><br><span class="line">            List&lt;Integer&gt; page = pager.page(i);</span><br><span class="line">            System.out.println(<span class="string">"第 "</span> + i + <span class="string">" 页数据是:"</span> + page);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>希望对你有用~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;工作过程中，经常会遇到基于内存数据进行分页处理的情况，例如批量更新数据库时，集合过大需要分批更新的情况，还有例如对缓存中的集合数据进行分页获取这种情况。&lt;br&gt;本文提供了通用的内存分页工具，参考了网络上的一些代码，主要基于 &lt;strong&gt;subList()&lt;/strong&gt; 方法实现，希望对你有所帮助！工具类源码在本文底部。&lt;br&gt;
    
    </summary>
    
      <category term="实用代码片段" scheme="http://nullpointer.pw/categories/%E5%AE%9E%E7%94%A8%E4%BB%A3%E7%A0%81%E7%89%87%E6%AE%B5/"/>
    
    
      <category term="java内存分页工具类" scheme="http://nullpointer.pw/tags/java%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
    
      <category term="java内存分页" scheme="http://nullpointer.pw/tags/java%E5%86%85%E5%AD%98%E5%88%86%E9%A1%B5/"/>
    
  </entry>
  
  <entry>
    <title>Mysql日期分组无数据查询填充0</title>
    <link href="http://nullpointer.pw/Mysql%E6%97%A5%E6%9C%9F%E5%88%86%E7%BB%84%E6%97%A0%E6%95%B0%E6%8D%AE%E6%9F%A5%E8%AF%A2%E5%A1%AB%E5%85%850.html"/>
    <id>http://nullpointer.pw/Mysql日期分组无数据查询填充0.html</id>
    <published>2019-05-09T14:30:30.000Z</published>
    <updated>2020-01-22T14:41:37.240Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这篇文章标题不好取。。。(主要是生成连续的日期)，本文关键点有：Mysql 获取指定时间段内的所有日期列表，<br>Mysql 按照日期分组查询没有数据的日期也一并查询出来。</p><a id="more"></a><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>产品提出一个需求，需要展示这样的一张折线图，用来反映指定时间段内网站注册用户的增加趋势，于是需要后端的 JSON 工程师给出对应的接口。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190509213309.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="疏忽大意"><a href="#疏忽大意" class="headerlink" title="疏忽大意"></a>疏忽大意</h2><p>具体的表结构和数据是这样的</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190509214326.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>JSON 工程师不加思索，展开了 CRUD 大法，顺手写下了一个 SQL，不到5分钟，接口完活，测都没测试直接给到了前端开发。</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> <span class="built_in">date</span>(t.create_time) <span class="keyword">as</span> <span class="string">`date`</span>,</span><br><span class="line">       <span class="keyword">count</span>(t.id)  <span class="keyword">as</span> <span class="keyword">num</span></span><br><span class="line"><span class="keyword">from</span> t_user t</span><br><span class="line"><span class="keyword">group</span> <span class="keyword">by</span> <span class="string">`date`</span>;</span><br></pre></td></tr></table></figure><p>前端拿到数据后开始绘图，结果画的图完全不对啊，因为时间不是连续的。于是反馈到了 JSON 工程师这里。</p><p>JSON 工程师一想，哎哟，没考虑掉某天没有数据的情况，分组查询的话，肯定缺少这一天的数据的。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------+-----+</span><br><span class="line">|    date    | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-06 |  2  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-08 |  2  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-09 |  9  |</span><br><span class="line">+------------+-----+</span><br></pre></td></tr></table></figure><p>正确的做法应该是即使某天没有数据，也填充一个 0 作为记录值。</p><h2 id="修正查询数据"><a href="#修正查询数据" class="headerlink" title="修正查询数据"></a>修正查询数据</h2><p>找到了问题就好办了，捋了一下逻辑分成了两步</p><h3 id="一、拿到所有日期"><a href="#一、拿到所有日期" class="headerlink" title="一、拿到所有日期"></a>一、拿到所有日期</h3><p><strong>2019年09月12日更新</strong></p><p>感谢评论区中 @一个小可爱（感觉是个有趣的人哈哈）提出的方法，于是我就来更新一下本文了。最好的方式是在 Java 代码中处理生成连续的日期，然后创建一个 map 对象，初始化所有的键值对的值为 0，然后遍历查询出来的按照日期作为 key，之后进行 put 覆盖默认值即可。</p><p>提供一个<strong>生成连续日期</strong>的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Set&lt;String&gt; <span class="title">getBetweenDate</span><span class="params">(String start, String end)</span> </span>&#123;</span><br><span class="line">  LocalDate startDate = LocalDate.parse(start);</span><br><span class="line">  LocalDate endDate = LocalDate.parse(end);</span><br><span class="line">  <span class="keyword">long</span> between = ChronoUnit.DAYS.between(startDate, endDate);</span><br><span class="line">  <span class="keyword">if</span> (between &lt; <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> Stream.of(start, end).collect(Collectors.toSet());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> Stream.iterate(startDate, e -&gt; e.plusDays(<span class="number">1</span>))</span><br><span class="line">    .limit(between + <span class="number">1</span>)</span><br><span class="line">    .map(LocalDate::toString)</span><br><span class="line">    .collect(Collectors.toSet());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">  Set&lt;String&gt; days = BaseTest.getBetweenDate(<span class="string">"2019-08-29"</span>, <span class="string">"2019-09-02"</span>);</span><br><span class="line">  log.info(<span class="string">"&#123;&#125;"</span>, days);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、按照日期分组查询"><a href="#二、按照日期分组查询" class="headerlink" title="二、按照日期分组查询"></a>二、按照日期分组查询</h2><p><strong>原来的文章可能会造成误解，已更新掉</strong><br>按照日期分组查询，遍历查询结果，覆盖第一步里的时间map的值即可。</p><p>结果如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">+------------+-----+</span><br><span class="line">|    date    | num |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-03 |  0  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-04 |  0  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-05 |  0  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-06 |  2  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-07 |  0  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-08 |  2  |</span><br><span class="line">+------------+-----+</span><br><span class="line">| 2019-05-09 |  9  |</span><br><span class="line">+------------+-----+</span><br></pre></td></tr></table></figure><p>顺利达到了目的，收工！</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://www.cnblogs.com/zhengguangpan/p/10308886.html">https://www.cnblogs.com/zhengguangpan/p/10308886.html</a></p></li><li><p><a href="https://blog.csdn.net/Dai_Aixy/article/details/83144619">https://blog.csdn.net/Dai_Aixy/article/details/83144619</a></p></li><li><p><a href="https://www.cnblogs.com/dennyzhangdd/p/8073181.html">https://www.cnblogs.com/dennyzhangdd/p/8073181.html</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这篇文章标题不好取。。。(主要是生成连续的日期)，本文关键点有：Mysql 获取指定时间段内的所有日期列表，&lt;br&gt;Mysql 按照日期分组查询没有数据的日期也一并查询出来。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://nullpointer.pw/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="分组查询无数据填充0" scheme="http://nullpointer.pw/tags/%E5%88%86%E7%BB%84%E6%9F%A5%E8%AF%A2%E6%97%A0%E6%95%B0%E6%8D%AE%E5%A1%AB%E5%85%850/"/>
    
      <category term="获取指定时间段内的时间日期列表" scheme="http://nullpointer.pw/tags/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E6%97%B6%E9%97%B4%E6%AE%B5%E5%86%85%E7%9A%84%E6%97%B6%E9%97%B4%E6%97%A5%E6%9C%9F%E5%88%97%E8%A1%A8/"/>
    
      <category term="java生成连续日期" scheme="http://nullpointer.pw/tags/java%E7%94%9F%E6%88%90%E8%BF%9E%E7%BB%AD%E6%97%A5%E6%9C%9F/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic源码阅读之Scheduler</title>
    <link href="http://nullpointer.pw/WebMagic%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BScheduler.html"/>
    <id>http://nullpointer.pw/WebMagic源码阅读之Scheduler.html</id>
    <published>2019-01-28T21:26:25.000Z</published>
    <updated>2020-01-22T14:43:59.170Z</updated>
    
    <content type="html"><![CDATA[<p>本文是 WebMagic 源码阅读第三篇，版本依然是 <code>version-0.0.1</code> 的 tag。作者对于 Scheduler 的描述是如下：</p><blockquote><p>包含url管理和调度的接口。包括url抓取队列，url去重等功能。</p></blockquote><a id="more"></a><h2 id="阅读Scheduler源码"><a href="#阅读Scheduler源码" class="headerlink" title="阅读Scheduler源码"></a>阅读Scheduler源码</h2><p>Scheduler 是一个接口类，源码中实现有三个，分别是  <figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181226064924.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>默认 Spider 使用 <code>QueueScheduler</code><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 默认使用基于内存的队列</span></span><br><span class="line"><span class="keyword">private</span> Scheduler scheduler = <span class="keyword">new</span> QueueScheduler();</span><br></pre></td></tr></table></figure></p><p>Scheduler 接口只有两个方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 加入一个待抓取的链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> request 待抓取的链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 定义的任务，以满足单Scheduler多Task的情况</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Request request,Task task)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 返回下一个要抓取的链接</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> task 定义的任务，以满足单Scheduler多Task的情况</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> 下一个要抓取的链接</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Request <span class="title">poll</span><span class="params">(Task task)</span></span>;</span><br></pre></td></tr></table></figure></p><p>接下来，分析常用的的两个实现类 QueueScheduler 和 RedisScheduler </p><h2 id="QueueScheduler"><a href="#QueueScheduler" class="headerlink" title="QueueScheduler"></a>QueueScheduler</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190116061228.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>线程安全的队列实现请求的生产消费关系，push 和 poll 都是同步方法，同时因为 LinkedBlockingQueue 的长度是 Integer.MAX_VALUE，如果队列过长，会出现 OOM 的情况。</p><h2 id="RedisScheduler"><a href="#RedisScheduler" class="headerlink" title="RedisScheduler"></a>RedisScheduler</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190116062241.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>源码中使用 Redis 的 list 结构做 URL 队列，通过 rpush 方法，将新的 URL 放入队列右边，通过 lpop 从队列左侧弹出一个待抓取的 URL 。</p><p>使用了 Redis 的有序集合进行 URL 去重，原理是：<br>如果 url 是有序集和的成员，返回 url 的排名。 如果 url 不是有序集和的成员，返回 null。zrank 方法参数如下：<br><code>zrank(有序集合的key, 成员名称)</code></p><p>当成功添加 URL 到队列，调用 zadd 方法将 URL 放入有序集合当中，便于后续 URL 判重。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>功力不足，尚且看不出这部分源码的不足之处，只看到 RedisScheduler 中 jedis 释放资源的操作未放到 final 中，有所隐患。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>独行的路总是孤独的，希望能找到一些小伙伴共同进步~<br><img src="http://img12345.5-project.com/blog/20181226212444.png" alt=""></p><p>QQ 群号:967808880</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是 WebMagic 源码阅读第三篇，版本依然是 &lt;code&gt;version-0.0.1&lt;/code&gt; 的 tag。作者对于 Scheduler 的描述是如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;包含url管理和调度的接口。包括url抓取队列，url去重等功能。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="http://nullpointer.pw/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="源码解析" scheme="http://nullpointer.pw/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic源码阅读之Spider</title>
    <link href="http://nullpointer.pw/WebMagic%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB%E4%B9%8BSpider.html"/>
    <id>http://nullpointer.pw/WebMagic源码阅读之Spider.html</id>
    <published>2019-01-15T13:28:37.000Z</published>
    <updated>2020-01-22T14:44:09.913Z</updated>
    
    <content type="html"><![CDATA[<p>总是觉得自己平时总是在写逻辑代码，于是学习设计模式，但是又觉得无处可施展，对于如何提高自己的编码能力总是困惑，也曾看了一些源码，但总因为难度太大而不了了之。因为大多数的开源框架源码随着版本的更迭，难度越发上升源码愈发晦涩难懂，但源码还是不能不读，所以觉得从最简单的源码开始读起吧，因为工作中，用到了 WebMagic 框架，于是决定从它开始，为了降低阅读难度，我选择了第一个 tag 版本的源码开始阅读，从易入难，由浅入深，希望自己 2019 年代码能力能有所提升!</p><a id="more"></a><h2 id="下载源码"><a href="#下载源码" class="headerlink" title="下载源码"></a>下载源码</h2><p>首先在 IDEA 上把 WebMagic 的源码 clone 到本地<br><img src="http://img12345.5-project.com/blog/20190115211258.png" alt=""></p><p>然后 checkout 第一个版本的 tag<br><img src="http://img12345.5-project.com/blog/20190115211432.png" alt=""></p><p>在对话框中，使用智能提示快捷键展示出所有的 tag，默认快捷键是 <code>ctrl(command) + 空格</code>，因为可能会和输入法冲突，我修改成了 <code>command + ;</code><br><img src="http://img12345.5-project.com/blog/20190115211528.png" alt=""></p><p>我选择了 <code>version-0.1.0</code> 版本，然后基于这个 tag，创建了自己的本地分支，便于在上面进行添加注释等操作。</p><h2 id="阅读-Spider-源码"><a href="#阅读-Spider-源码" class="headerlink" title="阅读 Spider 源码"></a>阅读 Spider 源码</h2><p><img src="http://img12345.5-project.com/blog/20181226210950.png" alt=""><br>参见官网架构图，Spider 这个组件是 WebMagic 框架的核心所在，同时也是爬虫的入口类，Spider 将各大组件串联起来，共同工作。<br><img src="http://img12345.5-project.com/blog/20181226064624.png" alt=""></p><p>Spider 实现了 Task 和 Runnable 接口，Task 提供了两个接口方法，一个是 getSite()，另外一个是 getUUID()，爬虫运行时，将爬虫自身引用传递到各个组件进行处理。</p><p>一般使用 WebMagic 时，通过 Spider.create() 方法创建爬虫，创建时可以指定 Downloader、Scheduler、PageProcessor、Pipeline 这几个组件，作者将这四个组件抽象成了接口，方便扩展，其中 PageProcessor 是必须指定的组件，其他的组件 WebMagic 提供了对应的默认值。</p><p>Spider 类主要核心是 run 方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 通过 AtomicInteger 的 CAS 乐观锁保证多线程下，爬虫只会启动一次</span></span><br><span class="line">    <span class="comment">// 如果爬虫状态当前状态是 STAT_INIT，则更新成 STAT_RUNNING，否则抛出异常</span></span><br><span class="line">    <span class="keyword">if</span> (!stat.compareAndSet(STAT_INIT, STAT_RUNNING)) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"Spider is already running!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加启动 URL</span></span><br><span class="line">    <span class="keyword">if</span> (startUrls != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (String startUrl : startUrls) &#123;</span><br><span class="line">            scheduler.push(<span class="keyword">new</span> Request(startUrl), <span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 从队列中取出一个请求</span></span><br><span class="line">    Request request = scheduler.poll(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 添加管道处理，如果为空添加，输出到控制台</span></span><br><span class="line">    <span class="keyword">if</span> (pipelines.isEmpty()) &#123;</span><br><span class="line">        pipelines.add(<span class="keyword">new</span> ConsolePipeline());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//single thread</span></span><br><span class="line">    <span class="keyword">if</span> (executorService==<span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="comment">// 默认单线程</span></span><br><span class="line">        <span class="comment">// 循环调度所有的 Request</span></span><br><span class="line">        <span class="keyword">while</span> (request != <span class="keyword">null</span>) &#123;</span><br><span class="line">            processRequest(request);</span><br><span class="line">            request = scheduler.poll(<span class="keyword">this</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 如果已经调用 Spider.thread(n) 方法则走这个分支</span></span><br><span class="line">        <span class="comment">//multi thread</span></span><br><span class="line">        <span class="comment">// 初始化活跃线程数量为 0，当爬虫线程启动后，如果活跃线程变成 0 时，跳出死循环</span></span><br><span class="line">        <span class="keyword">final</span> AtomicInteger threadAlive = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="comment">//when no request found but some thread is alive, sleep a while.</span></span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">100</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">final</span> Request requestFinal = request;</span><br><span class="line">                <span class="comment">// 执行线程之前对活跃线程数进行原子性自增操作</span></span><br><span class="line">                threadAlive.incrementAndGet();</span><br><span class="line">                executorService.execute(<span class="keyword">new</span> Runnable() &#123;</span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                        processRequest(requestFinal);</span><br><span class="line">                        <span class="comment">// 处理完请求之后对活跃线程数进行原子性自减操作</span></span><br><span class="line">                        threadAlive.decrementAndGet();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 循环从队列中取新的待抓取 URL</span></span><br><span class="line">            request = scheduler.poll(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 当活跃线程数为 0，说明队列已经为空了</span></span><br><span class="line">            <span class="keyword">if</span> (threadAlive.get() == <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="comment">// 为了保险起见，再重试获取一下请求</span></span><br><span class="line">                request = scheduler.poll(<span class="keyword">this</span>);</span><br><span class="line">                <span class="comment">// 如果依然为 null，则跳出 while 循环</span></span><br><span class="line">                <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 关闭线程池</span></span><br><span class="line">        executorService.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 当所有请求抓取完毕，即活跃线程数量变成 0 时，修改爬虫状态为已停止</span></span><br><span class="line">    stat.compareAndSet(STAT_RUNNING, STAT_STOPPED);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>从源码中看到，对于多线程共享资源活跃线程数的处理，使用到了 Integer 的原子类 AtomicInteger，保证活跃线程数量在多线程情况下统计结果的正确性。</p><p>作者将四大组件抽象成了接口，面向接口编程，方便扩展，很值得学习。</p><p>因为是初始版本，不可避免的会有一些明显的 Bug 存在，比如在 page 类的 <code>addTargetRequests</code> 方法中应该用 <code>continue</code>，但是错用了 <code>break</code>的情况，所以初始版本源码阅读完成后，需要读读新一些版本的源码。</p><h2 id="联系"><a href="#联系" class="headerlink" title="联系"></a>联系</h2><p>独行的路总是孤独的，希望能找到一些小伙伴共同进步哈哈~<br><img src="http://img12345.5-project.com/blog/20181226212444.png" alt=""></p><p>QQ 群号:967808880</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;总是觉得自己平时总是在写逻辑代码，于是学习设计模式，但是又觉得无处可施展，对于如何提高自己的编码能力总是困惑，也曾看了一些源码，但总因为难度太大而不了了之。因为大多数的开源框架源码随着版本的更迭，难度越发上升源码愈发晦涩难懂，但源码还是不能不读，所以觉得从最简单的源码开始读起吧，因为工作中，用到了 WebMagic 框架，于是决定从它开始，为了降低阅读难度，我选择了第一个 tag 版本的源码开始阅读，从易入难，由浅入深，希望自己 2019 年代码能力能有所提升!&lt;/p&gt;
    
    </summary>
    
      <category term="源码阅读" scheme="http://nullpointer.pw/categories/%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="源码解析" scheme="http://nullpointer.pw/tags/%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>2018年终总结</title>
    <link href="http://nullpointer.pw/2018%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html"/>
    <id>http://nullpointer.pw/2018年终总结.html</id>
    <published>2018-12-31T02:00:25.000Z</published>
    <updated>2020-01-22T14:30:24.241Z</updated>
    
    <content type="html"><![CDATA[<p>与去年一样，已然 2018 年尾，全国多数城市几乎都大大小小地落过几场雪；北京，却无半点下雪的征兆，初雪应该也要拖延到明年开春之后了吧！<br>与去年一样，立下的目标除了继续坚持写博客之外，其他全部被抛诸脑后；如果不是把写博客这个目标进行了量化，强迫着自己去执行，怕是所有的目标都只是有始无终罢了！<br><a id="more"></a></p><h2 id="体验·突破"><a href="#体验·突破" class="headerlink" title="体验·突破"></a>体验·突破</h2><p>从 2017 年始，一直以来，记录每天时间支出的习惯都在保持着，但是目前对于自己的作用并不大；也仅仅是年底这个时候，需要写年终总结的时候，看一眼全年时间统计的分布情况，让自己后悔未能珍惜光阴而已。<br>借助于 APP 记录时间的便利性，虽然一天的时间能在 5 分钟内全部记录完毕，但是有时候也会想，记这个对自己到底有什么用呢？  </p><p>也许量变或许能产生质变吧！柳比歇夫几十年如一日的记录，世人也不是没有弄清他记录时间到底有什么用吗？其中的妙处可能也只有柳比歇夫自己知道吧！</p><p>知道自己生命流逝的所有时间，能让自己变得更加自律，其实这样就足够了！</p><p>年中，和女朋友一起去看了一次房子，当时就决定在那里买，做什么决定都很快，买房这件事也不例外。<br>买之前觉得自己是刚需，买了之后，其实买不买也并非那么重要。<br>但是结婚的话，房子还是要有的，就这样上车了，2 年后才能交房，目前的体验就是如果不是每个月银行要从卡里扣除房贷，我都快忘了自己也算是买过房的人了😂。</p><h2 id="家庭·生活"><a href="#家庭·生活" class="headerlink" title="家庭·生活"></a>家庭·生活</h2><p>和朋友出去吃饭的时候，总是会感叹我们活的有点像行尸走肉，除了上班，回家，几乎没有其他的事情去做，不像那些在广场跳街舞，玩滑板，玩摄影的人活的有趣，总是会感叹这才是生活！</p><p>去年也总是被女朋友拉着去北京的各大景点公园玩，但也只是走马观花地游览，今年索性就没有再去过那些地方了，人对于找不到乐趣的事情一直是抗拒的。于是国庆跑到上海玩了几日，除了迪士尼，也并未觉得上海更有趣。</p><p><strong>也该去找到并且去做一件有意义有意思的事情了。</strong></p><h2 id="健康·身体"><a href="#健康·身体" class="headerlink" title="健康·身体"></a>健康·身体</h2><p>想起今年印象最深的一件事，<a href="https://www.zhihu.com/question/305280080">如何看待年仅 25 岁的大疆 DJI 员工或因过劳而猝死家中？</a>，仅仅 25 岁而已！这种情况发生在了同龄人的身上，真的是太可怕了！这件事情也给自己敲响了警钟，保护好自己的身体很重要。  </p><p><strong>保证健康的作息，规律的饮食，合理的运动，很有必要。</strong></p><p>虽然不加班，但是我坐在电脑前时间并不比加班的人少，健康的作息，规律的饮食，这两点都有做到，早睡早起，一日三餐，只是缺乏一些运动。</p><h2 id="学习·成长"><a href="#学习·成长" class="headerlink" title="学习·成长"></a>学习·成长</h2><p>一直找不到学习与生活之间的平衡点，学习的时候，抵抗学习之外的任何事情；不学习的时候，怀有深深的负罪感，但是学习效率总没有期望的那样高。</p><p>合理安排好学习与休闲的关系，又是一项需要自我学习提升之处。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181031131423.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>自然码双拼打字法，是看到知乎上一名大 V 推荐学习的技能，花了不到 3 个小时就能基本掌握。<br>比如要打出“中国”这两个字，如果使用全拼的话，需要输入 zhonggo， 至少需要敲 8 下键盘，而用双拼，只需要输入 vsgo，加上空格选择只需要 5 下。<br>双拼也没有五笔打字那样难以学习，对自己的好处还是显而易见的，少敲击键盘也是保护了自己的手指头。</p><p>之前一直纠结看书的数量，囫囵吞枣地看了一些书，看完的时候几乎已经忘了这本书到底讲了些什么，买的 kindle 现在已经放在角落默默吃灰中……</p><p>今年没有用 kindle 看书，而是买了一些经典的技术实体书来看，看书的效果也比用 kindle 看的效果要好，kindle 还是更适合看小说鸡汤励志书这类书吧！</p><h2 id="工作·事业"><a href="#工作·事业" class="headerlink" title="工作·事业"></a>工作·事业</h2><p>最近这两年，逐渐觉得自己的技术提升速度变得相当慢了，今年一年，在脑海里能马上想起来的就是学习了 ES，搭了个公司公用搜索工程提供网站的搜索，其他的几乎就想不起来了；<br>学习了 Spring Cloud 相关技术，但是没有真正地去实践应用过，都快遗忘了😂，希望能有机会实践吧；<br>最近做旧单体项目的重构为分布式应用的工作，考虑到需要平衡迁移与团队技术，保守地使用了 Dubbo 来实现，做之前觉得很简单啊，就是把之前代码迁移过来，改改就行了，做的时候才发现，如果要按照我期望中的项目规范/代码质量去做，几乎就又是重写了一半代码，又给自己埋了个坑。<br>目前也只有自己在做，希望来年能有一个并肩战斗的伙伴，毕竟只有自己在摸索着行进，还是很慢的。</p><h2 id="2019要做的事情"><a href="#2019要做的事情" class="headerlink" title="2019要做的事情"></a>2019要做的事情</h2><p>量化自己的目标，处理好生活与学习的平衡关系。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;与去年一样，已然 2018 年尾，全国多数城市几乎都大大小小地落过几场雪；北京，却无半点下雪的征兆，初雪应该也要拖延到明年开春之后了吧！&lt;br&gt;与去年一样，立下的目标除了继续坚持写博客之外，其他全部被抛诸脑后；如果不是把写博客这个目标进行了量化，强迫着自己去执行，怕是所有的目标都只是有始无终罢了！&lt;br&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://nullpointer.pw/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>dubbo自定义异常传递信息丢失问题解决</title>
    <link href="http://nullpointer.pw/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E4%BC%A0%E9%80%92%E4%BF%A1%E6%81%AF%E4%B8%A2%E5%A4%B1%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3.html"/>
    <id>http://nullpointer.pw/dubbo自定义异常传递信息丢失问题解决.html</id>
    <published>2018-12-10T22:39:07.000Z</published>
    <updated>2020-01-22T14:36:21.948Z</updated>
    
    <content type="html"><![CDATA[<p>目前计划对已有的单体项目进行组织架构拆分，调研了分布式系统中常用中间件 Dubbo 和 Spring Cloud，选择了 Dubbo，可以对当前现有项目进行平滑升级改造。但是一开始就遇到了麻烦，自定义异常在传递的过程中变成了 RuntimeException，统一异常处理 <strong>GlobalExceptionHandler</strong> 无法获取异常信息。</p><a id="more"></a><h2 id="问题重现"><a href="#问题重现" class="headerlink" title="问题重现"></a>问题重现</h2><p>项目进行统一异常处理，抽取了一个通用异常 <strong>ServiceException</strong>，此异常是非受检异常，即继承于 RuntimeException。调研时发现如果服务提供方即 provider 抛出了 <strong>ServiceException</strong> 异常，consumer 服务消费方就会收到一个 RuntimeException 异常，而 <strong>ServiceException</strong> 异常的内容被包含在了 RuntimeException 的异常堆栈中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[Request processing failed; nested exception is java.lang.RuntimeException: io.github.mosiki.common.exception.ServiceException: missing_required_parameters</span><br><span class="line">io.github.mosiki.common.exception.ServiceException: missing_required_parameters</span><br><span class="line">at io.github.mosiki.provider.HelloService.sayHello(HelloService.java:20)</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java)</span><br></pre></td></tr></table></figure><p>而我的统一异常处理是这样的，只处理 <code>ServiceException</code> 以及 <code>Exception</code>，因此就无法获取到原始异常的信息了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@RestControllerAdvice</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GlobalExceptionHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(ServiceException.class)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">handlerServiceException</span><span class="params">(ServiceException ex)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Result.failure(ex.getCode(), ex.getMessage());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@ExceptionHandler</span>(&#123;Exception.class&#125;)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Result <span class="title">handlerException</span><span class="params">(Exception ex)</span> </span>&#123;</span><br><span class="line">        log.error(<span class="string">"发生未知异常：&#123;&#125;"</span>, ex);</span><br><span class="line">        <span class="keyword">return</span> Result.failure(HttpStatus.INTERNAL_SERVER_ERROR.value(), <span class="string">"服务器打了个小盹儿~请稍候再试"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>访问接口将返回如下，异常中原有信息丢失。<br><img src="http://img12345.5-project.com/blog/20181211061411.png" alt=""></p><p>上网搜索发现，这是因为 dubbo 的异常处理类 <code>com.alibaba.dubbo.rpc.filter.ExceptionFilter</code> 进行处理后的结果，Debug 之后确实如此，dubbo 在此进行了转换。<br><img src="http://img12345.5-project.com/blog/20181211062145.png" alt=""></p><h2 id="问题解决之道"><a href="#问题解决之道" class="headerlink" title="问题解决之道"></a>问题解决之道</h2><p>现在我想要 provider 把自定义的异常原封不动的抛给 consumer 进行处理，于是有了如下思路：</p><ol><li>禁用 provider 的 ExceptionFilter</li><li>让 GlobalExceptionHandler 处理 consumer 的异常</li></ol><p>按照此思路做就很简单了，网上大多文章的办法都比较麻烦，有用 AOP 处理的，甚至还有让自己修改编译源码上传私服的-_-||，本文给出比较简便的方法，提供参考。</p><h2 id="禁用provider的ExceptionFilter"><a href="#禁用provider的ExceptionFilter" class="headerlink" title="禁用provider的ExceptionFilter"></a>禁用provider的ExceptionFilter</h2><p>修改 provider 的配置，我这里使用 yml 配置文件，其他类型如 xml/properties 也同理，设置 provider 的 filter 为 <strong>-exception</strong>，这样异常就不会被处理而是直接抛出了。<br><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">dubbo:</span></span><br><span class="line"><span class="attr">  application:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">provider</span></span><br><span class="line"><span class="attr">  protocol:</span></span><br><span class="line"><span class="attr">    name:</span> <span class="string">dubbo</span></span><br><span class="line"><span class="attr">    port:</span> <span class="number">20100</span></span><br><span class="line"><span class="attr">  registry:</span></span><br><span class="line"><span class="attr">    address:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:2181</span></span><br><span class="line"><span class="attr">    protocol:</span> <span class="string">zookeeper</span></span><br><span class="line"><span class="attr">  provider:</span></span><br><span class="line"><span class="attr">    filter:</span> <span class="bullet">-exception</span></span><br></pre></td></tr></table></figure></p><h2 id="GlobalExceptionHandler捕获ServiceException"><a href="#GlobalExceptionHandler捕获ServiceException" class="headerlink" title="GlobalExceptionHandler捕获ServiceException"></a>GlobalExceptionHandler捕获ServiceException</h2><p>只是禁用了 provider 的 ExceptionHandler 还不能完全达到我们的目的，访问接口，provider 抛出异常 consumer 正确接收为 <strong>ServiceException</strong>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[Request processing failed; nested exception is io.github.mosiki.common.exception.ServiceException: missing_required_parameters] with root cause</span><br><span class="line"></span><br><span class="line">io.github.mosiki.common.exception.ServiceException: missing_required_parameters</span><br><span class="line">at io.github.mosiki.provider.HelloService.sayHello(HelloService.java:20) ~[na:na]</span><br><span class="line">at com.alibaba.dubbo.common.bytecode.Wrapper1.invokeMethod(Wrapper1.java) ~[na:na]</span><br></pre></td></tr></table></figure><p>我们处理一下 GlobalExceptionHandler。</p><p>SpringBoot 主要这个启动类的位置和全局异常处理器的位置，一定要保证异常处理器在启动类的同级包或者在启动类的子包当中，否则异常处理器将不生效！<br><img src="http://img12345.5-project.com/blog/20181211060804.png" alt=""></p><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><p>以上两步完成后，重启服务，访问接口测试。<br><img src="http://img12345.5-project.com/blog/20181211061223.png" alt=""></p><p>拿到了 provider 抛出的原始自定义异常，如此问题就解决了。</p><h2 id="代码下载"><a href="#代码下载" class="headerlink" title="代码下载"></a>代码下载</h2><ul><li><a href="https://github.com/Mosiki/dubbo-exception-example-parent">https://github.com/Mosiki/dubbo-exception-example-parent</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/yangzaizi/article/details/80638306">https://blog.csdn.net/yangzaizi/article/details/80638306</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;目前计划对已有的单体项目进行组织架构拆分，调研了分布式系统中常用中间件 Dubbo 和 Spring Cloud，选择了 Dubbo，可以对当前现有项目进行平滑升级改造。但是一开始就遇到了麻烦，自定义异常在传递的过程中变成了 RuntimeException，统一异常处理 &lt;strong&gt;GlobalExceptionHandler&lt;/strong&gt; 无法获取异常信息。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="dubbo自定义异常" scheme="http://nullpointer.pw/tags/dubbo%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8/"/>
    
      <category term="dubbo异常堆栈被吃" scheme="http://nullpointer.pw/tags/dubbo%E5%BC%82%E5%B8%B8%E5%A0%86%E6%A0%88%E8%A2%AB%E5%90%83/"/>
    
      <category term="dubbo处理自定义异常问题" scheme="http://nullpointer.pw/tags/dubbo%E5%A4%84%E7%90%86%E8%87%AA%E5%AE%9A%E4%B9%89%E5%BC%82%E5%B8%B8%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>IDEA远程仓库版本回滚</title>
    <link href="http://nullpointer.pw/IDEA%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E7%89%88%E6%9C%AC%E5%9B%9E%E6%BB%9A.html"/>
    <id>http://nullpointer.pw/IDEA远程仓库版本回滚.html</id>
    <published>2018-12-02T11:10:42.000Z</published>
    <updated>2020-01-22T14:37:33.066Z</updated>
    
    <content type="html"><![CDATA[<p>使用 git 进行项目的版本控制时，肯定会遇到回滚版本的情况，回滚有两种，一种是本地仓库回滚，另外一种是远程仓库回滚。以下详细讲解两种回滚方式，本文主要讲解远程回滚，以及常见使用误区。</p><a id="more"></a><h2 id="本地仓库回滚"><a href="#本地仓库回滚" class="headerlink" title="本地仓库回滚"></a>本地仓库回滚</h2><p>本地回滚就很简单，只是要撤销 commit 信息即可。可以直接使用 <strong>Reset HEAD</strong>进行回滚。<br><img src="http://img12345.5-project.com/blog/20181202183824.png" alt=""></p><p>HEAD^ 是还原到上一个版本，HEAD^^ 是还原到上上一个版本。<br>Reset Type 有三种：</p><p>mixed 默认方式，只保留源码，回退commit和index信息<br>soft 回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit<br>hard 彻底回退，本地源码也会变成上一个版本内容</p><h2 id="错误的远程仓库回滚方式"><a href="#错误的远程仓库回滚方式" class="headerlink" title="错误的远程仓库回滚方式"></a>错误的远程仓库回滚方式</h2><p>远程仓库代码回滚，如果上 Google 上一搜，基本出来的答案都是使用 <strong>Reset HEAD</strong> 加上 <strong>git push -f</strong> 强制提交的方式。</p><p>我本地测试了一下，如果有两个人同时在这条分支上开发，其中一个人 小 A 如果使用这种方式进行回滚了远程仓库代码，另外一个人 小 B 此时本地还是回滚之前的代码，小 B 那里就会出现本地代码版本高于远程分支版本的情况，此时若小 B 进行了 push 操作，之前小 A 回滚的代码就又会被推送到远程的仓库了。除非小 B 在回滚后，将其本地仓库的版本也进行回滚。才能保证不会把回滚的代码重新 push 回远程仓库，但是如果开发人员多，就无法保证所有开发人员的本地分支都回滚！</p><p><strong>因此，不要使用 git push -f 这种方式来强制回滚远程仓库代码！</strong></p><h2 id="正确的远程仓库回滚方式"><a href="#正确的远程仓库回滚方式" class="headerlink" title="正确的远程仓库回滚方式"></a>正确的远程仓库回滚方式</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181202173041.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如图所示，现在需要将远程仓库回滚到 dev-103 这次提交点。</p><p>选中 <strong>dev-103</strong> 这一行，右键选择 Revert<br><img src="http://img12345.5-project.com/blog/20181202190206.png" alt=""></p><p>这里提示需要 commit</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181202190327.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>commit 之后，push 到远程仓库中。最终结果如下：<br><img src="http://img12345.5-project.com/blog/20181202190438.png" alt=""></p><p>新增了一条提交记录，查看代码已经被回滚了<br><img src="http://img12345.5-project.com/blog/20181202190551.png" alt=""></p><p>其他开发人员如果进行了 pull，其本地仓库也被正确回滚到了 dev-103 提交点，就无需再担心回滚的代码又被重新 push 到远程仓库啦。</p><p>搞定，收工！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;使用 git 进行项目的版本控制时，肯定会遇到回滚版本的情况，回滚有两种，一种是本地仓库回滚，另外一种是远程仓库回滚。以下详细讲解两种回滚方式，本文主要讲解远程回滚，以及常见使用误区。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Git远程仓库回滚" scheme="http://nullpointer.pw/tags/Git%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93%E5%9B%9E%E6%BB%9A/"/>
    
      <category term="Git本地仓库回滚" scheme="http://nullpointer.pw/tags/Git%E6%9C%AC%E5%9C%B0%E4%BB%93%E5%BA%93%E5%9B%9E%E6%BB%9A/"/>
    
  </entry>
  
  <entry>
    <title>ES搜索结果调优</title>
    <link href="http://nullpointer.pw/ES%E6%90%9C%E7%B4%A2%E7%BB%93%E6%9E%9C%E8%B0%83%E4%BC%98.html"/>
    <id>http://nullpointer.pw/ES搜索结果调优.html</id>
    <published>2018-11-29T14:13:58.000Z</published>
    <updated>2020-01-22T14:36:59.810Z</updated>
    
    <content type="html"><![CDATA[<p>自从使用 ElasticSearch 重构了主站的搜索项目之后，之后又陆续接入了其他两个项目，目前使用 SpringBoot 方式跑了一个伪集群，主站使用的时候，比较稳定，没有人反馈说有问题。</p><p>但新接入的一个站点商务反馈说，搜索不够准确，完全匹配的关键词不是排在搜索结果列表首位，跑到搜索上去看了一眼，确实完全匹配的结果分数不是最高的，导致没有排在结果首位，今天就来解决这个问题。</p><a id="more"></a><h2 id="默认匹配查询"><a href="#默认匹配查询" class="headerlink" title="默认匹配查询"></a>默认匹配查询</h2><p>先看看我之前写的查询代码片段，</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MultiMatchQueryBuilder matchQuery = QueryBuilders.multiMatchQuery(query.getQueryString(), <span class="string">"name"</span>, <span class="string">"author"</span>);</span><br><span class="line">boolQuery.must(matchQuery);</span><br></pre></td></tr></table></figure><p>这种写法，完全没有对搜索结果的平分进行干扰，只是按照 ES 的默认分词计算匹配度的结果。</p><h2 id="权重查询"><a href="#权重查询" class="headerlink" title="权重查询"></a>权重查询</h2><p>我尝试了使用权重查询，即提升某些字段的权重，但是设置之后，结果反而更加不尽如人意。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">boolQuery.should(QueryBuilders.matchQuery(<span class="string">"name"</span>, queryString).boost(<span class="number">3.0f</span>));</span><br><span class="line">boolQuery.should(QueryBuilders.matchQuery(<span class="string">"author"</span>, queryString).boost(<span class="number">1</span>.f));</span><br></pre></td></tr></table></figure><p>这样进行查询之后，如果想要查询作者，但是作品名称的权重更高些，所以完全匹配的作者也被排在了后面。</p><h2 id="最佳字段查询"><a href="#最佳字段查询" class="headerlink" title="最佳字段查询"></a>最佳字段查询</h2><p>看了官方博客和一篇博客文章，发现 <code>multi-match-query</code> 的高级查询方式。</p><blockquote><p><code>multi_match</code> 多匹配查询的类型有多种，其中的三种恰巧与 <a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_single_query_string.html#know-your-data">了解我们的数据</a> 中介绍的三个场景对应，即： <code>best_fields</code> 、 <code>most_fields</code> 和 <code>cross_fields</code> （最佳字段、多数字段、跨字段）。</p></blockquote><p>这里我们想要搜索时，完全匹配的关键字排名更靠前，所以这里使用最佳字段 <strong>best_fields</strong> 进行查询</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MultiMatchQueryBuilder multiMatchQuery = QueryBuilders</span><br><span class="line">                    .multiMatchQuery(queryString, <span class="string">"name"</span>, <span class="string">"author"</span>)</span><br><span class="line">                    .type(MultiMatchQueryBuilder.Type.BEST_FIELDS)</span><br><span class="line">                    .tieBreaker(<span class="number">0.1f</span>); </span><br><span class="line">boolQuery.must(multiMatchQuery);</span><br></pre></td></tr></table></figure><p>首先设置 type 为 <strong>BEST_FIELDS</strong>，其次，我们想要完全匹配的分数高点，那么就让没有完全匹配的分文档评分低即可，我这里乘以了 0.1 的系数，系数的范围是 0-1 之间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181128181959.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>加上了系数之后，不完全匹配的文档评分就被拉开了，就达到了我的最终目的。</p><h2 id="最佳字段优化"><a href="#最佳字段优化" class="headerlink" title="最佳字段优化"></a>最佳字段优化</h2><p><strong>2019年01月19日08:01:31 更新</strong><br>通过上一步优化，已经提升了完全匹配文档的评分，但是还不足以拉开评分<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181128181959.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>现在是作品名称/作者两个字段都存在相同的值，但是想让作品名称字段的权重更高点，即搜索相同值的时候，优先搜索出作品名为该值的数据<br>最终优化结果：<br><img src="http://img12345.5-project.com/blog/20190119080610.png" alt=""></p><p>代码实现：  </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHighlightQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    BookQuery query = <span class="keyword">new</span> BookQuery();</span><br><span class="line">    query.setQueryString(<span class="string">"穿越"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复合查询</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">    PageRequest pageRequest = PageRequest.of(query.getPage() - <span class="number">1</span>, query.getSize());</span><br><span class="line">    NativeSearchQueryBuilder queryBuilder = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">            .withQuery(boolQuery)</span><br><span class="line">            .withHighlightFields(</span><br><span class="line">                    <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"name"</span>).preTags(<span class="string">"&lt;span style=\"color:red\"&gt;"</span>).postTags(<span class="string">"&lt;/span&gt;"</span>),</span><br><span class="line">                    <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"author"</span>).preTags(<span class="string">"&lt;span style=\"color:red\"&gt;"</span>).postTags(<span class="string">"&lt;/span&gt;"</span>))</span><br><span class="line">            .withPageable(pageRequest);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为查询条件, 使用 must query 进行查询组合</span></span><br><span class="line"><span class="comment">//        MultiMatchQueryBuilder matchQuery = QueryBuilders.multiMatchQuery(query.getQueryString(), "name", "intro", "author");</span></span><br><span class="line"><span class="comment">//        boolQuery.must(matchQuery);</span></span><br><span class="line">    String queryString = query.getQueryString();</span><br><span class="line">    <span class="comment">// 最佳字段  + 降低除了name之外字段的权重系数</span></span><br><span class="line">    MatchQueryBuilder nameQuery = QueryBuilders.matchQuery(<span class="string">"name"</span>, queryString);</span><br><span class="line">    MatchQueryBuilder authorQuery = QueryBuilders.matchQuery(<span class="string">"author"</span>, queryString).boost(<span class="number">0.8f</span>);</span><br><span class="line">    DisMaxQueryBuilder disMaxQueryBuilder = QueryBuilders.disMaxQuery().add(nameQuery).add(authorQuery);</span><br><span class="line">    queryBuilder.withQuery(disMaxQueryBuilder);</span><br><span class="line"></span><br><span class="line">    NativeSearchQuery searchQuery = queryBuilder.build();</span><br><span class="line">    Page&lt;Book&gt; books = elasticsearchTemplate.queryForPage(searchQuery, Book.class, extResultMapper);</span><br><span class="line"></span><br><span class="line">    books.forEach(e -&gt; log.info(<span class="string">"&#123;&#125;"</span>, e));</span><br><span class="line">    <span class="comment">// &lt;span style="color:red"&gt;穿越&lt;/span&gt;小道人</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要通过 <code>QueryBuilders.disMaxQuery</code> 结合 <code>boost</code> 对非核心字段降低权重来完成</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample">https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/yjf512/p/4897294.html">https://www.cnblogs.com/yjf512/p/4897294.html</a></li><li><a href="https://www.elastic.co/guide/cn/elasticsearch/guide/cn/_best_fields.html#dis-max-query">dis_max 查询</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;自从使用 ElasticSearch 重构了主站的搜索项目之后，之后又陆续接入了其他两个项目，目前使用 SpringBoot 方式跑了一个伪集群，主站使用的时候，比较稳定，没有人反馈说有问题。&lt;/p&gt;
&lt;p&gt;但新接入的一个站点商务反馈说，搜索不够准确，完全匹配的关键词不是排在搜索结果列表首位，跑到搜索上去看了一眼，确实完全匹配的结果分数不是最高的，导致没有排在结果首位，今天就来解决这个问题。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch完全匹配结果调优" scheme="http://nullpointer.pw/tags/ElasticSearch%E5%AE%8C%E5%85%A8%E5%8C%B9%E9%85%8D%E7%BB%93%E6%9E%9C%E8%B0%83%E4%BC%98/"/>
    
      <category term="es查询调优" scheme="http://nullpointer.pw/tags/es%E6%9F%A5%E8%AF%A2%E8%B0%83%E4%BC%98/"/>
    
  </entry>
  
  <entry>
    <title>github代码clone加速</title>
    <link href="http://nullpointer.pw/github%E4%BB%A3%E7%A0%81clone%E5%8A%A0%E9%80%9F.html"/>
    <id>http://nullpointer.pw/github代码clone加速.html</id>
    <published>2018-11-24T08:52:01.000Z</published>
    <updated>2020-04-21T07:47:01.252Z</updated>
    
    <content type="html"><![CDATA[<p>这阵子想看看开源项目 MyBatis 的源码，结果使用 git 的 clone 命令怎么也 clone 不下来，我以为是网速慢，上 Google 一搜，原来 Github 的域名被 DNS 污染了，我说呢怎么访问 Github 一直都很慢，知道了问题原因就解决掉这个恶心的问题</p><a id="more"></a><h2 id="再再更新"><a href="#再再更新" class="headerlink" title="再再更新"></a>再再更新</h2><p>安装油猴以及加速脚本</p><p>油猴安装: <a href="https://www.tampermonkey.net/">https://www.tampermonkey.net/</a></p><p>油猴脚本：<a href="https://greasyfork.org/scripts/398278-github-%E9%95%9C%E5%83%8F%E8%AE%BF%E9%97%AE-%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD">https://greasyfork.org/scripts/398278-github-%E9%95%9C%E5%83%8F%E8%AE%BF%E9%97%AE-%E5%8A%A0%E9%80%9F%E4%B8%8B%E8%BD%BD</a></p><p>直接访问GitHub查看效果。如下图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20200421154536.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><del>与上一次同理，这次也使用的是反向代理达到加速的目的，只不过这次使用的域名非笔者提供的。使用方法：<code>https://github.com.cnpmjs.org/用户名/仓库名</code><br>如：<code>https://github.com.cnpmjs.org/apache/skywalking</code>，则clone地址为：<code>http://github-mirror.bugkiller.org/apache/skywalking.git</code></del></p><h2 id="再次更新"><a href="#再次更新" class="headerlink" title="再次更新"></a>再次更新</h2><p>发现另外一种方式可以实现加速的方式，即通过一台服务器（可以是非国外服务器）通过nginx反向代理GitHub，然后直接访问代理后的地址即可。这种方式适合下载代码的zip包或者仓库里的releases文件，比如<code>https://xxxx.domain.com/Mosiki/github/archive/master.zip</code>。</p><p>具体反向代理的配置读者可以自行查找教程。</p><p>这里给出免费的服务，但是每日会有上限限制，可能会出现无法使用的情况，读者最好自己搭建代理服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://git.vcmq.workers.dev/</span><br></pre></td></tr></table></figure><p>可以参考 <a href="https://mashiro.best/archives/cloudflare-worker/">此文章</a> 自行搭建代理服务</p><h2 id="更新一下"><a href="#更新一下" class="headerlink" title="更新一下"></a>更新一下</h2><p>2019年09月03日更新：</p><p>最近发现用 hosts 方式不太好使了，如果改 hosts 的方式也不起作用的话，可以使用这个绝招了。</p><p>步骤一：fork 你想要 clone 的库</p><p>步骤二：登录<a href="https://gitee.com/">码云</a>，登录成功后，点击网页右上角加号，选择 <strong>从 GitHub 导入仓库</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190903223934.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这个过程码云会让你去 GitHub 授权拉取你的仓库，选择同意就行了。</p><p>步骤三：找到你在 GitHub 中 fork 的仓库选择导入，等待一会儿就行了，如果仓库较大，可能导入会花一些时间。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190903224222.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>步骤四：使用码云的地址进行 clone 即可，国内的速度还是非常快的！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190903224448.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>备注：此方法只适用于临时下载仓库，如果要是提 PR 什么的，还是使用改 hosts 方法或者走代理的方式吧。</p><hr><p>2019年06月16日更新一下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20190616163736.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>看评论有人说不好使，我在 mac 上本地测试了一下（未开启全局代理），红框之上是未指定 hosts 的结果，速度很慢，平均不到 <strong>50k/s</strong> 的速度，红框内是切换到最新 host 之后的结果，速度一直在增加，达到 <strong>3.25MB/s</strong>，效果显而易见。</p><p>Tips: 如果切换到最新 hosts 后还是很慢，可以重新开一个终端尝试，或者断开再重连一下网络，可能是 hosts 还未生效。（switch hosts 在 win 下需要使用管理员身份打开，mac 下需要输入开机密码获得权限）</p><h2 id="加速访问"><a href="#加速访问" class="headerlink" title="加速访问"></a>加速访问</h2><p>在网上搜索一圈，好多文章中提速的方法就是修改 git 的代理配置，前提是有 SS 之类的{代}{理}工具，然而我开了全局{代}{理}，设置了 git 的代理配置，clone 的速度还是很慢，只能到 30kb/s，如果库大点，下个几天几夜都可能😅</p><p>设置代理不好使，就继续搜索解决方法，在 github 上找到一个 issues，其中提供了 github 的 host列表。</p><p><del><a href="#">GitHub中国加速访问</a></del></p><p>随着 issue 找到了一个生成 hosts 的 repo，但是这个 repo 的 hosts 并不是每日更新的，于是自己 fork 了一份，写了个简单 crontab，每日执行生成更新 hosts 文件。</p><p>仓库地址：<strong><a href="https://github.com/Mosiki/github">https://github.com/Mosiki/github</a></strong></p><h2 id="食用方法"><a href="#食用方法" class="headerlink" title="食用方法"></a>食用方法</h2><p>最麻烦的方式就是去手动修改 host 文件，最简单的方式就是下载 <a href="https://oldj.github.io/SwitchHosts/">Switch Host</a> 软件进行 host 修改，跨平台，因为 hosts 文件每日都会自动更新，所以需要本地的 hosts 也能自动更新， 好在 SwitchHosts 提供了远程 hosts 的功能。</p><ol><li><p>复制如下 hosts 地址（测试发现GitHub的网址有可能访问不了，因而更换成了码云的镜像仓库地址）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://gitee.com/Mosiki/github/raw/master/github_hosts.txt</span><br></pre></td></tr></table></figure></li></ol><ol><li><p>新增远程 hosts<br>笔者在 mac 下操作，win 是同理。<br><img src="http://img12345.5-project.com/blog/20190404212331.png" alt=""></p></li><li><p>设置自动更新<br>选择 24 小时即可，第一次添加的时候需要手动点击刷新按钮，刷新获取一下远程的 hosts<br><img src="http://img12345.5-project.com/blog/20190404212810.png" alt=""><br>更新完成之后点击确定保存即可。</p></li><li><p>打开 hosts 开关</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181124164505.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如图设置完，把开关打开就 Ok 了。</p></li></ol><h2 id="测试Clone速度"><a href="#测试Clone速度" class="headerlink" title="测试Clone速度"></a>测试Clone速度</h2><p>由 30kb/s 变成 4M/s 了 😂</p><p>修改后，在 GitHub 的 release 中下载东西也变快了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这阵子想看看开源项目 MyBatis 的源码，结果使用 git 的 clone 命令怎么也 clone 不下来，我以为是网速慢，上 Google 一搜，原来 Github 的域名被 DNS 污染了，我说呢怎么访问 Github 一直都很慢，知道了问题原因就解决掉这个恶心的问题&lt;/p&gt;
    
    </summary>
    
      <category term="日常技巧" scheme="http://nullpointer.pw/categories/%E6%97%A5%E5%B8%B8%E6%8A%80%E5%B7%A7/"/>
    
    
      <category term="github clone慢解决" scheme="http://nullpointer.pw/tags/github-clone%E6%85%A2%E8%A7%A3%E5%86%B3/"/>
    
      <category term="github 下载慢解决" scheme="http://nullpointer.pw/tags/github-%E4%B8%8B%E8%BD%BD%E6%85%A2%E8%A7%A3%E5%86%B3/"/>
    
  </entry>
  
  <entry>
    <title>IDEA之Git分支以及Stash使用</title>
    <link href="http://nullpointer.pw/IDEA%E4%B9%8BGit%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E4%BB%A5%E5%8F%8AStash%E4%BD%BF%E7%94%A8.html"/>
    <id>http://nullpointer.pw/IDEA之Git分支合并以及Stash使用.html</id>
    <published>2018-10-31T00:31:42.000Z</published>
    <updated>2020-01-22T14:37:59.315Z</updated>
    
    <content type="html"><![CDATA[<p>随着公司开发人员的增加，以及多需求的并行开发，功能上线就会碍手碍脚；害怕自己没写完的代码被别人部署到线上，害怕别人代码没写完被自己部署到线上；总之功能上线之前还要和所有开发沟通，能不能部署代码？如果只是几个人的团队倒也无妨，但是开发人员多了，沟通成本就很高了。于是 Git 的分支就发挥它的作用了，本文讲解工作中使用 IDEA 进行分支的管理以及合并，以及其他 Git 使用技巧。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>为了演示，先用 IDEA 创建一个简单工程，提交到 git 远程仓库当中。<br><img src="http://img12345.5-project.com/blog/20181102171518.png" alt=""></p><h2 id="dev-100-分支创建"><a href="#dev-100-分支创建" class="headerlink" title="dev-100 分支创建"></a>dev-100 分支创建</h2><p>现在接到了一个编号为 100 的需求，我们在 master 基础上，创建 dev-100 分支<br><img src="http://img12345.5-project.com/blog/20181102171616.png" alt="">  </p><p>创建新分支 dev-100的同时，并切换到 dev-100 分支。<br><img src="http://img12345.5-project.com/blog/20181102171703.png" alt="">  </p><h2 id="dev-100-分支代码开发"><a href="#dev-100-分支代码开发" class="headerlink" title="dev-100 分支代码开发"></a>dev-100 分支代码开发</h2><p>在 dev-100 分支编写需求编号为 100 的 功能，代码完成后进行 <code>commit</code> 以及 <code>push</code>（<strong>如果这个分支只有你一个人在开发的话，就不用 <code>push</code> 到远程分支了，只需要 <code>commit</code> 即可</strong>）<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20181102171807.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><h2 id="分支合并"><a href="#分支合并" class="headerlink" title="分支合并"></a>分支合并</h2><p>现在我们要把 dev-100 分支上的代码合并到 master 主分支上<br>先切换到 master 分支<br><img src="http://img12345.5-project.com/blog/20181102172230.png" alt=""></p><p>合并 dev-100 分支到 master 分支之前，建议先对 master 代码进行 pull 更新操作，然后再执行 Merge  into Current<br><img src="http://img12345.5-project.com/blog/20181102172650.png" alt=""></p><p>如果没有冲突，dev-100 中的代码就会被合并到 master 分支上了，合并成功后，需要 <code>push</code> 才能推送到远程仓库<br><img src="http://img12345.5-project.com/blog/20181102171807.png" alt=""></p><h2 id="取消分支合并"><a href="#取消分支合并" class="headerlink" title="取消分支合并"></a>取消分支合并</h2><p>合并完成后，但是由于一些问题，我们想要取消本次合并，右键 git，选择 Reset HEAD<br><img src="http://img12345.5-project.com/blog/20181102173946.png" alt=""><br><img src="http://img12345.5-project.com/blog/20181102174125.png" alt=""></p><p>HEAD^ 是还原到上一个版本，HEAD^^ 是还原到上上一个版本。<br>Reset Type 有三种：</p><ul><li>mixed   默认方式，只保留源码，回退commit和index信息</li><li>soft      回退到某个版本，只回退了commit的信息，不会恢复到index file一级。如果还要提交，直接commit</li><li>hard    彻底回退，本地源码也会变成上一个版本内容</li></ul><p>一般使用默认的 mixed 或者粗暴的 hard 方式。<br>我们这里是取消合并，所以选择 <strong><code>Hard</code></strong> 方式，并且是<strong><code>HEAD^</code></strong>还原到上一个版本，回退后恢复了原来 master 的代码。<br><img src="http://img12345.5-project.com/blog/20181102171518.png" alt=""></p><h2 id="解决合并冲突问题"><a href="#解决合并冲突问题" class="headerlink" title="解决合并冲突问题"></a>解决合并冲突问题</h2><p>接下来演示合并冲突，此时是在 master 分支，我们修改文件，并 commit 以及 push 到远程仓库。<br><img src="http://img12345.5-project.com/blog/20181102174704.png" alt=""></p><p>此时再把 dev-100 分支合并到 master 分支就会提示冲突。<br><img src="http://img12345.5-project.com/blog/20181102175031.png" alt=""></p><p>双击冲突文件，处理冲突。<br><img src="http://img12345.5-project.com/blog/20181102175217.png" alt=""><br>处理完成后，点击 apply 即可，如果有多个冲突文件，都按照这种方式处理，这是我们处理完冲突之后的代码。<br><img src="http://img12345.5-project.com/2018110315412022049329.png" alt=""></p><p>dev-100 分支已经被成功合并到 master 了，就可以删除了。可以直接删除远程 dev-100 分支，删除时 IDEA 会提示是否同时删除本地的 dev-100 分支，勾选即可。</p><p>现在我们把分支合并的结果 push 到远程仓库。</p><h2 id="代码暂存之git-stash"><a href="#代码暂存之git-stash" class="headerlink" title="代码暂存之git stash"></a>代码暂存之git stash</h2><p>编号 100 的需求完成之后，现在我们又接到一个新的需求，正在 dev-101 分支进行开发，开发还未完成。<br><img src="http://img12345.5-project.com/blog/20181102180114.png" alt=""></p><p>突然线上出现 bug，需要我们紧急进行修改，于是我们要基于最新的 master 分支新建一个 bug 分支 bug-12，需要先切换到 master 分支，但是当前分支的代码没有commit， 如果直接切换到 master 分支的话，dev-101 分支上的新增代码就会跑到 master 分支，而代码又不能此时 commit ，于是就轮到 stash 出场了。<br><img src="http://img12345.5-project.com/blog/20181102180427.png" alt=""><br>Stash 会保存当前工作进度，会把暂存区和工作区的改动保存起来。<br><img src="http://img12345.5-project.com/20181103154120204424605.png" alt=""><br>添加备注，选择 <strong>CREATE STASH</strong>。你会发现当前工作区内的代码被恢复成了原样。<br><img src="http://img12345.5-project.com/2018110315412022049329.png" alt=""></p><h2 id="代码暂存还原"><a href="#代码暂存还原" class="headerlink" title="代码暂存还原"></a>代码暂存还原</h2><p>此刻切换到 master 分支，并创建 bug-12 分支进行修复 bug，修复完成后合并到 master 分支并 push 到远程仓库，上文已经演示如何合并，在此不再赘述。</p><p>将 bug-12 与 master 合并完成之后，现在要接着写 dev-101 需求代码，首先先切换到 dev-101 分支；<br>但是之前的代码已经被我们放到了 git 的 stash 当中，我们现在要把代码还原到工作区当中。<br>选择 Unstash Changes<br><img src="http://img12345.5-project.com/20181103154120268155941.png" alt=""><br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20181103154120276883579.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><br>选择之前保存的，同时勾选  Pop stash（还原完成后，会自动删除这个 stash），确定后，工作区之前写的代码就又回来了。<br><img src="http://img12345.5-project.com/blog/20181102180114.png" alt=""></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>Stash 利用好了，就可以自如切换分支，面对突如其来的需求也不必烦恼了~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;随着公司开发人员的增加，以及多需求的并行开发，功能上线就会碍手碍脚；害怕自己没写完的代码被别人部署到线上，害怕别人代码没写完被自己部署到线上；总之功能上线之前还要和所有开发沟通，能不能部署代码？如果只是几个人的团队倒也无妨，但是开发人员多了，沟通成本就很高了。于是 Git 的分支就发挥它的作用了，本文讲解工作中使用 IDEA 进行分支的管理以及合并，以及其他 Git 使用技巧。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="IDEA Git分支合并" scheme="http://nullpointer.pw/tags/IDEA-Git%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6/"/>
    
      <category term="IDEA 使用Stash" scheme="http://nullpointer.pw/tags/IDEA-%E4%BD%BF%E7%94%A8Stash/"/>
    
      <category term="IDEA 处理分支合并冲突" scheme="http://nullpointer.pw/tags/IDEA-%E5%A4%84%E7%90%86%E5%88%86%E6%94%AF%E5%90%88%E5%B9%B6%E5%86%B2%E7%AA%81/"/>
    
  </entry>
  
  <entry>
    <title>MongoDB 极简实践入门</title>
    <link href="http://nullpointer.pw/MongoDB%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.html"/>
    <id>http://nullpointer.pw/MongoDB极简实践入门.html</id>
    <published>2018-10-27T01:20:46.000Z</published>
    <updated>2020-01-22T14:41:26.082Z</updated>
    
    <content type="html"><![CDATA[<p>以前学习 MongoDB 时候参考的一篇文章，写的蛮好的，很适合 MongoDB 的入门学习，遂转载过来。</p><a id="more"></a><h1 id="MongoDB-极简实践入门"><a href="#MongoDB-极简实践入门" class="headerlink" title="MongoDB 极简实践入门"></a>MongoDB 极简实践入门</h1><h4 id="1-为什么用MongoDB？"><a href="#1-为什么用MongoDB？" class="headerlink" title="1. 为什么用MongoDB？"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#1-%E4%B8%BA%E4%BB%80%E4%B9%88%E7%94%A8mongodb"></a>1. 为什么用MongoDB？</h4><p>传统的计算机应用大多使用关系型数据库来存储数据，比如大家可能熟悉的MySql, Sqlite等等，它的特点是数据以表格(table)的形式储存起来的。数据库由一张张排列整齐的表格构成，就好像一个Excel表单一样，每个表格会有若干列，比如一个学生信息表，可能包含学号、姓名、性别、入学年份、高考成绩、籍贯等等。而表格的每一排，则是一个个学生的具体信息。在企业级应用和前互联网时代，关系型数据库几乎是不二选择。关系型数据库的特点是有整齐划一的组织，很方便对数据进行描述、插入、搜索。</p><p>想象有一个传统的网上服装商店吧，它的主要的数据可能是储存在一张叫products的表单里，表单可能包含这些列：商品编号(ID)、名称(Name)、商家(brand)、主目录(cate)、子目录(sub-cat)、零售价(price)、是否促销(promotion)等等。如果有一个用户想要查找所有价格低于300元的正在促销的鞋子的编号和名称，则可以执行类似于以下的SQL语句：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT ID, name FROM products WHERE cate=&apos;shoes&apos; AND price&lt;300 and AND promotion=true;</span><br></pre></td></tr></table></figure><p>SQL具备了强大了的深度查询能力，能满足各式各样的查询要求。而如果要对数据进行添加和删除，成本也是非常低的。这些是SQL的优势之一， 但随着互联网的兴起以及数据形式的多样化，四平八稳的SQL表单在一些领域渐渐显现出它的劣势。让我们通过一个例子来说明。考虑一个博客后台系统，如果我们用关系型数据库为每篇博客(article)建一个表单的话，这个表单大概会包括以下这些列：</p><table><thead><tr><th>ID</th><th style="text-align:center">Title</th><th style="text-align:center">Description</th><th style="text-align:center">Author</th><th style="text-align:center">Content</th><th style="text-align:center">Likes</th></tr></thead><tbody><tr><td>A_1</td><td style="text-align:center">Title1</td><td style="text-align:center">Political Article</td><td style="text-align:center">Joe</td><td style="text-align:center">Content 1</td><td style="text-align:center">12</td></tr><tr><td>A_2</td><td style="text-align:center">Title2</td><td style="text-align:center">Humorous Story</td><td style="text-align:center">Sam</td><td style="text-align:center">Content 2</td><td style="text-align:center">50</td></tr></tbody></table><p>这时候用SQL数据库来存储是非常方便的，但假如我们要位每篇文章添加评论功能，会发现每篇文章可能要多篇评论，而且这个数目是动态变化的，而且每篇评论还包括好几项内容：评论的人、评论的时间、以及评论内容。这时候要将这些内容都塞进上述的那个表，就显得很困难。通常的做法是为评论(comment)单独建一个表：</p><table><thead><tr><th>ID</th><th style="text-align:center">Author</th><th style="text-align:center">Time</th><th style="text-align:center">Content</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td>C_1</td><td style="text-align:center">Anna</td><td style="text-align:center">2014-12-26 08:23</td><td style="text-align:center">Really good articles!</td><td style="text-align:center">A_1</td></tr><tr><td>C_2</td><td style="text-align:center">David</td><td style="text-align:center">2014-12-25 09:30</td><td style="text-align:center">I like it!</td><td style="text-align:center">A_1</td></tr></tbody></table><p>类似地，每篇文章可能会有若干标签(tags)。标签本身又是一个表单：</p><table><thead><tr><th>ID</th><th style="text-align:center">Category</th><th style="text-align:center">Tags</th><th style="text-align:center">Content</th><th style="text-align:center">Article</th></tr></thead><tbody><tr><td>T_1</td><td style="text-align:center">Anna</td><td style="text-align:center">2014-12-26 08:23</td><td style="text-align:center">Really good articles!</td><td style="text-align:center">A_1</td></tr><tr><td>T_2</td><td style="text-align:center">David</td><td style="text-align:center">2014-12-25 09:30</td><td style="text-align:center">I like it!</td><td style="text-align:center">A_2</td></tr></tbody></table><p>而博客的表格则要通过foreign key跟这些相关联的表格联系起来(可能还包括作者、出版社等其它表格)。这样一来，当我们做查询的时候，比如说，“找出评论数不少于3的标签为‘政治评论’的作者为Sam的文章”，就会涉及到复杂的跨表查询，需要大量使用<code>join</code>语句。这种跨表查询不仅降低了查询速度，而且这些语句写起来也不简单。</p><p>那么，如果用MongoDB数据库来实现，可以如何设计数据模型呢？很简单，像下面这样<a href="http://www.tutorialspoint.com/mongodb/mongodb_data_modeling.htm">[1]</a>：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">_id: POST_ID</span><br><span class="line">  title: TITLE_OF_POST, </span><br><span class="line">  description: POST_DESCRIPTION,</span><br><span class="line">  author: POST_BY,</span><br><span class="line">  tags: [TAG1, TAG2, TAG3],</span><br><span class="line">  likes: TOTAL_LIKES, </span><br><span class="line">  comments: [</span><br><span class="line">     &#123;</span><br><span class="line">        user:&apos;COMMENT_BY&apos;,</span><br><span class="line">        message: TEXT,</span><br><span class="line">        dateCreated: DATE_TIME,</span><br><span class="line">     &#125;,</span><br><span class="line">     &#123;</span><br><span class="line">        user:&apos;COMMENT_BY&apos;,</span><br><span class="line">        message: TEXT,</span><br><span class="line">        dateCreated: DATE_TIME,</span><br><span class="line">     &#125;</span><br><span class="line">  ]</span><br></pre></td></tr></table></figure><p>在MongoDB里，每篇博客文章以一个文档(document)的形式保存起来，而文档内部包含了很多项目，比如<code>title tags</code>等，每一个项目都是<code>key-value</code>的形式，即有一个项目的名字，比如<code>title</code>，以及它的值<code>TITLE_OF_POST</code>。而重要的是，一个<code>key</code>可以有多个<code>values</code>，他们用<code>[]</code>括起来。</p><p>这种“宽松”的数据存储形式非常灵活，MongoDB不限制每个<code>key</code>对应的<code>values</code>的数目。比如有的文章没有评论，则它的值就是一个空集，完全没有问题；有的文章评论很多，也可以无限制地插入。更灵活的是，MongoDB不要求同一个集合(collection，相当于SQL的table)里面的不同document有相同的key，比如除了上述这种文档组织，有的文档所代表的文章可能没有likes这个项目，再比如有的文章可能有更多的项目，比如可能还有dislikes等等。这些不同的文档都可以灵活地存储在同一个集合下，而且查询起来也异常简单，因为都在一个文档里，不用进行各种跨文档查询。而这种MongoDB式的存储也方便了数据的维护，对于一篇博客文章来说，所有的相关数据都在这个document里面，不用去考虑一个数据操作需要involve多少个表格。</p><p>当然，除了上述的优点，MongoDB还有不少别的优势，比如MongoDB的数据是用JSON(Javascript Object Notation)存储的(就是上面的这种key-value的形式)，而几乎所有的web应用都是基于Javascript的。因此，存储的数据和应用的数据的格式是高度一致的，不需经过转换。更多的优点可以查看：<a href="http://www.tutorialspoint.com/mongodb/mongodb_advantages.htm">[2]</a>。</p><h4 id="2-关于这篇文章"><a href="#2-关于这篇文章" class="headerlink" title="2. 关于这篇文章"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#2-%E5%85%B3%E4%BA%8E%E8%BF%99%E7%AF%87%E6%96%87%E7%AB%A0"></a>2. 关于这篇文章</h4><p>这个极简教程，或者说笔记，并不是一个覆盖MongoDB方方面面的教程。所谓极简的意思，就是只选取那些最重要、最常用的内容进行基于实例的介绍，从而让读者能够在最短的时间内快速上手，并且能顺利地进行后续的纵深的学习。</p><p>具体地说，这个教程的特点是：</p><ul><li>不求全面，只求实用。只覆盖最核心的部分；</li><li>以大量例子为导向；</li><li>一边阅读一边动手操作的话，大约只需要2小时的时间；</li></ul><p>阅读这篇文章不需要有特别的基础，但最好知道数据库的基本概念，如果本身熟悉SQL那就更好啦。</p><h4 id="3-安装与环境"><a href="#3-安装与环境" class="headerlink" title="3. 安装与环境"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#3-%E5%AE%89%E8%A3%85%E4%B8%8E%E7%8E%AF%E5%A2%83"></a>3. 安装与环境</h4><p>MongoDB可以在Windows、Linux、Mac OS X等主流平台运行，而且下载和安装非常简单，非常友好。这篇文档的例子采用MongoDB 2.6版本，均在OS X测试过，有充足的理由相信，在其它平台也能顺利运行。</p><p>Windows的安装和设置可以参考：<a href="http://www.w3cschool.cc/mongodb/mongodb-window-install.html%EF%BC%9B">http://www.w3cschool.cc/mongodb/mongodb-window-install.html；</a></p><p>Linux的安装和设置可以参考：<a href="http://www.w3cschool.cc/mongodb/mongodb-linux-install.html%EF%BC%9B">http://www.w3cschool.cc/mongodb/mongodb-linux-install.html；</a></p><p>Mac OS X下的安装和设置：</p><ul><li>1. 在<a href="https://www.mongodb.org/">https://www.mongodb.org/</a> 下载适合你的Mac的MongoDb;</li><li>2. 下载得到的文件是一个zip文件，解压，然后放到你想到的文件夹，比如/Users/Steven/MongoDB;</li><li>3. 创建一个你喜欢的文件夹来存储你的数据，比如/User/Steven/myData;</li><li>4. 打开Terminal，cd到2里面那个文件夹/Users/Steven/MongoDB，再cd bin;</li><li>5. 输入./mongod –dbpath /User/Steven/myData,等到出现类似“waiting for connections on port 27017”，说明MongoDB服务器已架设好，而数据将储存在myData里面；</li><li>6. 新打开一个Terminal, cd /Users/Steven/MongoDB/bin,然后运行./mongo;顺利的话它将出现一个interactive shell让你进行各种操作，而你的数据将储存在myData里</li></ul><p>如果以上的各个步骤都运行顺利，就可以跳到下一节啦。</p><h4 id="4-创建集合和删除集合"><a href="#4-创建集合和删除集合" class="headerlink" title="4. 创建集合和删除集合"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#4-%E5%88%9B%E5%BB%BA%E9%9B%86%E5%90%88%E5%92%8C%E5%88%A0%E9%99%A4%E9%9B%86%E5%90%88"></a>4. 创建集合和删除集合</h4><p>在上一节执行完步骤6后，你会看到命令行里显示：<code>connecting to: test</code>，这里的<code>test</code>是默认的数据库。这里我们可以新建一个数据库。在命令行里打入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use tutorial</span><br></pre></td></tr></table></figure><p>这样就新建了一个叫做<code>tutorial</code>的数据库。你可以执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><p>来显示当前的数据库。不过这时候由于我们的新数据库是空的，所以会显示类似这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">admin  (empty)</span><br><span class="line">local  0.078GB</span><br></pre></td></tr></table></figure><p>我们试着往我们的数据库里添加一个集合(collection)，MongoDB里的集合和SQL里面的表格是类似的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&apos;author&apos;)</span><br></pre></td></tr></table></figure><p>顺利的话会显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;ok&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><p>表示创建成功。</p><p>你可以再回头执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases</span><br></pre></td></tr></table></figure><p>这时候我们的tutorial集合已经位列其中。你可以再执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show collections</span><br></pre></td></tr></table></figure><p>可以看到创建的集合author也在其中。</p><p>我们暂时不需要author这个集合，所以我们可以通过执行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.author.drop()</span><br></pre></td></tr></table></figure><p>来将其删除。这时候你再执行<code>show collections</code>，就再也看不到我们的author了。</p><p>这一节要记住的点主要只有一个：集合(collection)类似于SQL的表格(table)，类似于Excel的一个个表格。</p><h4 id="5-插入"><a href="#5-插入" class="headerlink" title="5. 插入"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#5-%E6%8F%92%E5%85%A5"></a>5. 插入</h4><p>想象一个精简版的“豆瓣电影”。我们需要创建一个数据库，来存储每部电影的信息，电影的信息包括：</p><ul><li>电影名字</li><li>导演</li><li>主演(可能多个)</li><li>类型标签(可能多个)</li><li>上映日期</li><li>喜欢人数</li><li>不喜欢人数</li><li>用户评论(可能多个)</li></ul><p>显然我们需要先创建一个叫电影的集合：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.createCollection(&apos;movie&apos;)</span><br></pre></td></tr></table></figure><p>然后，我们就可以插入数据了：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">db.movie.insert(</span><br><span class="line"> &#123;</span><br><span class="line">   title: &apos;Forrest Gump&apos;, </span><br><span class="line">   directed_by: &apos;Robert Zemeckis&apos;,</span><br><span class="line">   stars: [&apos;Tom Hanks&apos;, &apos;Robin Wright&apos;, &apos;Gary Sinise&apos;],</span><br><span class="line">   tags: [&apos;drama&apos;, &apos;romance&apos;],</span><br><span class="line">   debut: new Date(1994,7,6,0,0),</span><br><span class="line">   likes: 864367,</span><br><span class="line">   dislikes: 30127,</span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user1&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,10,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My first comment too!&apos;,</span><br><span class="line">         dateCreated: new Date(2013,11,11,6,20),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>请注意，这里插入数据之前，我们并不需要先声明movie这个集合里面有哪些项目。我们直接插入就可以了~这一点和SQL不一样，SQL必须先声明一个table里面有哪些列，而MongoDB不需要。</p><p>把上面的例子复制进命令行应该可以顺利运行，但我强烈建议你手动打一下，或者输入一部你自己喜欢的电影。<code>insert</code>操作有几点需要注意：</p><ul><li>1. 不同key-value需要用逗号隔开，而key:value中间是用冒号；</li><li>2. 如果一个key有多个value，value要用[]。哪怕当前只有一个value，也加上[]以备后续的添加；</li><li>3. 整个“数据块”要用{}括起来；</li></ul><p>如果你在<code>insert</code>之后看到<code>WriteResult({ &quot;nInserted&quot; : 1 })</code>，说明写入成功。</p><p>这个时候你可以用查询的方式来返回数据库中的数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find().pretty()</span><br></pre></td></tr></table></figure><p>这里<code>find()</code>里面是空的，说明我们不做限制和筛选，类似于SQL没有<code>WHERE</code>语句一样。而<code>pretty()</code>输出的是经格式美化后的数据，你可以自己试试没有<code>pretty()</code>会怎么样。</p><p>仔细观察<code>find()</code>的结果，你会发现多了一个叫<code>&#39;_id&#39;</code>的东西，这是数据库自动创建的一个ID号，在同一个数据库里，每个文档的ID号都是不同的。</p><p>我们也可以同时输入多个数据：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line">db.movie.insert([</span><br><span class="line"> &#123;</span><br><span class="line">   title: &apos;Fight Club&apos;, </span><br><span class="line">   directed_by: &apos;David Fincher&apos;,</span><br><span class="line">   stars: [&apos;Brad Pitt&apos;, &apos;Edward Norton&apos;, &apos;Helena Bonham Carter&apos;],</span><br><span class="line">   tags: &apos;drama&apos;,</span><br><span class="line">   debut: new Date(1999,10,15,0,0),</span><br><span class="line">   likes: 224360,</span><br><span class="line">   dislikes: 40127,</span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user3&apos;,</span><br><span class="line">         message: &apos;My first comment&apos;,</span><br><span class="line">         dateCreated: new Date(2008,09,13,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;My first comment too!&apos;,</span><br><span class="line">         dateCreated: new Date(2003,10,11,6,20),</span><br><span class="line">         like: 14 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user7&apos;,</span><br><span class="line">         message: &apos;Good Movie!&apos;,</span><br><span class="line">         dateCreated: new Date(2009,10,11,6,20),</span><br><span class="line">         like: 2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">   title: &apos;Seven&apos;, </span><br><span class="line">   directed_by: &apos;David Fincher&apos;,</span><br><span class="line">   stars: [&apos;Morgan Freeman&apos;, &apos;Brad Pitt&apos;,  &apos;Kevin Spacey&apos;],</span><br><span class="line">   tags: [&apos;drama&apos;,&apos;mystery&apos;,&apos;thiller&apos;],</span><br><span class="line">   debut: new Date(1995,9,22,0,0),</span><br><span class="line">   likes: 134370,</span><br><span class="line">   dislikes: 1037,</span><br><span class="line">   comments: [</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user3&apos;,</span><br><span class="line">         message: &apos;Love Kevin Spacey&apos;,</span><br><span class="line">         dateCreated: new Date(2002,09,13,2,35),</span><br><span class="line">         like: 0 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user2&apos;,</span><br><span class="line">         message: &apos;Good works!&apos;,</span><br><span class="line">         dateCreated: new Date(2013,10,21,6,20),</span><br><span class="line">         like: 14 </span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         user:&apos;user7&apos;,</span><br><span class="line">         message: &apos;Good Movie!&apos;,</span><br><span class="line">         dateCreated: new Date(2009,10,11,6,20),</span><br><span class="line">         like: 2</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br><span class="line">])</span><br></pre></td></tr></table></figure><p>顺利的话会显示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">BulkWriteResult(&#123;</span><br><span class="line">&quot;writeErrors&quot; : [ ],</span><br><span class="line">&quot;writeConcernErrors&quot; : [ ],</span><br><span class="line">&quot;nInserted&quot; : 2,</span><br><span class="line">&quot;nUpserted&quot; : 0,</span><br><span class="line">&quot;nMatched&quot; : 0,</span><br><span class="line">&quot;nModified&quot; : 0,</span><br><span class="line">&quot;nRemoved&quot; : 0,</span><br><span class="line">&quot;upserted&quot; : [ ]</span><br></pre></td></tr></table></figure><p>表面我们成功地插入了两个数据。注意批量插入的格式是这样的：<code>db.movie.insert([{ITEM1},{ITEM2}])</code>。几部电影的外面需要用[]括起来。</p><p>请注意，虽然collection的插入不需要先声明，但表达相同意思的key，名字要一样，比如，如果我们在一个文档里用<code>directed_by</code>来表示导演，则在其它文档也要保持同样的名字(而不是<code>director</code>之类的)。不同的名字不是不可以，技术上完全可行，但会给查询和更新带来困难。</p><p>好了，到这里，我们就有了一个叫tutorial的数据库，里面有一个叫movie的集合，而movie里面有三个记录。接下来我们就可以对其进行查询了。</p><h4 id="6-查询"><a href="#6-查询" class="headerlink" title="6. 查询"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#6-%E6%9F%A5%E8%AF%A2"></a>6. 查询</h4><p>在上一节我们已经接触到最简单的查询<code>db.movie.find().pretty()</code>。MongoDB支持各种各样的深度查询功能。先来一个最简单的例子，找出大卫芬奇(David Fincher)导演的所有电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;directed_by&apos;:&apos;David Fincher&apos;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>将返回《搏击俱乐部》和《七宗罪》两部电影。这种搜索和SQL的<code>WHERE</code>语句是很相似的。</p><p>也可以设置多个条件。比如找出大卫芬奇导演的, 摩根弗里曼主演的电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;directed_by&apos;:&apos;David Fincher&apos;, &apos;stars&apos;:&apos;Morgan Freeman&apos;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>这里两个条件之间，是AND的关系，只有同时满足两个条件的电影才会被输出。同理，可以设置多个的条件，不赘述。</p><p>条件之间也可以是或的关系，比如找出罗宾怀特或摩根弗里曼主演的电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(</span><br><span class="line">&#123;</span><br><span class="line">  $or: </span><br><span class="line">     [  &#123;&apos;stars&apos;:&apos;Robin Wright&apos;&#125;, </span><br><span class="line">        &#123;&apos;stars&apos;:&apos;Morgan Freeman&apos;&#125;</span><br><span class="line">     ]</span><br><span class="line">&#125;).pretty()</span><br></pre></td></tr></table></figure><p>注意这里面稍显复杂的各种括号。</p><p>还可以设置一个范围的搜索，比如找出50万人以上赞的电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;likes&apos;:&#123;$gt:500000&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>同样要注意略复杂的括号。注意，在这些查询里，key的单引号都是可选的，也就是说，上述语句也可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;likes:&#123;$gt:500000&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>类似地，少于二十万人赞的电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;likes:&#123;$lt:200000&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>类似的运算符还有：<code>$lte</code>:小于或等于；<code>$gte</code>:大于或等于；<code>$ne</code>:不等于。</p><p>注意，对于包含多个值的key，同样可以用find来查询。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;tags&apos;:&apos;romance&apos;&#125;)</span><br></pre></td></tr></table></figure><p>将返回《阿甘正传》，虽然其标签既有romance，又有drama，但只要符合一个就可以了。</p><p>如果你确切地知道返回的结果只有一个，也可以用<code>findOne</code>:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.findOne(&#123;&apos;title&apos;:&apos;Forrest Gump&apos;&#125;)</span><br></pre></td></tr></table></figure><p>如果有多个结果，则会按磁盘存储顺序返回第一个。请注意，<code>findOne()</code>自带pretty模式，所以不能再加<code>pretty()</code>，将报错。</p><p>如果结果很多而你只想显示其中一部分，可以用<code>limit()</code>和<code>skip()</code>，前者指明输出的个数，后者指明从第二个结果开始数。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find().limit(2).skip(1).pretty()</span><br></pre></td></tr></table></figure><p>则跳过第一部，从第二部开始选取两部电影。</p><h4 id="7-局部查询"><a href="#7-局部查询" class="headerlink" title="7. 局部查询"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#7-%E5%B1%80%E9%83%A8%E6%9F%A5%E8%AF%A2"></a>7. 局部查询</h4><p>第五节的时候我们讲了<code>find</code>的用法，但对于符合条件的条目，我们都是返回整个JSON文件的。这类似于SQL里面的<code>SELECT *</code>。有的时候，我们需要的，仅仅是部分数据，这个时候，<code>find</code>的局部查询的功能就派上用场了。先来看一个例子，返回tags为drama的电影的名字和首映日期。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;tags&apos;:&apos;drama&apos;&#125;,&#123;&apos;debut&apos;:1,&apos;title&apos;:1&#125;).pretty()</span><br></pre></td></tr></table></figure><p>数据库将返回：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : ObjectId(&quot;549cfb42f685c085f1dd47d4&quot;),</span><br><span class="line">&quot;title&quot; : &quot;Forrest Gump&quot;,</span><br><span class="line">&quot;debut&quot; : ISODate(&quot;1994-08-05T16:00:00Z&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : ObjectId(&quot;549cff96f685c085f1dd47d6&quot;),</span><br><span class="line">&quot;title&quot; : &quot;Fight Club&quot;,</span><br><span class="line">&quot;debut&quot; : ISODate(&quot;1999-11-14T16:00:00Z&quot;)</span><br><span class="line">&#125;</span><br><span class="line">&#123;</span><br><span class="line">&quot;_id&quot; : ObjectId(&quot;549cff96f685c085f1dd47d7&quot;),</span><br><span class="line">&quot;title&quot; : &quot;Seven&quot;,</span><br><span class="line">&quot;debut&quot; : ISODate(&quot;1995-10-21T16:00:00Z&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里find的第二个参数是用来控制输出的，1表示要返回，而0则表示不返回。默认值是0，但<code>_id</code>是例外，因此如果你不想输出<code>_id</code>，需要显式地声明：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;&apos;tags&apos;:&apos;drama&apos;&#125;,&#123;&apos;debut&apos;:1,&apos;title&apos;:1,&apos;_id&apos;:0&#125;).pretty()</span><br></pre></td></tr></table></figure><h4 id="8-更新"><a href="#8-更新" class="headerlink" title="8. 更新"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#8-%E6%9B%B4%E6%96%B0"></a>8. 更新</h4><p>很多情况下你需要更新你的数据库，比如有人对某部电影点了个赞，那么你需要更新相应的数据库。比如有人对《七宗罪》点了个赞，而它本来的赞的个数是134370，那么你需要更新到134371。可以这样操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.update(&#123;title:&apos;Seven&apos;&#125;, &#123;$set:&#123;likes:134371&#125;&#125;)</span><br></pre></td></tr></table></figure><p>第一个大括号里表明要选取的对象，第二个表明要改动的数据。请注意上述的操作相当不现实，因为你首先要知道之前的数字是多少，然后加一，但通常你不读取数据库的话，是不会知道这个数(134370)的。MongoDB提供了一种简便的方法，可以对现有条目进行增量操作。假设又有人对《七宗罪》点了两个赞，则可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.update(&#123;title:&apos;Seven&apos;&#125;, &#123;$inc:&#123;likes:2&#125;&#125;)</span><br></pre></td></tr></table></figure><p>如果你查询的话，会发现点赞数变为134373了，这里用的是<code>$inc</code>。除了增量更新，MongoDB还提供了很多灵活的更新选项，具体可以看：<a href="http://docs.mongodb.org/manual/reference/operator/update-field/">http://docs.mongodb.org/manual/reference/operator/update-field/</a> 。</p><p>注意如果有多部符合要求的电影。则默认只会更新第一个。如果要多个同时更新，要设置<code>{multi:true}</code>，像下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.update(&#123;&#125;, &#123;$inc:&#123;likes:10&#125;&#125;,&#123;multi:true&#125;)</span><br></pre></td></tr></table></figure><p>所有电影的赞数都多了10.</p><p>注意，以上的更新操作会替换掉原来的值，所以如果你是想在原有的值得基础上增加一个值的话，则应该用<code>$push</code>，比如，为《七宗罪》添加一个popular的tags。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.update(&#123;&apos;title&apos;:&apos;Seven&apos;&#125;, &#123;$push:&#123;&apos;tags&apos;:&apos;popular&apos;&#125;&#125;)</span><br></pre></td></tr></table></figure><p>你会发现《七宗罪》现在有四个标签：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;tags&quot; : [</span><br><span class="line">&quot;drama&quot;,</span><br><span class="line">&quot;mystery&quot;,</span><br><span class="line">&quot;thiller&quot;,</span><br><span class="line">&quot;popular&quot;</span><br><span class="line">],</span><br></pre></td></tr></table></figure><h4 id="9-删除"><a href="#9-删除" class="headerlink" title="9. 删除"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#9-%E5%88%A0%E9%99%A4"></a>9. 删除</h4><p>删除的句法和find很相似，比如，要删除标签为romance的电影，则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.remove(&#123;&apos;tags&apos;:&apos;romance&apos;&#125;)</span><br></pre></td></tr></table></figure><p>考虑到我们数据库条目异常稀少，就不建议你执行这条命令了~</p><p>注意，上面的例子会删除所有标签包含romance的电影。如果你只想删除第一个，则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.remove(&#123;&apos;tags&apos;:&apos;romance&apos;&#125;,1)</span><br></pre></td></tr></table></figure><p>如果不加任何限制：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.remove()</span><br></pre></td></tr></table></figure><p>会删除movie这个集合下的所有文档。</p><h4 id="10-索引和排序"><a href="#10-索引和排序" class="headerlink" title="10. 索引和排序"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#10-%E7%B4%A2%E5%BC%95%E5%92%8C%E6%8E%92%E5%BA%8F"></a>10. 索引和排序</h4><p>为文档中的一些key加上索引(index)可以加快搜索速度。这一点不难理解，假如没有没有索引，我们要查找名字为Seven的电影，就必须在所有文档里逐个搜索。而如果对名字这个key加上索引值，则电影名这个字符串和数字建立了映射，这样在搜索的时候就会快很多。排序的时候也是如此，不赘述。MongoDB里面为某个key加上索引的方式很简单，比如我们要对导演这个key加索引，则可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.ensureIndex(&#123;directed_by:1&#125;)</span><br></pre></td></tr></table></figure><p>这里的1是升序索引，如果要降序索引，用-1。</p><p>MongoDB支持对输出进行排序，比如按名字排序：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find().sort(&#123;&apos;title&apos;:1&#125;).pretty()</span><br></pre></td></tr></table></figure><p>同样地，1是升序，-1是降序。默认是1。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.getIndexes()</span><br></pre></td></tr></table></figure><p>将返回所有索引，包括其名字。</p><p>而</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.dropIndex(&apos;index_name&apos;)</span><br></pre></td></tr></table></figure><p>将删除对应的索引。</p><h4 id="11-聚合"><a href="#11-聚合" class="headerlink" title="11. 聚合"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#11-%E8%81%9A%E5%90%88"></a>11. 聚合</h4><p>MongoDB支持类似于SQL里面的<code>GROUP BY</code>操作。比如当有一张学生成绩的明细表时，我们可以找出每个分数段的学生各有多少。为了实现这个操作，我们需要稍加改动我们的数据库。执行以下三条命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">db.movie.update(&#123;title:&apos;Seven&apos;&#125;,&#123;$set:&#123;grade:1&#125;&#125;)</span><br><span class="line">db.movie.update(&#123;title:&apos;Forrest Gump&apos;&#125;,&#123;$set:&#123;grade:1&#125;&#125;)</span><br><span class="line">db.movie.update(&#123;title:&apos;Fight Club&apos;&#125;,&#123;$set:&#123;grade:2&#125;&#125;)</span><br></pre></td></tr></table></figure><p>这几条是给每部电影加一个虚拟的分级，前两部是归类是一级，后一部是二级。</p><p>这里你也可以看到MongoDB的强大之处：可以动态地后续添加各种新项目。</p><p>我们先通过聚合来找出总共有几种级别。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$grade&apos;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><p>注意这里的2和1是指级别，而不是每个级别的电影数。这个例子看得清楚些：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$directed_by&apos;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>这里按照导演名字进行聚合。输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;David Fincher&quot; &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;Robert Zemeckis&quot; &#125;</span><br></pre></td></tr></table></figure><p>接着我们要找出，每个导演的电影数分别有多少：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$directed_by&apos;,num_movie:&#123;$sum:1&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>将会输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;David Fincher&quot;, &quot;num_movie&quot; : 2 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;Robert Zemeckis&quot;, &quot;num_movie&quot; : 1 &#125;</span><br></pre></td></tr></table></figure><p>注意$sum后面的1表示只是把电影数加起来，但我们也可以统计别的数据，比如两位导演谁的赞比较多：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$directed_by&apos;,num_likes:&#123;$sum:&apos;$likes&apos;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>输出：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&#123; &quot;_id&quot; : &quot;David Fincher&quot;, &quot;num_likes&quot; : 358753 &#125;</span><br><span class="line">&#123; &quot;_id&quot; : &quot;Robert Zemeckis&quot;, &quot;num_likes&quot; : 864377 &#125;</span><br></pre></td></tr></table></figure><p>注意这些数据都纯属虚构啊！</p><p>除了<code>$sum</code>，还有其它一些操作。比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$directed_by&apos;,num_movie:&#123;$avg:&apos;$likes&apos;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>统计平均的赞。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.aggregate([&#123;$group:&#123;_id:&apos;$directed_by&apos;,num_movie:&#123;$first:&apos;$likes&apos;&#125;&#125;&#125;])</span><br></pre></td></tr></table></figure><p>返回每个导演的电影中的第一部的赞数。</p><p>其它各种操作可以参考：<a href="http://docs.mongodb.org/manual/reference/operator/aggregation/group/">http://docs.mongodb.org/manual/reference/operator/aggregation/group/</a> 。</p><h4 id="12-All-or-Nothing"><a href="#12-All-or-Nothing" class="headerlink" title="12. All or Nothing?"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#12-all-or-nothing"></a>12. All or Nothing?</h4><p>MongoDB支持单个文档内的原子化操作(atomic operation)，这是说，可以将多条关于同一个文档的指令放到一起，他们要么一起执行，要么都不执行。而不会执行到一半。有些场合需要确保多条执行一起顺次执行。比如一个场景：一个电商网站，用户查询某种商品的剩余数量，以及用户购买该种商品，这两个操作，必须放在一起执行。不然的话，假定我们先执行剩余数量的查询，这是假定为1，用户接着购买，但假如这两个操作之间还加入了其它操作，比如另一个用户抢先购买了，那么原先购买用户的购买的行为就会造成数据库的错误，因为实际上这种商品以及没有存货了。但因为查询剩余数量和购买不是在一个“原子化操作”之内，因此会发生这样的错误<a href="http://www.tutorialspoint.com/mongodb/mongodb_atomic_operations.htm">[2]</a>。</p><p>MongoDB提供了<code>findAndModify</code>的方法来确保atomic operation。比如这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">db.movie.findAndModify(</span><br><span class="line">&#123;</span><br><span class="line">query:&#123;&apos;title&apos;:&apos;Forrest Gump&apos;&#125;,</span><br><span class="line">update:&#123;$inc:&#123;likes:10&#125;&#125;</span><br><span class="line">&#125;</span><br><span class="line">      )</span><br></pre></td></tr></table></figure><p>query是查找出匹配的文档，和find是一样的，而update则是更新likes这个项目。注意由于MongoDB只支持单个文档的atomic operation，因此如果query出多于一个文档，则只会对第一个文档进行操作。</p><p><code>findAndModify</code>还支持更多的操作，具体见：<a href="http://docs.mongodb.org/manual/reference/command/findAndModify/%E3%80%82">http://docs.mongodb.org/manual/reference/command/findAndModify/。</a></p><h4 id="13-文本搜索"><a href="#13-文本搜索" class="headerlink" title="13. 文本搜索"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#13-%E6%96%87%E6%9C%AC%E6%90%9C%E7%B4%A2"></a>13. 文本搜索</h4><p>除了前面介绍的各种深度查询功能，MongoDB还支持文本搜索。对文本搜索之前，我们需要先对要搜索的key建立一个text索引。假定我们要对标题进行文本搜索，我们可以先这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.ensureIndex(&#123;title:&apos;text&apos;&#125;)</span><br></pre></td></tr></table></figure><p>接着我们就可以对标题进行文本搜索了，比如，查找带有”Gump”的标题：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;$text:&#123;$search:&quot;Gump&quot;&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>注意text和search前面的$符号。</p><p>这个例子里，文本搜索作用不是非常明显。但假设我们要搜索的key是一个长长的文档，这种text search的方便性就显现出来了。MongoDB目前支持15种语言的文本搜索。</p><h4 id="14-正则表达式"><a href="#14-正则表达式" class="headerlink" title="14. 正则表达式"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#14-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F"></a>14. 正则表达式</h4><p>MongoDB还支持基于正则表达式的查询。如果不知道正则表达式是什么，可以参考<a href="http://en.wikipedia.org/wiki/Regular_expression">Wikipedia</a>。这里简单举几个例子。比如，查找标题以<code>b</code>结尾的电影信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;title:&#123;$regex:&apos;.*b$&apos;&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p>也可以写成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;title:/.*b$/&#125;).pretty()</span><br></pre></td></tr></table></figure><p>查找含有’Fight’标题的电影：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;title:/Fight/&#125;).pretty()</span><br></pre></td></tr></table></figure><p>注意以上匹配都是区分大小写的，如果你要让其不区分大小写，则可以：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">db.movie.find(&#123;title:&#123;$regex:&apos;fight.*b&apos;,$options:&apos;$i&apos;&#125;&#125;).pretty()</span><br></pre></td></tr></table></figure><p><code>$i</code>是insensitive的意思。这样的话，即使是小写的fight，也能搜到了。</p><h4 id="15-后记"><a href="#15-后记" class="headerlink" title="15. 后记"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#15-%E5%90%8E%E8%AE%B0"></a>15. 后记</h4><p>至此，MongoDB的最基本的内容就介绍得差不多了。如果有什么遗漏的以后我会补上來。如果你一路看到底完全了这个入门教程，恭喜你，你一定是一个有毅力的人。</p><p>把这个文档过一遍，不会让你变成一个MongoDB的专家(如果会那就太奇怪了)。但如果它能或多或少减少你上手的时间，或者让你意识到“咦，MongoDB其实没那么复杂”，那么这个教程的目的也就达到啦。</p><p>这个文档是匆忙写就的，出错简直是一定的。如果您发现了任何错误或者有关于本文的任何建议，麻烦发邮件给我（stevenslxie at gmail.com）或者在GitHub上直接交流，不胜感激。</p><h4 id="转载声明"><a href="#转载声明" class="headerlink" title="转载声明"></a><a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md#%E8%BD%AC%E8%BD%BD%E5%A3%B0%E6%98%8E"></a>转载声明</h4><p>如果你喜欢这篇文章，可以随意转载。但请</p><ul><li>标明原作者StevenSLXie;</li><li>标明原链接(<a href="https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md">https://github.com/StevenSLXie/Tutorials-for-Web-Developers/blob/master/MongoDB%20%E6%9E%81%E7%AE%80%E5%AE%9E%E8%B7%B5%E5%85%A5%E9%97%A8.md</a>);</li><li>在可能的情况下请保持文本显示的美观。比如，请不要直接一键复制到博客之类，因为代码的显示效果可能非常糟糕;</li><li>请将这个转载声明包含进来；</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;以前学习 MongoDB 时候参考的一篇文章，写的蛮好的，很适合 MongoDB 的入门学习，遂转载过来。&lt;/p&gt;
    
    </summary>
    
      <category term="转载" scheme="http://nullpointer.pw/categories/%E8%BD%AC%E8%BD%BD/"/>
    
    
      <category term="mongodb" scheme="http://nullpointer.pw/tags/mongodb/"/>
    
  </entry>
  
  <entry>
    <title>Java生成sitemap网站地图</title>
    <link href="http://nullpointer.pw/Java%E7%94%9F%E6%88%90sitemap%E7%BD%91%E7%AB%99%E5%9C%B0%E5%9B%BE.html"/>
    <id>http://nullpointer.pw/Java生成sitemap网站地图.html</id>
    <published>2018-10-21T12:47:31.000Z</published>
    <updated>2020-01-22T14:39:44.774Z</updated>
    
    <content type="html"><![CDATA[<p>sitemap 是什么？对应没有接触过网站 SEO 的同学可能不知道，这里引用一下百度站长的一段解释。</p><blockquote><p>Sitemap（即站点地图）就是您网站上各网页的列表。创建并提交Sitemap有助于百度发现并了解您网站上的所有网页。您还可以使用Sitemap提供有关您网站的其他信息，如上次更新日期、Sitemap文件的更新频率等，供百度Spider参考</p></blockquote><p>简单来说，sitemap 就是搜索引擎爬虫便于爬取到网站内的所有网页。</p><a id="more"></a><h2 id="SEO之初"><a href="#SEO之初" class="headerlink" title="SEO之初"></a>SEO之初</h2><p>之前特意通过 <code>site</code> 指令查询过公司同行业网站的收录情况，发现搜索引擎对于我司的网站收录数量真的不是差了一星半点-.-，原因嘛，就是一直没有专门的人做 SEO 优化工作。</p><p>前几个月我倒是生成了网站的一部分 sitemap 提交到神马搜索站长平台，但是明明是按照官方文档格式生成的，却一直提示格式不对，也不知道什么情况，也没有官方反馈渠道，就不了了之了。最近公司新招了 SEO 专员，于是便有了定时生成 sitemap 文件的需求。这种生成的文件一般都是对外直接可以访问的，可以通过 nginx 配置静态资源文件来完成。</p><h2 id="需求探讨"><a href="#需求探讨" class="headerlink" title="需求探讨"></a>需求探讨</h2><p>sitemap 的格式一般是 XML 格式的，第一反应就是可以使用 DOM4J 来完成，但是做 SEO 的同事说了，因为 sitemap 文件的限制，同一个 sitemap 文件最多有 5 万条 URL，超出 5 万条，就应该放入到下一个 sitemap 文件当中去。通过 DOM4J 来做的话，还需要判断条数感觉有点麻烦(懒)，就上 gayhub 搜了一下相关的轮子 generate sitemap，找到了现成的轮子 <strong><a href="https://github.com/dfabulich/sitemapgen4j">sitemapgen4j</a></strong>，项目的 README 中使用方法写的比较完善，这里不再多说。</p><p>为什么文档很完善的情况下，我要写这篇博客呢？(10月第一篇，凑数的(逃~)</p><p>上文提到了，如果超出了 5 万条需要写入另外一个 sitemap 当中，这个功能 sitemapgen4j 已经替我们实现了，无需担心。如果超出，生成的文件就像是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">- article1.xml</span><br><span class="line">- article2.xml</span><br><span class="line">- article3.xml</span><br><span class="line">- article4.xml</span><br></pre></td></tr></table></figure></p><p>这样的话，在站长平台这里，如果新增了文件就要新增一条sitemap 网址记录，很麻烦。</p><p><img src="http://img12345.5-project.com/2018102115401243528566.png" alt=""></p><p>好在，搜索引擎考虑到了这种问题，有相应的解决方法。</p><p><img src="http://img12345.5-project.com/20181021154012451648209.png" alt=""></p><p>我们把每次生成的 sitemap 文件的地址，添加到一个 sitemap 索引文件当中去，这样，我们只需要向平台提交一个 sitemap 索引文件的地址即可。</p><p>不多说，代码见。</p><h2 id="生成-sitemap-文件"><a href="#生成-sitemap-文件" class="headerlink" title="生成 sitemap 文件"></a>生成 sitemap 文件</h2><p>首先引入 sitemapgen4j 依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.dfabulich<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>sitemapgen4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>编写生成 sitemap 代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generateSitemap</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    String tempPath = <span class="string">"/home/seo"</span>;</span><br><span class="line">    <span class="comment">//String tempPath = System.getProperty("java.io.tmpdir") + File.separator + "/seo/";</span></span><br><span class="line">    File file = <span class="keyword">new</span> File(tempPath);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        file.mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    String domain = <span class="string">"https://www.domain.com"</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        WebSitemapGenerator g1 = WebSitemapGenerator.builder(domain, file)</span><br><span class="line">                .fileNamePrefix(<span class="string">"article"</span>).build();</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">            WebSitemapUrl url = <span class="keyword">new</span> WebSitemapUrl.Options(domain + <span class="string">"/article/"</span> + i ).lastMod(date).build();</span><br><span class="line">            g1.addUrl(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        WebSitemapGenerator g2 = WebSitemapGenerator.builder(domain, file)</span><br><span class="line">                .fileNamePrefix(<span class="string">"issue"</span>).build();</span><br><span class="line">        Date date2 = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; <span class="number">21</span>; i++) &#123;</span><br><span class="line">            WebSitemapUrl url = <span class="keyword">new</span> WebSitemapUrl.Options(domain + <span class="string">"/issue/"</span> + i ).lastMod(date2).build();</span><br><span class="line">            g2.addUrl(url);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; fileNames = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 sitemap 文件</span></span><br><span class="line">        List&lt;File&gt; articleFiles = g1.write();</span><br><span class="line">        articleFiles.forEach(e -&gt; fileNames.add(e.getName()));</span><br><span class="line">        List&lt;File&gt; issueFiles = g2.write();</span><br><span class="line">        issueFiles.forEach(e -&gt; fileNames.add(e.getName()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 构造 sitemap_index 生成器</span></span><br><span class="line">        W3CDateFormat dateFormat = <span class="keyword">new</span> W3CDateFormat(W3CDateFormat.Pattern.DAY);</span><br><span class="line">        SitemapIndexGenerator sitemapIndexGenerator = <span class="keyword">new</span> SitemapIndexGenerator</span><br><span class="line">                .Options(domain, <span class="keyword">new</span> File(tempPath + <span class="string">"sitemap_index.xml"</span>))</span><br><span class="line">                .dateFormat(dateFormat)</span><br><span class="line">                .autoValidate(<span class="keyword">true</span>)</span><br><span class="line">                .build();</span><br><span class="line"></span><br><span class="line">        fileNames.forEach(e -&gt; &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 组装 sitemap 文件 URL 地址</span></span><br><span class="line">                sitemapIndexGenerator.addUrl(domain + <span class="string">"/"</span> + e);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (MalformedURLException e1) &#123;</span><br><span class="line">                e1.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 生成 sitemap_index 文件</span></span><br><span class="line">        sitemapIndexGenerator.write();</span><br><span class="line"></span><br><span class="line">    &#125; <span class="keyword">catch</span> (MalformedURLException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="通过-Nginx-提供给外部访问"><a href="#通过-Nginx-提供给外部访问" class="headerlink" title="通过 Nginx 提供给外部访问"></a>通过 Nginx 提供给外部访问</h2><p>文件已经生成了，就需要对外提供访问了，这里使用 nginx 来实现，如果用 apache 也是可以的。</p><p>上文生成的文件我放在了 <strong>/home/seo</strong> 目录下，文件有<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- seo</span><br><span class="line">    - article1.xml</span><br><span class="line">    - article2.xml</span><br><span class="line">    - article3.xml</span><br><span class="line">    - article4.xml</span><br><span class="line">    - sitemap_index.xml</span><br></pre></td></tr></table></figure></p><p>现在修改 nginx 配置文件，这里说明一下，因为 sitemap 生成一份就可以了，但是要通过域名能直接访问到，所以需要在 nginx 跳转一下到有 sitemap 文件的服务器。</p><p>存放 sitemap 文件的 nginx 配置如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          8888;</span><br><span class="line">    server_name     111.112.113.114;</span><br><span class="line">    charset utf8;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        alias /home/seo/;</span><br><span class="line">        sendfile on;</span><br><span class="line">        autoindex on;</span><br><span class="line">        autoindex_exact_size off;</span><br><span class="line">        autoindex_localtime on;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>根域名的 nginx 配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen          80;</span><br><span class="line">    server_name     www.domain.com;</span><br><span class="line">    charset utf8;</span><br><span class="line"></span><br><span class="line">    access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">    location /seo/ &#123;</span><br><span class="line">        proxy_pass http://111.112.113.114:8888;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://homeServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意: 第一个 location块 中的 proxy_pass 行尾有个 /</strong></p><p>www.domain.com/seo/sitemap_index.xml<br>就会在 www.domain.com 这里直接反代到 111.112.113.114 这台服务器上了。</p><p>站长平台只用提交这一个 URL <strong>www.domain.com/seo/sitemap_index.xml</strong> 即可。</p><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;sitemap 是什么？对应没有接触过网站 SEO 的同学可能不知道，这里引用一下百度站长的一段解释。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Sitemap（即站点地图）就是您网站上各网页的列表。创建并提交Sitemap有助于百度发现并了解您网站上的所有网页。您还可以使用Sitemap提供有关您网站的其他信息，如上次更新日期、Sitemap文件的更新频率等，供百度Spider参考&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;简单来说，sitemap 就是搜索引擎爬虫便于爬取到网站内的所有网页。&lt;/p&gt;
    
    </summary>
    
      <category term="seo" scheme="http://nullpointer.pw/categories/seo/"/>
    
    
      <category term="java生成sitemap" scheme="http://nullpointer.pw/tags/java%E7%94%9F%E6%88%90sitemap/"/>
    
      <category term="sitemapgen4j生成sitemap" scheme="http://nullpointer.pw/tags/sitemapgen4j%E7%94%9F%E6%88%90sitemap/"/>
    
      <category term="seo" scheme="http://nullpointer.pw/tags/seo/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮.html</id>
    <published>2018-09-17T13:27:03.000Z</published>
    <updated>2020-01-22T14:32:27.911Z</updated>
    
    <content type="html"><![CDATA[<p>前面几篇文章详细讲解了 ElasticSearch 的搭建以及使用 SpringDataElasticSearch 来完成搜索查询，但是搜索一般都会有搜索关键字高亮的功能，今天我们把它给加上。</p><a id="more"></a><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><p>SpringDataElasticSearch 的基本使用可以看我的上一篇文章 <a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a>，本文就不再赘述。</p><h2 id="高亮关键字实现"><a href="#高亮关键字实现" class="headerlink" title="高亮关键字实现"></a>高亮关键字实现</h2><p>前文查询是通过写一个接口来继承 ElasticsearchRepository 来实现的，但是如果要实现高亮，我们就不能这样做了，我们需要使用到 <strong>ElasticsearchTemplate</strong>来完成。</p><p>查看这个类的源码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ElasticsearchTemplate</span> <span class="keyword">implements</span> <span class="title">ElasticsearchOperations</span>, <span class="title">ApplicationContextAware</span> </span>&#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，ElasticsearchTemplate 实现了接口 <strong>ApplicationContextAware</strong>，所以这个类是被 Spring 管理的，可以在类里面直接注入使用。</p><p>代码如下:<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighlightBookRepositoryTest</span> <span class="keyword">extends</span> <span class="title">EsSearchApplicationTests</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> ElasticsearchTemplate elasticsearchTemplate;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ExtResultMapper extResultMapper;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testHighlightQuery</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        BookQuery query = <span class="keyword">new</span> BookQuery();</span><br><span class="line">        query.setQueryString(<span class="string">"穿越"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 复合查询</span></span><br><span class="line">        BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 以下为查询条件, 使用 must query 进行查询组合</span></span><br><span class="line">        MultiMatchQueryBuilder matchQuery = QueryBuilders.multiMatchQuery(query.getQueryString(), <span class="string">"name"</span>, <span class="string">"intro"</span>, <span class="string">"author"</span>);</span><br><span class="line">        boolQuery.must(matchQuery);</span><br><span class="line"></span><br><span class="line">        PageRequest pageRequest = PageRequest.of(query.getPage() - <span class="number">1</span>, query.getSize());</span><br><span class="line"></span><br><span class="line">        NativeSearchQuery searchQuery = <span class="keyword">new</span> NativeSearchQueryBuilder()</span><br><span class="line">                .withQuery(boolQuery)</span><br><span class="line">                .withHighlightFields(</span><br><span class="line">                        <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"name"</span>).preTags(<span class="string">"&lt;span style=\"color:red\"&gt;"</span>).postTags(<span class="string">"&lt;/span&gt;"</span>),</span><br><span class="line">                        <span class="keyword">new</span> HighlightBuilder.Field(<span class="string">"author"</span>).preTags(<span class="string">"&lt;span style=\"color:red\"&gt;"</span>).postTags(<span class="string">"&lt;/span&gt;"</span>))</span><br><span class="line">                .withPageable(pageRequest)</span><br><span class="line">                .build();</span><br><span class="line">        Page&lt;Book&gt; books = elasticsearchTemplate.queryForPage(searchQuery, Book.class, extResultMapper);</span><br><span class="line"></span><br><span class="line">        books.forEach(e -&gt; log.info(<span class="string">"&#123;&#125;"</span>, e));</span><br><span class="line">        <span class="comment">// &lt;span style="color:red"&gt;穿越&lt;/span&gt;小道人</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意这里 的<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Page&lt;Book&gt; books = elasticsearchTemplate.queryForPage(searchQuery, Book.class, extResultMapper);</span><br></pre></td></tr></table></figure></p><p>这里返回的是分页对象。<br>查询方式和上文的差不多，只不过是是 Repository 变成了 ElasticsearchTemplate，操作方式也大同小异。</p><p>这里用到了 ExtResultMapper，请接着看下文。</p><h2 id="自定义ResultMapper"><a href="#自定义ResultMapper" class="headerlink" title="自定义ResultMapper"></a>自定义ResultMapper</h2><p>ResultMapper 是用于将 ES 文档转换成 Java 对象的映射类，因为 SpringDataElasticSearch 默认的的映射类 DefaultResultMapper 不支持高亮，因此，我们需要自己定义一个 ResultMapper。</p><p>复制 DefaultResultMapper 类，重命名为 ExtResultMapper，对构造方法名称修改为正确的值。</p><p>新增一个方法，用于将高亮的内容赋值给需要转换的 Java 对象内。</p><p>在 mapResults 方法内调用这个方法。</p><p><strong>注意：这个类可以直接拷贝到你的项目中直接使用！</strong><br>我写这么多，只是想说明为什么这个类是这样的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonEncoding;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonFactory;</span><br><span class="line"><span class="keyword">import</span> com.fasterxml.jackson.core.JsonGenerator;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.PropertyUtils;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.GetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.MultiGetItemResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.get.MultiGetResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.action.search.SearchResponse;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.common.text.Text;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHit;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.SearchHitField;</span><br><span class="line"><span class="keyword">import</span> org.elasticsearch.search.fetch.subphase.highlight.HighlightField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.domain.Pageable;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.ElasticsearchException;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.Document;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.annotations.ScriptedField;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.AbstractResultMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.DefaultEntityMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.EntityMapper;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.aggregation.AggregatedPage;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.aggregation.impl.AggregatedPageImpl;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.elasticsearch.core.mapping.ElasticsearchPersistentProperty;</span><br><span class="line"><span class="keyword">import</span> org.springframework.data.mapping.context.MappingContext;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.Assert;</span><br><span class="line"><span class="keyword">import</span> org.springframework.util.StringUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationTargetException;</span><br><span class="line"><span class="keyword">import</span> java.nio.charset.Charset;</span><br><span class="line"><span class="keyword">import</span> java.util.*;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 类名称：ExtResultMapper</span></span><br><span class="line"><span class="comment"> * 类描述：自定义结果映射类</span></span><br><span class="line"><span class="comment"> * 创建人：WeJan</span></span><br><span class="line"><span class="comment"> * 创建时间：2018-09-13 20:47</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ExtResultMapper</span> <span class="keyword">extends</span> <span class="title">AbstractResultMapper</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> MappingContext&lt;? extends ElasticsearchPersistentEntity&lt;?&gt;, ElasticsearchPersistentProperty&gt; mappingContext;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtResultMapper</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> DefaultEntityMapper());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtResultMapper</span><span class="params">(MappingContext&lt;? extends ElasticsearchPersistentEntity&lt;?&gt;, ElasticsearchPersistentProperty&gt; mappingContext)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="keyword">new</span> DefaultEntityMapper());</span><br><span class="line">        <span class="keyword">this</span>.mappingContext = mappingContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtResultMapper</span><span class="params">(EntityMapper entityMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entityMapper);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ExtResultMapper</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            MappingContext&lt;? extends ElasticsearchPersistentEntity&lt;?&gt;, ElasticsearchPersistentProperty&gt; mappingContext,</span></span></span><br><span class="line"><span class="function"><span class="params">            EntityMapper entityMapper)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(entityMapper);</span><br><span class="line">        <span class="keyword">this</span>.mappingContext = mappingContext;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">AggregatedPage&lt;T&gt; <span class="title">mapResults</span><span class="params">(SearchResponse response, Class&lt;T&gt; clazz, Pageable pageable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> totalHits = response.getHits().totalHits();</span><br><span class="line">        List&lt;T&gt; results = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (SearchHit hit : response.getHits()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (hit != <span class="keyword">null</span>) &#123;</span><br><span class="line">                T result = <span class="keyword">null</span>;</span><br><span class="line">                <span class="keyword">if</span> (StringUtils.hasText(hit.sourceAsString())) &#123;</span><br><span class="line">                    result = mapEntity(hit.sourceAsString(), clazz);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    result = mapEntity(hit.getFields().values(), clazz);</span><br><span class="line">                &#125;</span><br><span class="line">                setPersistentEntityId(result, hit.getId(), clazz);</span><br><span class="line">                setPersistentEntityVersion(result, hit.getVersion(), clazz);</span><br><span class="line">                populateScriptFields(result, hit);</span><br><span class="line">               </span><br><span class="line">               <span class="comment">// 高亮查询</span></span><br><span class="line">                populateHighLightedFields(result, hit.getHighlightFields());</span><br><span class="line">                results.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> AggregatedPageImpl&lt;T&gt;(results, pageable, totalHits, response.getAggregations(), response.getScrollId());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt;  <span class="function"><span class="keyword">void</span> <span class="title">populateHighLightedFields</span><span class="params">(T result, Map&lt;String, HighlightField&gt; highlightFields)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (HighlightField field : highlightFields.values()) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                PropertyUtils.setProperty(result, field.getName(), concat(field.fragments()));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InvocationTargetException | IllegalAccessException | NoSuchMethodException e) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to set highlighted value for field: "</span> + field.getName()</span><br><span class="line">                        + <span class="string">" with value: "</span> + Arrays.toString(field.getFragments()), e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">concat</span><span class="params">(Text[] texts)</span> </span>&#123;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (Text text : texts) &#123;</span><br><span class="line">            sb.append(text.toString());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">populateScriptFields</span><span class="params">(T result, SearchHit hit)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (hit.getFields() != <span class="keyword">null</span> &amp;&amp; !hit.getFields().isEmpty() &amp;&amp; result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (java.lang.reflect.Field field : result.getClass().getDeclaredFields()) &#123;</span><br><span class="line">                ScriptedField scriptedField = field.getAnnotation(ScriptedField.class);</span><br><span class="line">                <span class="keyword">if</span> (scriptedField != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    String name = scriptedField.name().isEmpty() ? field.getName() : scriptedField.name();</span><br><span class="line">                    SearchHitField searchHitField = hit.getFields().get(name);</span><br><span class="line">                    <span class="keyword">if</span> (searchHitField != <span class="keyword">null</span>) &#123;</span><br><span class="line">                        field.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            field.set(result, searchHitField.getValue());</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to set scripted field: "</span> + name + <span class="string">" with value: "</span></span><br><span class="line">                                    + searchHitField.getValue(), e);</span><br><span class="line">                        &#125; <span class="keyword">catch</span> (IllegalAccessException e) &#123;</span><br><span class="line">                            <span class="keyword">throw</span> <span class="keyword">new</span> ElasticsearchException(<span class="string">"failed to access scripted field: "</span> + name, e);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function">T <span class="title">mapEntity</span><span class="params">(Collection&lt;SearchHitField&gt; values, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mapEntity(buildJSONFromFields(values), clazz);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">buildJSONFromFields</span><span class="params">(Collection&lt;SearchHitField&gt; values)</span> </span>&#123;</span><br><span class="line">        JsonFactory nodeFactory = <span class="keyword">new</span> JsonFactory();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ByteArrayOutputStream stream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            JsonGenerator generator = nodeFactory.createGenerator(stream, JsonEncoding.UTF8);</span><br><span class="line">            generator.writeStartObject();</span><br><span class="line">            <span class="keyword">for</span> (SearchHitField value : values) &#123;</span><br><span class="line">                <span class="keyword">if</span> (value.getValues().size() &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                    generator.writeArrayFieldStart(value.getName());</span><br><span class="line">                    <span class="keyword">for</span> (Object val : value.getValues()) &#123;</span><br><span class="line">                        generator.writeObject(val);</span><br><span class="line">                    &#125;</span><br><span class="line">                    generator.writeEndArray();</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    generator.writeObjectField(value.getName(), value.getValue());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            generator.writeEndObject();</span><br><span class="line">            generator.flush();</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> String(stream.toByteArray(), Charset.forName(<span class="string">"UTF-8"</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">T <span class="title">mapResult</span><span class="params">(GetResponse response, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        T result = mapEntity(response.getSourceAsString(), clazz);</span><br><span class="line">        <span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">            setPersistentEntityId(result, response.getId(), clazz);</span><br><span class="line">            setPersistentEntityVersion(result, response.getVersion(), clazz);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> &lt;T&gt; <span class="function">LinkedList&lt;T&gt; <span class="title">mapResults</span><span class="params">(MultiGetResponse responses, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        LinkedList&lt;T&gt; list = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (MultiGetItemResponse response : responses.getResponses()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!response.isFailed() &amp;&amp; response.getResponse().isExists()) &#123;</span><br><span class="line">                T result = mapEntity(response.getResponse().getSourceAsString(), clazz);</span><br><span class="line">                setPersistentEntityId(result, response.getResponse().getId(), clazz);</span><br><span class="line">                setPersistentEntityVersion(result, response.getResponse().getVersion(), clazz);</span><br><span class="line">                list.add(result);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setPersistentEntityId</span><span class="params">(T result, String id, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (mappingContext != <span class="keyword">null</span> &amp;&amp; clazz.isAnnotationPresent(Document.class)) &#123;</span><br><span class="line"></span><br><span class="line">            ElasticsearchPersistentEntity&lt;?&gt; persistentEntity = mappingContext.getRequiredPersistentEntity(clazz);</span><br><span class="line">            ElasticsearchPersistentProperty idProperty = persistentEntity.getIdProperty();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Only deal with String because ES generated Ids are strings !</span></span><br><span class="line">            <span class="keyword">if</span> (idProperty != <span class="keyword">null</span> &amp;&amp; idProperty.getType().isAssignableFrom(String.class)) &#123;</span><br><span class="line">                persistentEntity.getPropertyAccessor(result).setProperty(idProperty, id);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> &lt;T&gt; <span class="function"><span class="keyword">void</span> <span class="title">setPersistentEntityVersion</span><span class="params">(T result, <span class="keyword">long</span> version, Class&lt;T&gt; clazz)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (mappingContext != <span class="keyword">null</span> &amp;&amp; clazz.isAnnotationPresent(Document.class)) &#123;</span><br><span class="line"></span><br><span class="line">            ElasticsearchPersistentEntity&lt;?&gt; persistentEntity = mappingContext.getPersistentEntity(clazz);</span><br><span class="line">            ElasticsearchPersistentProperty versionProperty = persistentEntity.getVersionProperty();</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Only deal with Long because ES versions are longs !</span></span><br><span class="line">            <span class="keyword">if</span> (versionProperty != <span class="keyword">null</span> &amp;&amp; versionProperty.getType().isAssignableFrom(Long.class)) &#123;</span><br><span class="line">                <span class="comment">// check that a version was actually returned in the response, -1 would indicate that</span></span><br><span class="line">                <span class="comment">// a search didn't request the version ids in the response, which would be an issue</span></span><br><span class="line">                Assert.isTrue(version != -<span class="number">1</span>, <span class="string">"Version in response is -1"</span>);</span><br><span class="line">                persistentEntity.getPropertyAccessor(result).setProperty(versionProperty, version);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意这里使用到了 <strong>PropertyUtils</strong> ，需要引入一个 Apache 的依赖。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-beanutils<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.9.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>自定义 ResultMapper 写好之后，添加 <strong>@Component</strong> 注解，表示为 Spring 的一个组件，在类中进行注入使用即可。</p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>本文示例项目地址：<a href="https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample">https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample</a></p><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前面几篇文章详细讲解了 ElasticSearch 的搭建以及使用 SpringDataElasticSearch 来完成搜索查询，但是搜索一般都会有搜索关键字高亮的功能，今天我们把它给加上。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="SpringDataElasticSearch高亮" scheme="http://nullpointer.pw/tags/SpringDataElasticSearch%E9%AB%98%E4%BA%AE/"/>
    
      <category term="SpringDataElasticSearch关键词高亮" scheme="http://nullpointer.pw/tags/SpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE/"/>
    
      <category term="ElasticsearchTemplate使用" scheme="http://nullpointer.pw/tags/ElasticsearchTemplate%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之SpringDataElasticSearch入门</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之SpringDataElasticSearch入门.html</id>
    <published>2018-09-13T13:51:17.000Z</published>
    <updated>2020-03-12T08:53:08.136Z</updated>
    
    <content type="html"><![CDATA[<p>网上大多通过 java 操作 es 使用的都是 TransportClient，而介绍使用 SpringDataElasticSearch 的文章相对比较少，笔者也是摸索了许久，接下来本文介绍 SpringDataElasticSearch 的 api 使用，更加方便的进行查询。</p><a id="more"></a><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="环境依赖"><a href="#环境依赖" class="headerlink" title="环境依赖"></a>环境依赖</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><p>本文项目基于 <strong>SpringBoot 2.0.4.RELEASE</strong> 进行构建，首先引入 Spring Data ElasticSearch 的依赖。</p><p>注意：因为是 Spring Boot 项目，所以引入的依赖是 <strong>spring-boot-starter-data-elasticsearch</strong>，而不是直接引入 <strong>spring-data-elasticsearch</strong>。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-data-elasticsearch<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>Spring Data ElasticSearch 与 ElasticSearch 有对应关系</p><table><thead><tr><th style="text-align:center">spring data elasticsearch</th><th style="text-align:center">elasticsearch</th></tr></thead><tbody><tr><td style="text-align:center">3.1.x</td><td style="text-align:center">6.2.2</td></tr><tr><td style="text-align:center">3.0.x</td><td style="text-align:center">5.5.0</td></tr><tr><td style="text-align:center">2.1.x</td><td style="text-align:center">2.4.0</td></tr><tr><td style="text-align:center">2.0.x</td><td style="text-align:center">2.2.0</td></tr><tr><td style="text-align:center">1.3.x</td><td style="text-align:center">1.5.2</td></tr></tbody></table><p>而本文使用的 SpringBoot 2.0.4.RELEASE 自动依赖的 Spring Data ElasticSearch 版本是 <strong>3.0.9.RELEASE</strong>，对应的 elasticsearch 版本是 5.5.x，可知依赖是正确的版本。</p><h2 id="创建-Document-类"><a href="#创建-Document-类" class="headerlink" title="创建 Document 类"></a>创建 Document 类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Document</span>(indexName = <span class="string">"novel"</span>, type = <span class="string">"book"</span>, createIndex = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> <span class="keyword">implements</span> <span class="title">Serializable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = <span class="number">8504604495927552402L</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要添加 <span class="doctag">@Id</span> 标识主键</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Id</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer words;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String intro;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean vip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer site;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String author;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer collection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer click;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer popularity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer goods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 需要自定义时间格式化格式，否则会使用默认时间格式化</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@JsonFormat</span> (shape = JsonFormat.Shape.STRING, pattern =<span class="string">"yyyy-MM-dd HH:mm:ss"</span>)</span><br><span class="line">    <span class="keyword">private</span> Date updatetime;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个 Document 类封装了索引的全部字段信息，注意字段名称要与索引类型的字段名称一致。</p><h2 id="创建-Repository-接口"><a href="#创建-Repository-接口" class="headerlink" title="创建 Repository 接口"></a>创建 Repository 接口</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">BookRepository</span> <span class="keyword">extends</span> <span class="title">ElasticsearchRepository</span>&lt;<span class="title">Book</span>, <span class="title">Integer</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>用过 SpringDataJPA 的朋友都应该知道，ElasticsearchRepository 的两个泛型分别为 Documet 以及 Document 的主键类型。</p><h2 id="创建测试类"><a href="#创建测试类" class="headerlink" title="创建测试类"></a>创建测试类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Slf</span>4j</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookRepositoryTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> BookRepository bookRepository;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="演示简单查询"><a href="#演示简单查询" class="headerlink" title="演示简单查询"></a>演示简单查询</h2><h3 id="匹配查询-MatchQuery"><a href="#匹配查询-MatchQuery" class="headerlink" title="匹配查询(MatchQuery)"></a>匹配查询(MatchQuery)</h3><p>进行模糊匹配查询，这里演示的是通过 name 这个字段进行查询<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">public void findBook() &#123;</span><br><span class="line">    MatchQueryBuilder matchQuery = QueryBuilders.matchQuery(&quot;name&quot;, &quot;火爆娱乐天王&quot;);</span><br><span class="line">    bookRepository.search(matchQuery)</span><br><span class="line">            .forEach(e -&gt; log.info(&quot;作品信息：&#123;&#125;&quot;, e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="项查询-TermQuery"><a href="#项查询-TermQuery" class="headerlink" title="项查询(TermQuery)"></a>项查询(TermQuery)</h3><p>完全匹配查询，这里演示查询 id 为 2 的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    TermQueryBuilder termQuery = QueryBuilders.termQuery(<span class="string">"id"</span>, <span class="number">2</span>);</span><br><span class="line">    bookRepository.search(termQuery)</span><br><span class="line">            .forEach(e -&gt; log.info(<span class="string">"作品信息：&#123;&#125;"</span>, e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="范围查询-Range-Query"><a href="#范围查询-Range-Query" class="headerlink" title="范围查询(Range Query)"></a>范围查询(Range Query)</h3><p>范围查询，这里演示查询字数在 0-30w 之间的作品<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    RangeQueryBuilder rangeQuery = QueryBuilders.rangeQuery(<span class="string">"words"</span>).gt(<span class="number">0</span>).lt(<span class="number">300000</span>);</span><br><span class="line">    bookRepository.search(rangeQuery)</span><br><span class="line">            .forEach(e -&gt; log.info(<span class="string">"作品信息：&#123;&#125;"</span>, e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意：如果对时间进行范围查询，注意不能传递 Date 对象或者 毫秒值，只能传递 <strong>yyyy-MM-dd HH:mm:ss</strong> 格式的字符串时间参数。</p><h2 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h2><p>以上演示了几个基本查询，但是如果要实现多筛选条件的查询，就需要把多个基本查询进行组合，这里就用到了 <strong>bool 查询</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/201809061536241809780.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>现在来实现这个查询</p><h3 id="BookQuery-参数封装"><a href="#BookQuery-参数封装" class="headerlink" title="BookQuery 参数封装"></a>BookQuery 参数封装</h3><p>使用 BookQuery 类封装查询参数<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookQuery</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String queryString;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer page = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer size = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer wordsBegin;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer wordsEnd;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer sort;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Boolean vip;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer site;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer collection;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer click;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer popularity;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer goods;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Date updatetime;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="查询测试"><a href="#查询测试" class="headerlink" title="查询测试"></a>查询测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">findBook</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    BookQuery query = <span class="keyword">new</span> BookQuery();</span><br><span class="line">    query.setQueryString(<span class="string">"魔"</span>);</span><br><span class="line">    query.setSite(<span class="number">2</span>);<span class="comment">// 1 是男生 2 是女生</span></span><br><span class="line">    query.setSort(<span class="number">29</span>); <span class="comment">// 29 是玄幻</span></span><br><span class="line">    query.setVip(<span class="keyword">true</span>);<span class="comment">// 查询 vip 作品</span></span><br><span class="line">    query.setWordsBegin(<span class="number">0</span>); <span class="comment">// 查询字数在 0-25w 之间的作品</span></span><br><span class="line">    query.setWordsEnd(<span class="number">500000</span>);</span><br><span class="line">    query.setPage(<span class="number">1</span>);<span class="comment">// 分页页码</span></span><br><span class="line">    query.setSize(<span class="number">10</span>);<span class="comment">// 每页显示数</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 复合查询</span></span><br><span class="line">    BoolQueryBuilder boolQuery = QueryBuilders.boolQuery();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为查询条件, 使用 must query 进行查询组合</span></span><br><span class="line">    MultiMatchQueryBuilder matchQuery = QueryBuilders.multiMatchQuery(query.getQueryString(), <span class="string">"name"</span>, <span class="string">"intro"</span>, <span class="string">"author"</span>);</span><br><span class="line">    boolQuery.must(matchQuery);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 以下为过滤筛选条件，使用 filter 比使用 must query 性能要好</span></span><br><span class="line">    TermQueryBuilder siteQuery = QueryBuilders.termQuery(<span class="string">"site"</span>, query.getSite());</span><br><span class="line">    boolQuery.filter(siteQuery);</span><br><span class="line">    TermQueryBuilder sortQuery = QueryBuilders.termQuery(<span class="string">"sort"</span>, query.getSort());</span><br><span class="line">    boolQuery.filter(sortQuery);</span><br><span class="line">    TermQueryBuilder vipQuery = QueryBuilders.termQuery(<span class="string">"vip"</span>, query.getVip());</span><br><span class="line">    boolQuery.filter(vipQuery);</span><br><span class="line">    RangeQueryBuilder wordsQuery = QueryBuilders.rangeQuery(<span class="string">"words"</span>).gt(query.getWordsBegin()).lt(query.getWordsEnd());</span><br><span class="line">    boolQuery.filter(wordsQuery);</span><br><span class="line"></span><br><span class="line">    Sort sort = Sort.by(Sort.Direction.DESC, <span class="string">"click"</span>);</span><br><span class="line">    <span class="comment">// 分页 同时根据 点击数 click 进行降序排列</span></span><br><span class="line">    PageRequest pageRequest = PageRequest.of(query.getPage() - <span class="number">1</span>, query.getSize(), sort);</span><br><span class="line"></span><br><span class="line">    log.info(<span class="string">"&#123;&#125;"</span>, boolQuery);</span><br><span class="line">    bookRepository.search(boolQuery, pageRequest)</span><br><span class="line">            .forEach(e -&gt; log.info(<span class="string">"作品信息：&#123;&#125;"</span>, e));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>查出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2018-09-12 22:33:05.750  INFO 25896 --- [           main] i.g.mosiki.search.BookRepositoryTest     : 作品信息：Book(id=7, words=345004, intro=  推荐《寻龙传》《魂摄天下》 作品属玄幻异界大陆风格！ 可惜频道不能更改只能在奇幻混！ 书友群：292...  , name=灭魔成圣, sort=29, vip=true, site=2, author=等待潇湘诗社, collection=13, click=63263, popularity=2314, goods=5353, status=0, updatetime=Tue Sep 04 16:54:15 CST 2018)</span><br><span class="line">2018-09-12 22:33:05.751  INFO 25896 --- [           main] i.g.mosiki.search.BookRepositoryTest     : 作品信息：Book(id=9, words=233000, intro=  一名地球的平凡的少年，因为一场游戏，获得死神的传承，从而穿越到另外一片陌生的大陆，从此开启了一段传奇的人生，九天星河，吾乃死神，掌控生死，判夺罪恶，我从没见过地狱，因为我的名字，便代表地狱，吾乃死神，吾名林天。（PS：单女主，爽文不虐心，主角以杀证道，杀该杀之人，不圣母，略腹黑） 各位书友要是觉得《带着死神去穿越》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！带着死神去穿越最新章节,带着死神去穿越无弹窗,带着死神去穿越全文阅读.  , name=带着死神去穿越, sort=29, vip=true, site=2, author=梦侍, collection=6326, click=523, popularity=135, goods=34252, status=0, updatetime=Thu Dec 28 04:53:07 CST 2017)</span><br><span class="line">2018-09-12 22:33:05.751  INFO 25896 --- [           main] i.g.mosiki.search.BookRepositoryTest     : 作品信息：Book(id=5, words=490000, intro=  富家子弟墨浞因为发现了村子中的秘密，在良心与亲情的折磨下，逃到了边境小城。因为一个香-艳而又恐怖的梦，墨浞经历了一些诡异的事，从而得知自己的前世与今生的使命。踏上藏地，历经磨难，克服了自己的心魔，战胜了...  , name=伏魔, sort=29, vip=true, site=2, author=一叶style, collection=526, click=9, popularity=41516, goods=7687, status=0, updatetime=Thu Sep 06 04:54:05 CST 2018)</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>SpringDataElasticSearch 入门就到这里了，是不是很简单呢？</p><p>本文示例项目地址：<a href="https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample">https://github.com/Mosiki/SpringDataElasticSearchQuickStartExample</a></p><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://blog.csdn.net/tianyaleixiaowu/article/details/77965257">https://blog.csdn.net/tianyaleixiaowu/article/details/77965257</a></li><li><a href="https://tech.youzan.com/search-engine1/#43filteredquery">https://tech.youzan.com/search-engine1/#43filteredquery</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;网上大多通过 java 操作 es 使用的都是 TransportClient，而介绍使用 SpringDataElasticSearch 的文章相对比较少，笔者也是摸索了许久，接下来本文介绍 SpringDataElasticSearch 的 api 使用，更加方便的进行查询。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="SpringDataElasticSearch使用教程" scheme="http://nullpointer.pw/tags/SpringDataElasticSearch%E4%BD%BF%E7%94%A8%E6%95%99%E7%A8%8B/"/>
    
      <category term="SpringDataElasticSearch查询" scheme="http://nullpointer.pw/tags/SpringDataElasticSearch%E6%9F%A5%E8%AF%A2/"/>
    
      <category term="SpringDataElasticSearch入门" scheme="http://nullpointer.pw/tags/SpringDataElasticSearch%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之Logstash实时同步建立索引</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之Logstash实时同步建立索引.html</id>
    <published>2018-09-13T13:48:38.000Z</published>
    <updated>2020-03-10T02:33:46.375Z</updated>
    
    <content type="html"><![CDATA[<p>用过 Solr 的朋友都知道，Solr 可以直接在配置文件中配置数据库连接从而完成索引的同步创建，但是 ElasticSearch 本身并不具备这样的功能，那如何建立索引呢？方法其实很多，可以使用 Java API 的方式建立索引，也可以通过 Logstash 的插件 logstash-input-jdbc 完成，今天来探讨下如何使用 logstash-input-jdbc 完成全量同步以及增量同步。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><p>默认你已经搭建好 es 的基础环境，如还未搭建好，请参考前文。接下来只讲解 logstash 的安装使用。本文使用最新版本的 logstash ，版本号为 6.4.0。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="数据准备"><a href="#数据准备" class="headerlink" title="数据准备"></a>数据准备</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/201809061536241809780.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如图所示，如果要实现这个搜索，首先要创建相关的索引，筛选条件有男生/女生，还有分类，属性，字数，连载状态，品质等，排序条件有人气，时间，字数，收藏，推荐，点击。</p><p>这些数据正常都不会再同一张表当中，而是分布于不同的表中，但这些数据都与作品的 id 紧紧关联。本文为了方便演示，把这些数据都放在同一张表当中，如果在实际使用的过程当中，如果遇到多张表的情况，可以写 sql 进行联合查询，同样也可以建立索引，实现方式详见下文。</p><h3 id="创建表结构"><a href="#创建表结构" class="headerlink" title="创建表结构"></a>创建表结构</h3><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`book`</span>  (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">bigint</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`create_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`update_time`</span> datetime(<span class="number">0</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`status`</span> tinyint(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`intro`</span> longtext <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`icon`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`author`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> utf8mb4 <span class="keyword">COLLATE</span> utf8mb4_bin <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`words`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`collection`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`goods`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`click`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`site`</span> tinyint(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`sort`</span> tinyint(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`vip`</span> tinyint(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`popularity`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>) <span class="keyword">USING</span> BTREE</span><br><span class="line">) <span class="keyword">ENGINE</span> = <span class="keyword">InnoDB</span>  <span class="built_in">CHARACTER</span> <span class="keyword">SET</span> = utf8mb4 <span class="keyword">COLLATE</span> = utf8mb4_bin ;</span><br></pre></td></tr></table></figure><h3 id="导入测试数据"><a href="#导入测试数据" class="headerlink" title="导入测试数据"></a>导入测试数据</h3><p>注：测试数据是通过爬虫在盗版网站抓的，个别数据胡乱填写的。<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">1</span>, <span class="string">'2017-12-27 20:53:01'</span>, <span class="string">'2018-09-10 20:53:46'</span>, <span class="number">0</span>, <span class="string">'火爆娱乐天王'</span>, <span class="string">'  有人说：“他是至高无上的音乐教皇！”有人说：“他是无人能及的影视国王！”还有人说：“他是神级作家、话剧大师、伟大的音乐家……”他使华夏元素狂暴冲击西方文化，却又能做出令西方人也不及的欧美音乐影视。他造就了无数的歌星影星，创作出无数的经典，建立了一个庞大的娱乐帝国。当所有人称颂他膜拜他的时候，只有他自己知道，他不过是一个意外来自异时空的文化使者。  '</span>, <span class="number">1</span>, <span class="string">'茶与酒之歌'</span>, <span class="number">230000</span>, <span class="number">4234</span>, <span class="number">42315</span>, <span class="number">523</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">12423</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">2</span>, <span class="string">'2017-12-27 20:53:01'</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="number">0</span>, <span class="string">'无限平行进化'</span>, <span class="string">'  日复一日的枯燥生活让廖宇开始产生了难以抑制的厌倦。沉重庞大的经济负担使他的生活开始产生了变化。历史的缺失更是成为了他心中不散的谜团。某一天突如其来的陌生信息终于给他打开了一扇门。性格各异的X战警与复杂庞大的复仇者联盟会再度爆发怎样的战争。加勒比海上是否还会扬起第四艘传奇战舰的旗帜。铺天盖地的宇宙虫族与冰冷机械的人工智能谁才是最具有侵略性的文明。最终廖宇会如何选择，向左还是向右…… 各位书友要是觉得《无限平行进化》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！无限平行进化最新章节,无限平行进化无弹窗,无限平行进化全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'雪色银狼CS'</span>, <span class="number">555555</span>, <span class="number">450000</span>, <span class="number">13412</span>, <span class="number">555</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">342</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">3</span>, <span class="string">'2017-12-27 20:53:02'</span>, <span class="string">'2018-09-15 20:53:55'</span>, <span class="number">0</span>, <span class="string">'逆天药神'</span>, <span class="string">'  一个意外，让他在星空的彼岸两地相望。三人携手，杀出了这片大陆的四方威名。他，张凡，既然获得新生，就绝不再做弱者。既然要成为强者，就必须让这片星空颤抖！“既然是我的未来，那便只能由我主宰”  '</span>, <span class="number">1</span>, <span class="string">'枫叶'</span>, <span class="number">340000</span>, <span class="number">213334</span>, <span class="number">3421</span>, <span class="number">42314</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">52315</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">4</span>, <span class="string">'2017-12-27 20:53:02'</span>, <span class="string">'2018-08-16 20:53:59'</span>, <span class="number">0</span>, <span class="string">'锦绣风华之第一农家女1'</span>, <span class="string">'  前世她是铁血手腕的帝国集团总裁，却被心爱之人设计，魂归天国。 再次睁眼，眼前的三间茅草屋，一对小瘦猴。 就算是她定力再强悍，在他们喊出那声“娘”的时候，还是让她差点没跳起来。 前世活到28还是清白如兰，一个穿越就让她勉强算是B的身材，孕育出一对儿女？ 当然，这还是其次，最重要的是她丫的居然是未婚生子，这在现代都遭人白眼的事情，那个天杀的能告诉她，这个身体的原主，是不是太牛叉了，居然没有被浸猪笼。 只是，当这对瘦的皮包骨的小包子在她跟前，肿着两对眼泡忍者泪花跑前跑后，就算是她再不想面对现实，也无法坐视不理。 既然让她再次重生，她势必要左手挥舞锄头，右手执笔算盘，带着一对可爱的包子，发家致富。 购田地，建豪宅，买下人，顾长工，一切都再朝着让她满意的方向前进，而那些眼红嫉妒之辈，完全都是她业余之时的消遣，根本就不是一个等级。 但是，常在河边走，哪有不湿鞋，这个道理她明白，却没想到那鞋子会湿的这么快，面对那个如同妖孽般，表面谦谦公子，风华无双，实则腹黑狡诈，怎么坑死她怎么来，还让她有火没处发。 精彩小剧场 当一对粉雕玉琢的包子被一个风华绝代的男人一手一个抱进来，君瑶真心的黑面了，泪奔了。 他们这两个没良心的到底明不明白，什么是引狼入室啊。 “多谢宁公子送他们回来，您看如今天色已晚，为了宁公子的名声，小妇人也不敢久留，宁公子请回吧。”她快步上前，一把一个把小包子从那个男人怀里蒿出来，快言快语的下了逐客令。 男人好看的眉毛微挑，随后一模情绪从眸中迅速划过，快的难以捕捉。 “无妨，我来陪陪这两个小家伙，君娘子不必多心。” “我…”她差点没被噎死，她有什么好多心的，就冲着他觊觎她的孩子，就不能让她留下。 只是她的话没有说完，就被男人贴面而来的俊彦吓得向后退去，而男人含笑的黑眸和清淡的话语，却让她差点怒火狂飙，“还是你想我把他们带回去？” 君瑶大惊，带回去？那是绝对不可能的，她的儿女，谁敢打主意，谁就没活路，话虽然很直白，却独独对他不管用。  '</span>, <span class="number">1</span>, <span class="string">'席妖妖'</span>, <span class="number">444902</span>, <span class="number">23</span>, <span class="number">5353</span>, <span class="number">21323</span>, <span class="number">2</span>, <span class="number">9</span>, <span class="number">1</span>, <span class="number">314</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">5</span>, <span class="string">'2017-12-27 20:53:02'</span>, <span class="string">'2018-09-05 20:54:05'</span>, <span class="number">0</span>, <span class="string">'伏魔'</span>, <span class="string">'  富家子弟墨浞因为发现了村子中的秘密，在良心与亲情的折磨下，逃到了边境小城。因为一个香-艳而又恐怖的梦，墨浞经历了一些诡异的事，从而得知自己的前世与今生的使命。踏上藏地，历经磨难，克服了自己的心魔，战胜了...  '</span>, <span class="number">1</span>, <span class="string">'一叶style'</span>, <span class="number">490000</span>, <span class="number">526</span>, <span class="number">7687</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">41516</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">6</span>, <span class="string">'2017-12-27 20:53:02'</span>, <span class="string">'2018-09-10 00:54:10'</span>, <span class="number">0</span>, <span class="string">'强爱之独家拥有'</span>, <span class="string">'  她是名贵千金，他是商界精英。 他们的订婚礼上，她惨遭背叛。 父亲气血攻心当场昏倒，再也没有醒来。 自己更被未婚夫床上的女人陷害入狱. 莫仲晖这个让她又爱又恨的男人几乎成了她这三年的梦靥。 三年的牢狱，再出来，她一无所有，而他已是江城翻手为云覆手为雨的神秘角色。  '</span>, <span class="number">1</span>, <span class="string">'河清海晏七七'</span>, <span class="number">980000</span>, <span class="number">513</span>, <span class="number">212342</span>, <span class="number">36236</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">1142314</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">7</span>, <span class="string">'2017-12-27 20:53:02'</span>, <span class="string">'2018-09-04 08:54:15'</span>, <span class="number">0</span>, <span class="string">'灭魔成圣'</span>, <span class="string">'  推荐《寻龙传》《魂摄天下》 作品属玄幻异界大陆风格！ 可惜频道不能更改只能在奇幻混！ 书友群：292...  '</span>, <span class="number">1</span>, <span class="string">'等待潇湘诗社'</span>, <span class="number">345004</span>, <span class="number">13</span>, <span class="number">5353</span>, <span class="number">63263</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">2314</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">8</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2018-09-03 21:54:27'</span>, <span class="number">0</span>, <span class="string">'我的合租美女总裁'</span>, <span class="string">'  和美女同居是一件很快乐很享受的事情吗？看看兵王曹小雷脸上蛋蛋的忧伤，大家还是醒醒吧！他好想好想告诉隔壁房间的刘薇薇，能不能别在客厅里黄瓜蘸蜂蜜吮来吮去？能不能晚上光溜溜精油按摩的时候拉好窗帘？我生理很正常，肠子很花花，爱好苍老湿，你丫别逼人太甚！  '</span>, <span class="number">1</span>, <span class="string">'薯条'</span>, <span class="number">890000</span>, <span class="number">5435</span>, <span class="number">3553</span>, <span class="number">543</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">412356</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">9</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="number">0</span>, <span class="string">'带着死神去穿越'</span>, <span class="string">'  一名地球的平凡的少年，因为一场游戏，获得死神的传承，从而穿越到另外一片陌生的大陆，从此开启了一段传奇的人生，九天星河，吾乃死神，掌控生死，判夺罪恶，我从没见过地狱，因为我的名字，便代表地狱，吾乃死神，吾名林天。（PS：单女主，爽文不虐心，主角以杀证道，杀该杀之人，不圣母，略腹黑） 各位书友要是觉得《带着死神去穿越》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！带着死神去穿越最新章节,带着死神去穿越无弹窗,带着死神去穿越全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'梦侍'</span>, <span class="number">233000</span>, <span class="number">6326</span>, <span class="number">34252</span>, <span class="number">523</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">135</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">10</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="number">0</span>, <span class="string">'亡灵与芯片'</span>, <span class="string">'  一位蝉联世界冠军数载的电子竞技玩家，在一次比赛中，天降黑色闪电，带着主角张远还有一枚地球上最先进的芯片、穿越到了剑与魔法的世界。故事没有yy，情节发展有迹可寻。没有种马，所有爱情起于点滴。更没有男主虎躯一震、从者云集，有的只是同生共死积累的友情，这、就是伙伴的意义。 各位书友要是觉得《亡灵与芯片》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！亡灵与芯片最新章节,亡灵与芯片无弹窗,亡灵与芯片全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'冬冬东'</span>, <span class="number">2559900</span>, <span class="number">5</span>, <span class="number">431</span>, <span class="number">42135</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">1</span>, <span class="number">4124</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">11</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="number">0</span>, <span class="string">'穿越小道人'</span>, <span class="string">'  小李飞刀里面:“飞刀厉害？我的符咒如何？”仙剑三:“这就是千里之外取人首级的剑啊！”红楼梦里面：“贾宝玉那块通灵宝玉应该是个灵宝级的，搞来搞来。”三国演义：“撒豆成兵，黄巾力士，《太平天书》，仙术啊，张角，你别跑！”西游记：“呼，终于到了仙界了。”三体：“二向箔，看我芥子须弥之术。”漫威:“oaa？什么东西？”小道人转身，一双眼看了过来：“呵！执笔者？” 各位书友要是觉得《穿越小道人》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！穿越小道人最新章节,穿越小道人无弹窗,穿越小道人全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'楚骚'</span>, <span class="number">455000</span>, <span class="number">342536</span>, <span class="number">23545</span>, <span class="number">53533254</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">2431</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">12</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2018-09-06 20:58:34'</span>, <span class="number">0</span>, <span class="string">'威武小娘子'</span>, <span class="string">'  杜筱玖做了个噩梦，梦里娘被人害死，她也没得到好下场。一睁眼：成真了！既然有人要赶尽杀绝，就别怪她以牙还牙！谁知为娘报仇意外发现身世：哭，是捡的！好不容易有个对眼的少年：噗，是舅舅！既然她的人生是一个坑连着一个坑，不如凿成一条河，放开来造作吧！ 各位书友要是觉得《威武小娘子》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！威武小娘子最新章节,威武小娘子无弹窗,威武小娘子全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'燕七爱吃鱼'</span>, <span class="number">2389400</span>, <span class="number">325</span>, <span class="number">4325</span>, <span class="number">324</span>, <span class="number">2</span>, <span class="number">29</span>, <span class="number">0</span>, <span class="number">213</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">13</span>, <span class="string">'2017-12-27 20:53:03'</span>, <span class="string">'2018-09-10 08:45:40'</span>, <span class="number">0</span>, <span class="string">'冰火破坏神'</span>, <span class="string">'  当巨龙的时代渐渐终结，当术师们在星空下留下无数的财富和传说，一个个觉醒的少年，便开始踏上他们的征途。  '</span>, <span class="number">1</span>, <span class="string">'无罪'</span>, <span class="number">23452343</span>, <span class="number">325324</span>, <span class="number">52</span>, <span class="number">555</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">412</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">14</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'十年相恋不相知'</span>, <span class="string">'  十年之前，她喜欢他，而他不知道。十年之后，他爱恋她，可她却不在。一段不掺杂任何其他利益的纯情爱恋之旅，究竟恋情的终点在何方？旅途的结局又将怎样？677577335本书群，各位喜欢本书的不喜欢本书的都可以进来，只要是喜欢看小说的都可以进来聊聊 各位书友要是觉得《十年相恋不相知》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！十年相恋不相知最新章节,十年相恋不相知无弹窗,十年相恋不相知全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'青松不朽'</span>, <span class="number">2355421</span>, <span class="number">4</span>, <span class="number">5534</span>, <span class="number">42314</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">231</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">15</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'终极教师'</span>, <span class="string">'  朱雀中学校规：　　 第一条，禁止师生恋！　　 第二条，禁止师生恋！　　 第三条，禁止师生恋！ ———- 　　 我坚定不移的认为穿白色半透明衬衣，里面的黑色Bra若隐若现的学生妹子才是最性感的女神！  '</span>, <span class="number">1</span>, <span class="string">'柳下挥'</span>, <span class="number">2143214</span>, <span class="number">523</span>, <span class="number">5555</span>, <span class="number">234</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">512</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">16</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'邪王绝宠蛇蝎嫡妃'</span>, <span class="string">'  “太子殿下，今日不是你毁婚，而是我毁婚。我花惊羽不嫁渣男，不嫁种猪男，要嫁便嫁宠我上天疼我入地，一生只娶一妻的男人。” 一道圣旨送到太子面前，太子脸色瞬间青黑一片，满堂宾客皆失色。 她，魍魉组织的金牌制毒师，一朝穿越成了任人欺凌的可怜太子妃，爹不疼妹不爱，还被百般欺凌。 骂我的，恶毒的骂回去。打我的，狠狠的打回去。算计我的，百倍千倍的算计回去。 可是这些渣男渣女一个个赶着送上门让她收拾，那就别怪她冷血无情，心狠手辣了，弄不死你也要弄残你。 他，帝国家喻户晓，闻之变色的嗜血邪王，从无一物入眼，却强势霸道的缠上她，眉眼灼灼，邪魅勾引：“我宠你上天，疼你入地，要不要？” 精彩对话一： “羽儿，这一次我真心诚意的向你提亲，娶你做我的东宫太子妃，未来燕云国的皇后娘娘。” “树不要皮必死无疑，人不要脸天下无敌，太子殿下的脸皮堪称一绝。” “羽儿，我错了，你原谅本宫一回吧。” “我看见你这张破脸就想弄残你，更别提上你这破船了，滚吧。” 精彩对话二： “北幽王殿下，你不是说你是断袖吗？”女子气急败坏的冷哼。 “不是我说的，是你说的。” “那你说什么难言之隐，说什么让我帮你治，原来是占我的便宜吃我的豆腐败。” “貌似本王才是比较吃亏的那一个，你吃我的豆腐比我吃你的豆腐多，”俊美霸气的男子一脸的委屈。 “意思是王爷你吃亏了？”女子微眯眼上，阴侧侧的开口。 “不吃亏，只要你对我负责就好。” “凭什么要我负责。” “本王负责也行，我宠你，我疼你，可好？”  '</span>, <span class="number">1</span>, <span class="string">'吴笑笑'</span>, <span class="number">3859643</span>, <span class="number">245632</span>, <span class="number">4223</span>, <span class="number">43325</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">51251</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">17</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'神魔霸体'</span>, <span class="string">' 拓拔野逆天重生、身藏神根、手握神符、拥有前世记忆，从小开始修炼最难修炼的炼体法决神魔九变。 　　神魔九变，每修炼成功一变，不但肉体力量暴增，还多一些神奇的本领。 　　为了修炼神魔九变，拓拔野走遍无数星宇世界，闯过无数险地绝域，大战神魔神兽鬼神。 　　最终，神魔九变大成，成就真正的神魔霸体，无敌诸天万界。 　　完本老书《六道仙尊》，五百二十万字，人品保证！放心收藏！ 　　老云新书群　229522850  '</span>, <span class="number">1</span>, <span class="string">'云霆飞'</span>, <span class="number">2456235</span>, <span class="number">3532</span>, <span class="number">5535</span>, <span class="number">5434</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">5154</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">18</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'妖娆召唤师'</span>, <span class="string">'  名为“妖娆”的无良少女，被一枚诡异的黑暗魔珠附身，二次穿越异世。 她是被疯子带大的小乞丐，万年不遇的“废材”负灵根。 受到黑暗魔珠影响而带有被世人唾弃的暗之力的“邪恶魔女”！ 魔云宗要吞噬她：“你的力量化为我用可好？” 光明阵营要绞杀她：“魔女！哪里逃！” 强大战神要勒索她：“用这幻器，你不配！” 光与暗，皆不容她在世间存在！ 善与恶，谁才陪她直捣黄龙？ “想吞噬我的！把你们的宝藏都拿出来吧！” “想绞杀我的！用轮回鼎把你们都炼成活人药丹！” “想勒索我的！本姑娘要你看看什么才是强！盗！王！” 头带植系狗血牡丹皇！脚踏赤火烈焰炸毛鸡！手持杀人炼丹轮回鼎…… 强契异兽！暗驭魔仆！ 召唤！神兽级以下的喽啰通通让开！ “我以朱雀圣火，革新这个世界！” 且看女主以妩媚的眼波玩转世间高手，以腹黑强大的手段狂战天下群雄！ 本文一对一 爆笑+女强+腹黑+成长 小恶搞，真玄幻~ 此文从无断更记录，情节精彩，欢迎各路道友热情跳坑~ ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ ————人物打油诗一首———— ◆她有一个无聊的时候就会点起“灭魔神焰”烧柴玩的疯爹爹：“妖妖，我饿，我要吃大鸡腿！” ◆她有一只人见人不爱，花见花不开的植系战兽：“我是丑八怪，嗯，妖妖说过我是丑八怪，我的眼，只比星星璀璨那么一点点，我的脸，只比先天大帝帅那么一点点，我很自卑，请不要跟我讲话。” ◆她有一个钱比命重要，有钱就是娘的少年大管家，如果问他要钱还是要命，他会直接四仰八叉倒在地上：“大爷，奴家一夜，只要一个金币。” ◆她有一个骚包的红发追求者：“来的美女们，快留下你们的‘收藏’，不然本公子滚地半月，绝不出关！” O（∩＿∩）O~ ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ ----------公告板---------- ◆本文每日更新时间◆ 如无特别通知，每日上午九点左右 5000+ O（∩＿∩）O~ ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ 推荐玄幻好文《盛世邪凰》 BY：月清树影 她的倾情付出，终抵不过一句功高盖主。 亲友的倒戈，爱人的背叛，让她心如死灰。 唯有他依旧站在她身边，拥她入怀。 “以吾之心，予汝重生，转世之魂，生生相伴，不离不弃。契！” 浴火重生，再次睁眼，她已入魔！ 且看她如何在这荆棘中破开重重迷雾，凭借着自己的努力一步步走向云端，将曾经的耻辱一同踩在脚下！ 再世为人，她——注定光芒万丈！ ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ －－－－人物认养小店－－－ 【疯 子】 由 羽毛 认养 【妖 娆】 由 公子陌凌 认养 【翦 羽】 由 月清树影 认养 【白 夜 一】 由 刑冷墨 认养 【瓦 伦】 由 瑕恋 认养 【龙 觉】 由 莲心紫璃 认养 【丑 丑】 由 吾依糯 认养 【元 方】 由 小残 认养 【牧野寒江】 由 兔兔 认养 【纳 多 多】 由 妍儿 认养 【麒 麟 王】 由 954637819 认养 【烈焰风鹰】 由 夏轩月 认养 【拔 莉 儿】 由 云影悠然 认养 【青 君】 由 忘情紫雪 认养 【泥 巴 团】 由 媚妆 认养 【赤 火】 由 媚妆 认养 【二 毛】 由 尤兮 认养 【海涅宗师】 由 ysfengy 认养 【姬 天 白】 由xanxus1896 认养 【 炎 】 由 夏轩月 认养 【百 里 尘】 由 小可爱 认养 【战 虎】 由 蓝 认养 【灭 云 飞】 由 月依浅雪 认养 【血 十 三】 由 由夜 认养 【六 灵 珠】 由 kanshu001 认养 【囡 囡】 由1003695331认养 ◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆◆ －－－－好文推荐－－－ 我的旧文 《纵紫》 刑冷墨 《异火焚天》 月清树影 《盛世邪凰》 兔梓 《脱线黑公主》 仙魅 《妖仙魅世》 墨墨 《哥哥是只妖》 即墨血夜 《死神成长史》  '</span>, <span class="number">1</span>, <span class="string">'翦羽'</span>, <span class="number">1333413</span>, <span class="number">34</span>, <span class="number">6543</span>, <span class="number">678898</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">651223</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">19</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'永夜君王'</span>, <span class="string">'  千夜自困苦中崛起，在背叛中坠落。自此一个人，一把枪，行在永夜与黎明之间，却走出一段传奇。若永夜注定是他的命运，那他也要成为主宰的王。 各位书友要是觉得《永夜君王》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！永夜君王最新章节,永夜君王无弹窗,永夜君王全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'烟雨江南'</span>, <span class="number">235212</span>, <span class="number">6342</span>, <span class="number">2343542</span>, <span class="number">6234</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">143212</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">20</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'雪中悍刀行'</span>, <span class="string">'  有个白狐儿脸，佩双刀绣冬春雷，要做那天下第一。湖底有白发老魁爱吃荤。缺门牙老仆背剑匣。山上有个骑青牛的年轻师叔祖，不敢下山。有个骑熊猫扛向日葵不太冷的少女杀手。 这个江湖，高人出行要注重出尘装扮，女侠行走江湖要注意培养人气，宗派要跟庙堂打好关系。 而主角，则潇洒带刀，把江湖捅了一个通透。 各位书友要是觉得《雪中悍刀行》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！雪中悍刀行最新章节,雪中悍刀行无弹窗,雪中悍刀行全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'烽火戏诸侯'</span>, <span class="number">35525</span>, <span class="number">353</span>, <span class="number">5345</span>, <span class="number">624</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">2314</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">21</span>, <span class="string">'2017-12-27 20:53:04'</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="number">0</span>, <span class="string">'地球灾变'</span>, <span class="string">'  【2017科幻征文】参赛作品 各位书友要是觉得《地球灾变》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！地球灾变最新章节,地球灾变无弹窗,地球灾变全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'石慌'</span>, <span class="number">25254</span>, <span class="number">46236</span>, <span class="number">335</span>, <span class="number">5234</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">412</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">22</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'求生欲'</span>, <span class="string">'  这个世界，人并不是唯一的智慧生物，还有这比人更高级的生物，他们看待人的态度如何？老公，我要你杀了所有想伤害我的人。“她的野心太大，不是帮她，而是害她。”“她的一切，我负责。” 各位书友要是觉得《求生欲》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！求生欲最新章节,求生欲无弹窗,求生欲全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'华尔街扛把子'</span>, <span class="number">56135</span>, <span class="number">6353</span>, <span class="number">5666</span>, <span class="number">2345</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">51243</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">23</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2017-12-27 20:53:06'</span>, <span class="number">0</span>, <span class="string">'都市无限取钱系统'</span>, <span class="string">'  自从得到无限取钱系统之后，叶凡的人生轨迹从此改变…… 每天早上醒来，不用担心没钱花，而应该担心这么多钱，要怎么花…… 只要是任何钱能够解决的问题，都不是问题，然而为了得到这些钱，不得不按照系统提示，完成一系列的任务。 任务失败的惩罚，将会是身体消失十分之一！ 各位书友要是觉得《都市无限取钱系统》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！都市无限取钱系统最新章节,都市无限取钱系统无弹窗,都市无限取钱系统全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'飞天入地'</span>, <span class="number">651341</span>, <span class="number">434</span>, <span class="number">5334</span>, <span class="number">234</span>, <span class="number">2</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">215</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">24</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="number">0</span>, <span class="string">'荒岛饥荒'</span>, <span class="string">'  威珥穿越到了一片海滩上，除了脑海中的饥荒制作系统，身上别无长物。祥和的岛屿上有着潜藏黑暗和秘密，为了生存，威珥不得不卷入其中。威珥开始寻找回家的路。致命的黑暗，神秘的阴影，圣洁的星灵。 威珥会回去吗？ 新书推荐：、白银霸主 、、大王饶命 、 各位书友要是觉得《荒岛饥荒》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！荒岛饥荒最新章节,荒岛饥荒无弹窗,荒岛饥荒全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'凝心之火'</span>, <span class="number">521333</span>, <span class="number">53534</span>, <span class="number">2436</span>, <span class="number">2345</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">415126</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">25</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'官道之步步高升'</span>, <span class="string">'  青原市国资委普通科员楚天舒，因撞破办公室主任的好事而面临被发配的厄运，随后却经历了一系列匪夷所思的奇...  '</span>, <span class="number">1</span>, <span class="string">'北岸'</span>, <span class="number">551612</span>, <span class="number">234632</span>, <span class="number">5243</span>, <span class="number">3245</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">124</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">26</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'傲神刀尊'</span>, <span class="string">' 一颗桀骜的心，一把不羁的刀，一个傲视仙神的不朽传奇。你是谁？别问我是谁，请与我一战！——————QQ群：51765913  '</span>, <span class="number">1</span>, <span class="string">'项华'</span>, <span class="number">351314</span>, <span class="number">435</span>, <span class="number">45</span>, <span class="number">2534</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">6143</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">27</span>, <span class="string">'2017-12-27 20:53:05'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'侯门医女,庶手驭夫'</span>, <span class="string">'   '</span>, <span class="number">1</span>, <span class="string">'沧海明珠'</span>, <span class="number">251234</span>, <span class="number">243544</span>, <span class="number">3425</span>, <span class="number">35235</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">421342314</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">28</span>, <span class="string">'2017-12-27 20:53:06'</span>, <span class="string">'2017-12-27 20:53:13'</span>, <span class="number">0</span>, <span class="string">'掠夺诸天万界'</span>, <span class="string">'  龙玄拥有掠夺万界的玉佩，以诸天万界的资源成无敌大主宰。武侠世界:天龙，笑傲，射雕，神雕，风云……仙侠世界:仙剑，花千骨，诛仙……动漫世界:火影，超神学院……小说世界:完美世界，斗破，遮天，斗罗……电影世界:西游降魔世界，僵尸先生，大话西游……神话世界:西游记，封神榜，洪荒…… 各位书友要是觉得《掠夺诸天万界》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！掠夺诸天万界最新章节,掠夺诸天万界无弹窗,掠夺诸天万界全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'我原非凡'</span>, <span class="number">521222</span>, <span class="number">24325</span>, <span class="number">2345</span>, <span class="number">666</span>, <span class="number">1</span>, <span class="number">26</span>, <span class="number">0</span>, <span class="number">411235</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">29</span>, <span class="string">'2017-12-27 20:53:06'</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="number">0</span>, <span class="string">'火影之最强虫师'</span>, <span class="string">'  激萌的萝莉，热血的少年，为打破次元壁一往无前！ 各位书友要是觉得《火影之最强虫师》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！火影之最强虫师最新章节,火影之最强虫师无弹窗,火影之最强虫师全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'来一刀'</span>, <span class="number">544111</span>, <span class="number">325</span>, <span class="number">3434525</span>, <span class="number">623534</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">51244</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">30</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'陆战兵王'</span>, <span class="string">' 少年从新兵蛋子一步步成长，磨练成一把隐去的刀锋，时刻为着梦想而奋斗，经历无尽的艰难困阻，最终了为真相而战斗！！ 　　我的书友交流群：241911158，我的QQ：807457338  '</span>, <span class="number">1</span>, <span class="string">'可可比尔'</span>, <span class="number">355555</span>, <span class="number">45346</span>, <span class="number">543</span>, <span class="number">5234</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">51261</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">31</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2017-12-27 20:53:12'</span>, <span class="number">0</span>, <span class="string">'变身之把反派养歪了肿么破'</span>, <span class="string">'  激萌的萝莉，热血的少年，为打破次元壁一往无前！ 各位书友要是觉得《变身之把反派养歪了肿么破》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！变身之把反派养歪了肿么破最新章节,变身之把反派养歪了肿么破无弹窗,变身之把反派养歪了肿么破全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'呆萌小总'</span>, <span class="number">222235</span>, <span class="number">364326</span>, <span class="number">25342</span>, <span class="number">632</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">521341</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">32</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'唯愿情深不负婚'</span>, <span class="string">'  渣男和小三联手设计，让她被扣上不干净的骂名，婆婆暴打，还逼着她净身出户。她没了家，也失去了腹中刚成型的孩子。走投无路，为了复仇，只能选择爬上渣男对手的床。他是天之骄子，她本以为镜花水月后再无交集，却.. 各位书友要是觉得《唯愿情深不负婚》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！唯愿情深不负婚最新章节,唯愿情深不负婚无弹窗,唯愿情深不负婚全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'旧城雪'</span>, <span class="number">5123566</span>, <span class="number">534</span>, <span class="number">234562</span>, <span class="number">636</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">42156</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">33</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="number">0</span>, <span class="string">'我的绝色美女特工老婆'</span>, <span class="string">'  【火爆新书】地下世界的王者神秘归隐，就在各界大佬都松了一口气的时候，殊不知，远在佣兵禁地的华夏，掀起了一场前所未有的波澜！ 各位书友要是觉得《我的绝色美女特工老婆》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！我的绝色美女特工老婆最新章节,我的绝色美女特工老婆无弹窗,我的绝色美女特工老婆全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'稣牧鱼'</span>, <span class="number">351235</span>, <span class="number">2435</span>, <span class="number">45325</span>, <span class="number">5353</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">42</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">34</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2017-12-27 20:53:10'</span>, <span class="number">0</span>, <span class="string">'北雄'</span>, <span class="string">'  本书简介： 大业六年，强盛的大隋迎来了转折点。 这一年，隋帝杨广开始准备征伐高丽，顺势拉开了隋末战乱的序幕。 接下来的几年间，天下板荡，群雄并起。 十八路反王，六十四路烟尘，草莽豪杰，门阀世家，纷纷粉墨登场，逐鹿天下。 北方突厥汗国，雄踞漠北，虎视眈眈。 内忧外患之下，一个强大的帝国，最终轰然崩塌。 这是个最具传奇色彩的时代，也同样是中原大地最为混乱黑暗的时节。 就在这样一个时候，一个来历奇异的边塞少年，带着草原的风寒，和一股满不在乎的劲头，一头扎进了这乱世漩涡之中。 各位书友要是觉得《北雄》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！北雄最新章节,北雄无弹窗,北雄全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'河边草'</span>, <span class="number">5235132</span>, <span class="number">523</span>, <span class="number">3425</span>, <span class="number">35</span>, <span class="number">1</span>, <span class="number">25</span>, <span class="number">0</span>, <span class="number">143165</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">35</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2017-12-27 20:53:10'</span>, <span class="number">0</span>, <span class="string">'异世界的战斗奶妈'</span>, <span class="string">'  曾经超人气网络游戏“异世界，”曹玲敏有三个角色创下了传说记录。狂战士红昭愿，打出了“异世界”最强一击的爆发伤害；武圣朝朝暮暮，连续三次赛季拿下竞技场SOLO赛冠军；舰炮掌控者红绳结发，带领公会部下拿下七次世界级BOSS首杀；在其游戏终止营运的那一天，曹玲敏想起自己唯独没有玩过奶妈，结果等到营运时间结束，角色却无法退出游戏，拥有童颜贫乳外表的曹玲敏展开了前所未有的第四次传说…… 各位书友要是觉得《异世界的战斗奶妈》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！异世界的战斗奶妈最新章节,异世界的战斗奶妈无弹窗,异世界的战斗奶妈全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'夏伊水心'</span>, <span class="number">5661233</span>, <span class="number">26</span>, <span class="number">35</span>, <span class="number">3462</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">0</span>, <span class="number">4112</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">36</span>, <span class="string">'2017-12-27 20:53:07'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'武极阴阳'</span>, <span class="string">'  天地始分阴阳，亘古平衡。有人企图以外力主宰五行大陆，颠覆世界！一个身具花瓶体质的少年，无形中成了对抗强大外力的主要人选。十二岁起步，能否担起重任？莫名魂力、五行之子、红颜知己、阴阳互修……这里是武动乾坤的精彩世界！P:新人新书，更新稳定。书友群249540907。请多支持！  '</span>, <span class="number">1</span>, <span class="string">'楚松源'</span>, <span class="number">455432</span>, <span class="number">345</span>, <span class="number">3</span>, <span class="number">23634</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">4145</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">37</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="number">0</span>, <span class="string">'苍灵主宰'</span>, <span class="string">'  万灵世界，天地无垠，宗族千万，强人辈出！苍穹之下，表面群雄割据，内里暗流涌动，只待大浪淘沙，伺机乘风而上……平凡小子韩烨，习神秘功法横空出世，踏复仇之路，入修炼征途，掀起不可阻挡之洪流！自此，山河日月变…… 各位书友要是觉得《苍灵主宰》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！苍灵主宰最新章节,苍灵主宰无弹窗,苍灵主宰全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'人生好梦'</span>, <span class="number">561355</span>, <span class="number">6666</span>, <span class="number">62</span>, <span class="number">54325</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2143</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">38</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2017-12-27 20:53:11'</span>, <span class="number">0</span>, <span class="string">'定位寻宝系统'</span>, <span class="string">'  别人用聊天软件泡妞把妹子，轻松一下附近人就是美女如云...可是我的附近人里，没有什么美女直播...搜索一下附近人，精确定位出来的...不是灵丹妙药，就是古董文物...上到天材地宝，下到补肾壮阳...都只因脑海之中有着一个系统，可以看到别人看不到的搜索信息...别说我身上带着BUG，我真的就是想泡妹子而已...设定好自己的人生，走出一个不一样的人生巅峰... 各位书友要是觉得《定位寻宝系统》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！定位寻宝系统最新章节,定位寻宝系统无弹窗,定位寻宝系统全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'沐雪沉风'</span>, <span class="number">123344</span>, <span class="number">5325</span>, <span class="number">266</span>, <span class="number">3425</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">12342</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">39</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'不败战神'</span>, <span class="string">'  少年，就是要在阳光下挥洒汗水！ 少年，就是要不断战斗，然后胜利！ 无尽天路之旅，无尽征途，见证少年的热血和传奇！ 心怀野望，烈血如燃！ 永远少年，不败战神！ 各位书友要是觉得《不败战神》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！  '</span>, <span class="number">1</span>, <span class="string">'方想'</span>, <span class="number">54633</span>, <span class="number">2534</span>, <span class="number">3262</span>, <span class="number">63263</span>, <span class="number">1</span>, <span class="number">24</span>, <span class="number">1</span>, <span class="number">2521</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">40</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'至尊神帝'</span>, <span class="string">'  至尊神帝的简介：【重磅推荐低调哥完本小说《至尊龙帝》与《逍遥狂少》】一个从小被人嘲笑为废物的少年，在一次危险的狩猎中，遭人打断四肢，石沉深潭，不料却因祸得福，收了一名上古仙人的残魂为仆。在仙仆的激励下，他凭借强悍的意志力与不懈的努力，在庄中比武大会上一鸣惊人，彻底告别了废物的称号，之后以武入道，冲破了体内堵塞的经脉，拥有了五行元力的超强修炼天赋。从此，叶天决心倾毕生之力，逆天改命，去追寻修炼的极致境界。一路杀仙弑神，彪悍的修炼之路无需解释。  '</span>, <span class="number">1</span>, <span class="string">'低调哥'</span>, <span class="number">432513</span>, <span class="number">4532</span>, <span class="number">32234</span>, <span class="number">3254</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">51</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">41</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'紫阳'</span>, <span class="string">'  紫阳  '</span>, <span class="number">1</span>, <span class="string">'风御九秋'</span>, <span class="number">5513243</span>, <span class="number">276236</span>, <span class="number">32445</span>, <span class="number">6666</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">245</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">42</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2017-12-27 20:53:10'</span>, <span class="number">0</span>, <span class="string">'刘备的日常'</span>, <span class="string">'  【历史新纪元脑洞风暴征文】参赛作品 各位书友要是觉得《刘备的日常》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！刘备的日常最新章节,刘备的日常无弹窗,刘备的日常全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'熏香如风'</span>, <span class="number">521111</span>, <span class="number">6234</span>, <span class="number">264534</span>, <span class="number">3425</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">6124</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">43</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2017-12-27 20:53:12'</span>, <span class="number">0</span>, <span class="string">'狂武仙皇'</span>, <span class="string">'  我为蝼蚁，世人可欺，世人为蝼蚁，我可欺世人。一息上存，战斗不止。即便是死，也要死的惊天动地。 各位书友要是觉得《狂武仙皇》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！狂武仙皇最新章节,狂武仙皇无弹窗,狂武仙皇全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'秋风若水'</span>, <span class="number">356623</span>, <span class="number">626</span>, <span class="number">62</span>, <span class="number">23466</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">5124</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">44</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'新刺客列传'</span>, <span class="string">'  躲在阴暗的角落，冷静思考，仔细观察周围的一切动向，更要小心同行来抢生意。某一刻，目标出现，迎面微笑走过。刺出一剑！ 各位书友要是觉得《新刺客列传》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！新刺客列传最新章节,新刺客列传无弹窗,新刺客列传全文阅读.  '</span>, <span class="number">1</span>, <span class="string">'世尘风'</span>, <span class="number">351334</span>, <span class="number">5234</span>, <span class="number">2345</span>, <span class="number">3425</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">42315</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">45</span>, <span class="string">'2017-12-27 20:53:08'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'不朽神瞳'</span>, <span class="string">'  这是一个神秘的世界，这里有最强的武道，最神秘的瞳术！八世历，九为尊！一代太古大能，历经八世磨砺而归，他想不明白，这一世为什么那么多法宝找他认主，为什么会有那么多美女来给他暖床，但是他知道，他将拥美并踩着敌人的尸体，走上至尊之路！萧寻：“这一世，我要让所有人都在我的脚下颤抖！绝色美女们，来陪哥哥快乐双修。”  '</span>, <span class="number">1</span>, <span class="string">'风舞天下'</span>, <span class="number">566666</span>, <span class="number">525</span>, <span class="number">25342</span>, <span class="number">45326</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">51261</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">46</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="number">0</span>, <span class="string">'花都小仙医'</span>, <span class="string">'  小仙医携造化宝塔，纵横都市，宝塔在手，美女我有！赚最多的钱，踩最牛的人，娶最美的老婆，专治各种不服。 各位书友要是觉得《花都小仙医》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！花都小仙医最新章节,花都小仙医无弹窗,花都小仙医全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'十三刀'</span>, <span class="number">542135</span>, <span class="number">2642</span>, <span class="number">3245</span>, <span class="number">26346</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">2143</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">47</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'女神总裁爱上我'</span>, <span class="string">'  身怀异能却甘于平淡的酒店小保安，与美若天仙却冷若冰霜的总裁有了交集，她主动求婚他却说不，领证当晚陪伴他的居然是另个女人。从此，各色美女投怀送抱，要命的是每个女人都带着一堆甩不掉的麻烦……  '</span>, <span class="number">1</span>, <span class="string">'愤怒小鸟'</span>, <span class="number">111111</span>, <span class="number">62624</span>, <span class="number">52352</span>, <span class="number">6234</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">23415</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">48</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="string">'2017-12-27 20:53:18'</span>, <span class="number">0</span>, <span class="string">'萌宝小神龙：妖皇盛宠不良妃'</span>, <span class="string">'  震惊！绝美少女棺材产子，儿子居然是个头上有犄角的妖怪。凰清妤捶地大哭。奇怪！为什么她都有孩子了，还有男人纠缠不休啊？凰清妤哭笑不得。某天，妖孽男子将她咚在树上，“撩完就想跑，你要对我负责！”她勾唇一笑，将他反压，“抱歉，我更喜欢在上面。”作为一代医毒双绝的杀手女王，说她是废物？放屁，我来告诉你什么是绝世天才！只是万万没想到惹上了一个比她更绝世更妖孽的男人，从此你追我逃，你杀人我递刀，一起称（huo）霸（hai）天下。 各位书友要是觉得《萌宝小神龙：妖皇盛宠不良妃》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！萌宝小神龙：妖皇盛宠不良妃最新章节,萌宝小神龙：妖皇盛宠不良妃无弹窗,萌宝小神龙：妖皇盛宠不良妃全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'姒糖'</span>, <span class="number">353251</span>, <span class="number">252</span>, <span class="number">24</span>, <span class="number">26345</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">4126</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">49</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="string">'2018-09-14 20:54:49'</span>, <span class="number">0</span>, <span class="string">'X处首席特工皇妃'</span>, <span class="string">'   '</span>, <span class="number">1</span>, <span class="string">'逐云之巅'</span>, <span class="number">3521434</span>, <span class="number">262345</span>, <span class="number">2543</span>, <span class="number">6236</span>, <span class="number">1</span>, <span class="number">22</span>, <span class="number">1</span>, <span class="number">416213</span>);</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> <span class="string">`book`</span>(<span class="string">`id`</span>, <span class="string">`create_time`</span>, <span class="string">`update_time`</span>, <span class="string">`status`</span>, <span class="string">`name`</span>, <span class="string">`intro`</span>, <span class="string">`icon`</span>, <span class="string">`author`</span>, <span class="string">`words`</span>, <span class="string">`collection`</span>, <span class="string">`goods`</span>, <span class="string">`click`</span>, <span class="string">`site`</span>, <span class="string">`sort`</span>, <span class="string">`vip`</span>, <span class="string">`popularity`</span>) <span class="keyword">VALUES</span> (<span class="number">50</span>, <span class="string">'2017-12-27 20:53:09'</span>, <span class="string">'2017-12-27 20:53:10'</span>, <span class="number">0</span>, <span class="string">'九转圣灵决'</span>, <span class="string">'  五百年前，他心爱的女子，竟爬上了自己同父异母哥哥的床。毒酒穿肠，一代天骄，就此陨落。五百年后，他重生归来。却发现毒害他的狗男女。已统领七海八州。号称“凤后”“龙帝”威震八方。当龙吟剑出，雷霆破空，震破苍穹，山河破碎，星辰陨落。“待我重修30年，必将踏破星河，血洗金銮殿！”……… 各位书友要是觉得《九转圣灵决》还不错的话请不要忘记向您QQ群和微博里的朋友推荐哦！九转圣灵决最新章节,九转圣灵决无弹窗,九转圣灵决全文阅读.  '</span>, <span class="number">0</span>, <span class="string">'雨墨风起'</span>, <span class="number">511333</span>, <span class="number">2534</span>, <span class="number">2345</span>, <span class="number">6234524</span>, <span class="number">1</span>, <span class="literal">NULL</span>, <span class="number">1</span>, <span class="number">51262</span>);</span><br></pre></td></tr></table></figure></p><h2 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h2><p>使用 postman 等工具创建 es 索引，其中使用到了 ik 以及 pinyin 分词器，具体配置可以参考我前面的文章。</p><p>PUT: <a href="http://192.168.200.192:9200/novel">http://192.168.200.192:9200/novel</a><br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>:&#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>:<span class="number">5</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>:<span class="number">1</span>,</span><br><span class="line">        <span class="attr">"analysis"</span>:&#123;</span><br><span class="line">            <span class="attr">"analyzer"</span>:&#123;</span><br><span class="line">                <span class="attr">"pinyin_analyzer"</span>:&#123;</span><br><span class="line">                    <span class="attr">"tokenizer"</span>:<span class="string">"ik_smart"</span>,</span><br><span class="line">                    <span class="attr">"filter"</span>:[</span><br><span class="line">                        <span class="string">"full_pinyin_no_space"</span>,</span><br><span class="line">                        <span class="string">"full_pinyin_with_space"</span>,</span><br><span class="line">                        <span class="string">"first_letter_pinyin"</span></span><br><span class="line">                    ]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"filter"</span>:&#123;</span><br><span class="line">                <span class="attr">"full_pinyin_no_space"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"pinyin"</span>,</span><br><span class="line">                    <span class="attr">"first_letter"</span>:<span class="string">"none"</span>,</span><br><span class="line">                    <span class="attr">"padding_char"</span>:<span class="string">""</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"full_pinyin_with_space"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"pinyin"</span>,</span><br><span class="line">                    <span class="attr">"first_letter"</span>:<span class="string">"none"</span>,</span><br><span class="line">                    <span class="attr">"padding_char"</span>:<span class="string">" "</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"first_letter_pinyin"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"pinyin"</span>,</span><br><span class="line">                    <span class="attr">"first_letter"</span>:<span class="string">"only"</span>,</span><br><span class="line">                    <span class="attr">"padding_char"</span>:<span class="string">""</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"book"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"id"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"words"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"intro"</span>:&#123;</span><br><span class="line">                    <span class="attr">"analyzer"</span>:<span class="string">"ik_smart"</span>,</span><br><span class="line">                    <span class="attr">"search_analyzer"</span>:<span class="string">"ik_smart"</span>,</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"name"</span>:&#123;</span><br><span class="line">                    <span class="attr">"analyzer"</span>:<span class="string">"pinyin_analyzer"</span>,</span><br><span class="line">                    <span class="attr">"search_analyzer"</span>:<span class="string">"pinyin_analyzer"</span>,</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"sort"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"updatetime"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"date"</span>,</span><br><span class="line">                    <span class="attr">"format"</span>:<span class="string">"yyyy-MM-dd HH:mm:ss"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"vip"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"boolean"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"site"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"author"</span>:&#123;</span><br><span class="line">                    <span class="attr">"analyzer"</span>:<span class="string">"pinyin_analyzer"</span>,</span><br><span class="line">                    <span class="attr">"search_analyzer"</span>:<span class="string">"pinyin_analyzer"</span>,</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"collection"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"click"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"popularity"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"goods"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"status"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>注意，这里索引的所有字段都是小写的，不要包含大写，否则后续会出现问题。<br>索引创建好了之后，安装 logstash。</p><h2 id="安装-logstash"><a href="#安装-logstash" class="headerlink" title="安装 logstash"></a>安装 logstash</h2><p>Tips: 因为 logstash 启动的时候，会占用较高的 CPU ，建议不要放在 es 集群的服务器上，最好换一台服务器进行安装。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wget https://artifacts.elastic.co/downloads/logstash/logstash-6.4.0.tar.gz</span><br><span class="line"></span><br><span class="line">tar -xvf logstash-6.4.0.tar.gz</span><br></pre></td></tr></table></figure></p><p>因为建立索引需要使用到 <strong>logstash-input-jdbc</strong>，所以先配置这个插件，<strong>这个插件在 logstash 5.0 之后就默认自带了，无需再次安装</strong>。</p><h2 id="配置-logstash同步之全量同步"><a href="#配置-logstash同步之全量同步" class="headerlink" title="配置 logstash同步之全量同步"></a>配置 logstash同步之全量同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">## 进入 logstash 根目录</span><br><span class="line">cd /usr/local/es/logstash-6.4.0</span><br><span class="line"></span><br><span class="line">## 创建存放 logstash-input-jdbc 相关配置以及依赖的目录</span><br><span class="line">mkdir logstash-input-jdbc</span><br><span class="line"></span><br><span class="line">cd logstash-input-jdbc</span><br><span class="line"></span><br><span class="line">## 创建两个目录</span><br><span class="line">mkdir lib &amp; mkdir conf</span><br><span class="line"></span><br><span class="line">## 下载 jdbc 所需的 mysql 驱动到 lib 目录</span><br><span class="line">wget http://central.maven.org/maven2/mysql/mysql-connector-java/6.0.6/mysql-connector-java-6.0.6.jar -P lib/</span><br><span class="line"></span><br><span class="line">## 进入 conf/ 目录</span><br><span class="line">cd conf/</span><br><span class="line"></span><br><span class="line">## 创建两个文件，一个是 jdbc 的 sql，另一个是 logstash-input-jdbc 的配置文件</span><br><span class="line"></span><br><span class="line">vim mysql2es.sql</span><br></pre></td></tr></table></figure><p>首先编写 sql， 构造索引所需的数据。由于是第一次同步到 es,所以进行全量同步，不过这里的全量也并非是一次性把查出库内所有数据，而是伪全量的增量同步。</p><p><strong>mysql2es.sql</strong> 内容为<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`id`</span>,</span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="string">`update_time`</span>, <span class="string">'1970-01-01 08:00:00'</span> ) <span class="keyword">AS</span> <span class="string">`updatetime`</span>,</span><br><span class="line"><span class="string">`status`</span>,</span><br><span class="line"><span class="string">`name`</span>,</span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="string">`intro`</span>, <span class="string">''</span> ) <span class="keyword">AS</span> <span class="string">`intro`</span>,</span><br><span class="line"><span class="string">`author`</span>,</span><br><span class="line"><span class="string">`words`</span>,</span><br><span class="line"><span class="string">`collection`</span>,</span><br><span class="line"><span class="string">`goods`</span>,</span><br><span class="line"><span class="string">`click`</span>,</span><br><span class="line"><span class="string">`site`</span>,</span><br><span class="line"><span class="string">`sort`</span>,</span><br><span class="line"><span class="string">`vip`</span>,</span><br><span class="line"><span class="string">`popularity`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">book </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line"><span class="keyword">id</span> &gt;= :sql_last_value <span class="keyword">and</span> <span class="keyword">id</span> &lt; :sql_last_value + <span class="number">11</span></span><br></pre></td></tr></table></figure></p><p><strong>注意</strong>为了避免一次性查询，对数据库造成太大压力，因此这里使用了增量的方式来完成初始化同步到 es，这里的 :sql_last_value 是 logstash 上一步同步的最后的值，这里为 id，也可以是时间。因为演示用的测试数据较少，所以每次只同步了 10 条记录，如果实际使用，一次同步 1000 条比较合适，即 <code>:sql_last_value + 1001</code></p><p><strong>sql 查询出的字段名要与索引字段名称对应上，否则无法映射同步。</strong></p><p>这里的 mysql2es.sql 将在 logstash-input-jdbc 中用到，创建文件 mysql2es.conf<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim mysql2es.conf</span><br></pre></td></tr></table></figure></p><p>mysql2es.conf 的内容是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    jdbc &#123;</span><br><span class="line">      # 数据库</span><br><span class="line">      jdbc_connection_string =&gt; &quot;jdbc:mysql://192.168.199.192:3306/novel&quot;</span><br><span class="line">      # 用户名密码</span><br><span class="line">      jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">      jdbc_password =&gt; &quot;123456&quot;</span><br><span class="line">      # jar包的位置</span><br><span class="line">      jdbc_driver_library =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/lib/mysql-connector-java-6.0.6.jar&quot;</span><br><span class="line">      # mysql的Driver</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">      # 读取这个sql</span><br><span class="line">      statement_filepath =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/mysql2es.sql&quot;</span><br><span class="line">      # 指定时区</span><br><span class="line">      jdbc_default_timezone =&gt; &quot;Asia/Shanghai&quot;</span><br><span class="line">      # 每分钟执行一次同步(分 时 天 月 年)，比如每十分钟(*/10 * * * *)</span><br><span class="line">      schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">      #索引的类型</span><br><span class="line">      type =&gt; &quot;book&quot;</span><br><span class="line"></span><br><span class="line">      use_column_value =&gt; &quot;true&quot;</span><br><span class="line">      #tracking_column_type: 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型</span><br><span class="line">      tracking_column_type =&gt; &quot;numeric&quot;</span><br><span class="line">      # 递增字段</span><br><span class="line">      tracking_column =&gt; &quot;id&quot;</span><br><span class="line">      # 保存每次同步时递增字段的最后一个值到这个文件</span><br><span class="line">      last_run_metadata_path =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/full_sync&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">        remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; &quot;192.168.199.192:9200&quot;</span><br><span class="line">        # index 索引名</span><br><span class="line">        index =&gt; &quot;novel&quot;</span><br><span class="line">        # 需要关联的数据库中有有一个id字段，对应索引的id号</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="启动logstash同步"><a href="#启动logstash同步" class="headerlink" title="启动logstash同步"></a>启动logstash同步</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/es/logstash-6.4.0/bin/logstash -f /usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/mysql2es.conf</span><br></pre></td></tr></table></figure><p>启动后稍等一会儿，如果配置正确会打印出执行的 sql:<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="string">`id`</span>,<span class="keyword">IFNULL</span>(<span class="string">`update_time`</span>,<span class="string">'1970-01-01 08:00:00'</span>) <span class="keyword">AS</span> <span class="string">`updatetime`</span>,<span class="string">`status`</span>,<span class="string">`name`</span>,<span class="keyword">IFNULL</span>(<span class="string">`intro`</span>,<span class="string">''</span>) <span class="keyword">AS</span> <span class="string">`intro`</span>,<span class="string">`author`</span>,<span class="string">`words`</span>,<span class="string">`collection`</span>,<span class="string">`goods`</span>,<span class="string">`click`</span>,<span class="string">`site`</span>,<span class="string">`sort`</span>,<span class="string">`vip`</span>,<span class="string">`popularity`</span> <span class="keyword">FROM</span> book <span class="keyword">WHERE</span> <span class="keyword">id</span>&gt; <span class="number">0</span> <span class="keyword">AND</span> <span class="keyword">id</span>&lt; <span class="number">0</span>+<span class="number">11</span></span><br></pre></td></tr></table></figure></p><p>查看 ElasticSearchHead 控制台，发现也已经有了 10 条索引数据。<br>由于每次同步 10 条，每分钟同步一次，5分钟后，测试的 50条记录也已经全部被同步到 es 里了。</p><p>ctrl + c 停止同步进程，查看文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/full_sync</span><br></pre></td></tr></table></figure></p><p>文件中的数字正是上次最后同步的 id</p><h2 id="logstash增量同步"><a href="#logstash增量同步" class="headerlink" title="logstash增量同步"></a>logstash增量同步</h2><p>根据 id 进行同步，如果对数据库中已被同步到 es 的数据进行了修改，这个数据也不会被同步更新到 es 当中去。</p><p>根据 id 每次同步 1000 条，这种同步方式也只适合第一次全量进行初始化时候使用，后续增量同步最好根据时间戳的方式完成。</p><p>修改 <strong>mysql2es.sql</strong><br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line"><span class="string">`id`</span>,</span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="string">`update_time`</span>, <span class="string">'1970-01-01 08:00:00'</span> ) <span class="keyword">AS</span> <span class="string">`updatetime`</span>,</span><br><span class="line"><span class="string">`status`</span>,</span><br><span class="line"><span class="string">`name`</span>,</span><br><span class="line"><span class="keyword">IFNULL</span>( <span class="string">`intro`</span>, <span class="string">''</span> ) <span class="keyword">AS</span> <span class="string">`intro`</span>,</span><br><span class="line"><span class="string">`author`</span>,</span><br><span class="line"><span class="string">`words`</span>,</span><br><span class="line"><span class="string">`collection`</span>,</span><br><span class="line"><span class="string">`goods`</span>,</span><br><span class="line"><span class="string">`click`</span>,</span><br><span class="line"><span class="string">`site`</span>,</span><br><span class="line"><span class="string">`sort`</span>,</span><br><span class="line"><span class="string">`vip`</span>,</span><br><span class="line"><span class="string">`popularity`</span> </span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">book </span><br><span class="line"><span class="keyword">WHERE</span></span><br><span class="line">update_time &gt;= <span class="keyword">convert_tz</span>(:sql_last_value, <span class="string">'+00:00'</span>,<span class="string">'-08:00'</span>)</span><br><span class="line"><span class="keyword">order</span> <span class="keyword">by</span> update_time <span class="keyword">asc</span></span><br></pre></td></tr></table></figure></p><p><strong>注意这里使用到了 convert_tz 这个函数，原因是 logstash 会在同步时在最后同步时间增加 8 个小时，因此需要使用函数，减去 8 个小时才是正确的时间。 因为logstash 记录最后一次同步的值是最后一条记录的，所以，最好根据 update_time 进行升序排序，即取的值是离现在最近的时间。</strong></p><p>修改 <strong>mysql2es.conf</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">input &#123;</span><br><span class="line">    stdin &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    jdbc &#123;</span><br><span class="line">      # 数据库</span><br><span class="line">      jdbc_connection_string =&gt; &quot;jdbc:mysql://192.168.199.192:3306/novel&quot;</span><br><span class="line">      # 用户名密码</span><br><span class="line">      jdbc_user =&gt; &quot;root&quot;</span><br><span class="line">      jdbc_password =&gt; &quot;123456&quot;</span><br><span class="line">      # jar包的位置</span><br><span class="line">      jdbc_driver_library =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/lib/mysql-connector-java-6.0.6.jar&quot;</span><br><span class="line">      # mysql的Driver</span><br><span class="line">      jdbc_driver_class =&gt; &quot;com.mysql.jdbc.Driver&quot;</span><br><span class="line">      # 读取这个sql</span><br><span class="line">      statement_filepath =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/mysql2es.sql&quot;</span><br><span class="line">      # 指定时区</span><br><span class="line">      jdbc_default_timezone =&gt; &quot;Asia/Shanghai&quot;</span><br><span class="line">      # 每分钟</span><br><span class="line">      schedule =&gt; &quot;* * * * *&quot;</span><br><span class="line">      #索引的类型</span><br><span class="line">      type =&gt; &quot;book&quot;</span><br><span class="line"></span><br><span class="line">      use_column_value =&gt; &quot;true&quot;</span><br><span class="line">      #tracking_column_type: 递增字段的类型，numeric 表示数值类型, timestamp 表示时间戳类型</span><br><span class="line">      tracking_column_type =&gt; &quot;timestamp&quot;</span><br><span class="line">      # 递增字段</span><br><span class="line">      tracking_column =&gt; &quot;updatetime&quot;</span><br><span class="line">      # 保存每次同步时递增字段的最后一个值到这个文件</span><br><span class="line">      last_run_metadata_path =&gt; &quot;/usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/incr_sync&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filter &#123;</span><br><span class="line"></span><br><span class="line">    json &#123;</span><br><span class="line">        source =&gt; &quot;message&quot;</span><br><span class="line">        remove_field =&gt; [&quot;message&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">output &#123;</span><br><span class="line">    elasticsearch &#123;</span><br><span class="line">        hosts =&gt; &quot;192.168.199.192:9200&quot;</span><br><span class="line">        # index 索引名</span><br><span class="line">        index =&gt; &quot;novel&quot;</span><br><span class="line">        # 需要关联的数据库中有有一个id字段，对应索引的id号</span><br><span class="line">        document_id =&gt; &quot;%&#123;id&#125;&quot;</span><br><span class="line">    &#125;</span><br><span class="line">    stdout &#123;</span><br><span class="line">        codec =&gt; json_lines</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改增量的字段为 updatetime，且字段类型设置为 timestamp，<br>指定记录最后同步时间的文件为 incr_sync ，同时在 conf 目录下创建这个文件 incr_sync，设置一下初始值，即同步大于设置这个值的数据。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/</span><br><span class="line">vim incr_conf</span><br><span class="line"></span><br><span class="line"># 文件内容如下，这里具体时间根据你的情况自行修改</span><br><span class="line"></span><br><span class="line">--- !ruby/object:DateTime &apos;2018-09-04 16:47:14.000000000 Z&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 注意修改只需要改 2018-09-04 16:47:14 这一部分，其他地方就不要改，改了格式可能会不对。</span><br></pre></td></tr></table></figure></p><p>保存退出，执行同步命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/es/logstash-6.4.0/bin/logstash -f /usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/mysql2es.conf</span><br></pre></td></tr></table></figure></p><p>过一会儿，正常输出 sql 语句<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SELECT `id`,IFNULL(`update_time`,&apos;1970-01-01 08:00:00&apos;) AS `updatetime`,`status`,`name`,IFNULL(`intro`,&apos;&apos;) AS `intro`,`author`,`words`,`collection`,`goods`,`click`,`site`,`sort`,`vip`,`popularity` FROM book WHERE update_time&gt; &apos;2018-09-04 16:47:14&apos; order by update_time asc</span><br></pre></td></tr></table></figure></p><p><strong>incr_sync 文件中的值，会因为每次同步同步取的是最后一条记录的值，所以最好对时间进行排序</strong></p><p><strong>配置文件中，当在input的jdbc下，增加type属性时，会导致该索引下增加type字段。所以sql查询出的字段不要用type，如果有，as成其他的名字，不然的话，这里判断会有异常</strong></p><h2 id="logstash-同步后台运行"><a href="#logstash-同步后台运行" class="headerlink" title="logstash 同步后台运行"></a>logstash 同步后台运行</h2><p>上面的运行命令如果推出终端或者按下 ctrl + c，同步就会终止，所以我们要让同步任务在后台运行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nouhup /usr/local/es/logstash-6.4.0/bin/logstash -f /usr/local/es/logstash-6.4.0/logstash-input-jdbc/conf/mysql2es.conf &amp;</span><br></pre></td></tr></table></figure></p><p>使用 <strong>nohup</strong> 和 * 号将要执行的语句包裹起来，就可以实现后台运行了，同时会在当前执行命令的目录生成一个 nohup.out 的文件，这里 logstash 的运行日志会被写入到这个文件当中。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tail -fn300 nohup.out</span><br></pre></td></tr></table></figure><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.cnblogs.com/licongyu/p/5383334.html">https://www.cnblogs.com/licongyu/p/5383334.html</a></li><li><a href="https://blog.csdn.net/laoyang360/article/details/51747266">https://blog.csdn.net/laoyang360/article/details/51747266</a></li><li><a href="https://segmentfault.com/a/1190000011784259">https://segmentfault.com/a/1190000011784259</a></li><li><a href="https://wenchao.ren/archives/393#8">https://wenchao.ren/archives/393#8</a></li><li><a href="http://www.cnblogs.com/xuwenjin/p/8989043.html">http://www.cnblogs.com/xuwenjin/p/8989043.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;用过 Solr 的朋友都知道，Solr 可以直接在配置文件中配置数据库连接从而完成索引的同步创建，但是 ElasticSearch 本身并不具备这样的功能，那如何建立索引呢？方法其实很多，可以使用 Java API 的方式建立索引，也可以通过 Logstash 的插件 logstash-input-jdbc 完成，今天来探讨下如何使用 logstash-input-jdbc 完成全量同步以及增量同步。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch索引同步创建" scheme="http://nullpointer.pw/tags/ElasticSearch%E7%B4%A2%E5%BC%95%E5%90%8C%E6%AD%A5%E5%88%9B%E5%BB%BA/"/>
    
      <category term="logstash全量同步建立es索引" scheme="http://nullpointer.pw/tags/logstash%E5%85%A8%E9%87%8F%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8Bes%E7%B4%A2%E5%BC%95/"/>
    
      <category term="logstash增量同步建立es索引" scheme="http://nullpointer.pw/tags/logstash%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8Bes%E7%B4%A2%E5%BC%95/"/>
    
      <category term="logstash-input-jdbc增量同步时间不对" scheme="http://nullpointer.pw/tags/logstash-input-jdbc%E5%A2%9E%E9%87%8F%E5%90%8C%E6%AD%A5%E6%97%B6%E9%97%B4%E4%B8%8D%E5%AF%B9/"/>
    
      <category term="logstash-input-jdbc建立索引" scheme="http://nullpointer.pw/tags/logstash-input-jdbc%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之IK分词以及拼音分词</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之IK分词以及拼音分词.html</id>
    <published>2018-09-13T13:46:52.000Z</published>
    <updated>2020-01-22T14:32:10.583Z</updated>
    
    <content type="html"><![CDATA[<p>elasticsearch 官方默认的分词插件，对中文分词效果不理想，它是把中文词语分成了一个一个的汉字。所以我们引入 es 插件 es-ik。同时为了提升用户体验，引入 es-pinyin 插件。本文介绍这两个 es 插件的安装。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><p>ik 分词器 和 pinyin 分词器在 github 仓库可以找到，注意版本与 elasticsearch 的版本需要对应，本文使用 <strong>5.5.3</strong> 版本</p><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-ik/releases/tag/v5.5.3">ik 分词器下载</a></li><li><a href="https://github.com/medcl/elasticsearch-analysis-pinyin/releases/tag/v5.5.3">pinyin 分词器下载</a></li></ul><p>如果 elasticsearch 与我的版本不同，可以去官方 github 对应的仓库查看对应版本的 ik 以及 pinyin 分词器。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="安装-ik-分词器"><a href="#安装-ik-分词器" class="headerlink" title="安装 ik 分词器"></a>安装 ik 分词器</h2><p>前文中，我们已经安装了 elasticsearch，我们在其基础上安装分词器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/</span><br><span class="line"></span><br><span class="line">## 下载 ik 分词器</span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v5.5.3/elasticsearch-analysis-ik-5.5.3.zip</span><br><span class="line"></span><br><span class="line">## 使用 unzip 解压</span><br><span class="line">## 如果未安装，通过 yum instal unzip 进行安装</span><br><span class="line">unzip elasticsearch-analysis-ik-5.5.3.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 在 elasticsearch 安装目录下的 plugins 文件夹下创建 ik 目录</span><br><span class="line">mkdir /usr/local/es/master/plugins/ik</span><br><span class="line"></span><br><span class="line">## 将解压后的 ik 目录下的所有文件移动到  /usr/local/es/master/plugins/ik/</span><br><span class="line">mv /usr/local/es/elasticsearch/* /usr/local/es/master/plugins/ik/</span><br><span class="line"></span><br><span class="line">## 重启 elasticsearch 或启动 master elasticsearch</span><br><span class="line">## 注意启动时，需要切换到 esuser 用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 启动成功后，日志里会打印此行</span><br><span class="line">[2018-09-02T06:33:43,703][INFO ][o.e.p.PluginsService     ] [master] loaded plugin [analysis-ik]</span><br></pre></td></tr></table></figure></p><h2 id="验证-ik-分词器是否生效"><a href="#验证-ik-分词器是否生效" class="headerlink" title="验证 ik 分词器是否生效"></a>验证 ik 分词器是否生效</h2><p>打开 Restlet Client 或者 postman 工具</p><p>GET <code>http://192.168.199.192:9200/_analyze?analyzer=ik_smart&amp;text=&quot;中华人民共和国国歌&quot;</code></p><blockquote><p>移除名为 ik 的analyzer和tokenizer,请分别使用 ik_smart 和 ik_max_word<br>ik_max_word: 会将文本做最细粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,中华人民,中华,华人,人民共和国,人民,人,民,共和国,共和,和,国国,国歌”，会穷尽各种可能的组合；<br>ik_smart: 会做最粗粒度的拆分，比如会将“中华人民共和国国歌”拆分为“中华人民共和国,国歌”。</p></blockquote><p>这里 analyzer 可以指定分词类型，发送请求返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tokens"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"中华人民共和国"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"国歌"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">8</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">10</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"CN_WORD"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>我这里指定的 analyzer 为 ik_smart，即粗粒度分词，可以看到 ik 分词器已经生效了。接下来继续安装 pinyin 分词器。</p><h2 id="安装-pinyin-分词器"><a href="#安装-pinyin-分词器" class="headerlink" title="安装 pinyin 分词器"></a>安装 pinyin 分词器</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/es/</span><br><span class="line"></span><br><span class="line">## 下载 pinyin 分词器</span><br><span class="line">wget https://github.com/medcl/elasticsearch-analysis-pinyin/releases/download/v5.5.3/elasticsearch-analysis-pinyin-5.5.3.zip</span><br><span class="line"></span><br><span class="line">## 使用 unzip 解压</span><br><span class="line">## 如果未安装，通过 yum instal unzip 进行安装</span><br><span class="line">unzip elasticsearch-analysis-pinyin-5.5.3.zip</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 在 elasticsearch 安装目录下的 plugins 文件夹下创建 pinyin 目录</span><br><span class="line">mkdir /usr/local/es/master/plugins/pinyin</span><br><span class="line"></span><br><span class="line">## 将解压后的 ik 目录下的所有文件移动到  /usr/local/es/master/plugins/pinyin/</span><br><span class="line">mv /usr/local/es/elasticsearch/* /usr/local/es/master/plugins/pinyin/</span><br><span class="line"></span><br><span class="line">## 重启 elasticsearch 或启动 master elasticsearch</span><br><span class="line">## 注意启动时，需要切换到 esuser 用户</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 启动成功后，日志里打印</span><br><span class="line">[2018-09-02T07:04:56,203][INFO ][o.e.p.PluginsService     ] [master] loaded plugin [analysis-ik]</span><br><span class="line">[2018-09-02T07:04:56,203][INFO ][o.e.p.PluginsService     ] [master] loaded plugin [analysis-pinyin]</span><br></pre></td></tr></table></figure><h2 id="验证-pinyin-分词器是否生效"><a href="#验证-pinyin-分词器是否生效" class="headerlink" title="验证 pinyin 分词器是否生效"></a>验证 pinyin 分词器是否生效</h2><p>打开 Restlet Client 或者 postman 工具</p><p>GET <code>http://192.168.199.192:9200/_analyze?analyzer=pinyin&amp;text=&quot;李小龙&quot;</code></p><p>这里 analyzer 可以指定分词为 <strong>pinyin</strong>，发送请求返回结果：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"tokens"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"li"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">1</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"word"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">0</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"xiao"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">2</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"word"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">1</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"long"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">4</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"word"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"token"</span>: <span class="string">"lxl"</span>,</span><br><span class="line">            <span class="attr">"start_offset"</span>: <span class="number">0</span>,</span><br><span class="line">            <span class="attr">"end_offset"</span>: <span class="number">3</span>,</span><br><span class="line">            <span class="attr">"type"</span>: <span class="string">"word"</span>,</span><br><span class="line">            <span class="attr">"position"</span>: <span class="number">2</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>观察结果，说明 pinyin 分词器也已经生效了。</p><h2 id="集群其他节点分词器安装"><a href="#集群其他节点分词器安装" class="headerlink" title="集群其他节点分词器安装"></a>集群其他节点分词器安装</h2><p>现在只对 master 进行了安装，其他 slave 也需要安装，这里可以通过拷贝的方式直接来完成安装了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r master/plugins/ slave1/</span><br><span class="line"></span><br><span class="line">cp -r master/plugins/ slave2/</span><br></pre></td></tr></table></figure></p><p>如果其他节点在不同服务器上，通过 scp 命令拷贝即可。</p><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/medcl/elasticsearch-analysis-pinyin/issues/19">https://github.com/medcl/elasticsearch-analysis-pinyin/issues/19</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;elasticsearch 官方默认的分词插件，对中文分词效果不理想，它是把中文词语分成了一个一个的汉字。所以我们引入 es 插件 es-ik。同时为了提升用户体验，引入 es-pinyin 插件。本文介绍这两个 es 插件的安装。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch之IK分词器安装" scheme="http://nullpointer.pw/tags/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    
      <category term="ElasticSearch之pinyin分词器安装" scheme="http://nullpointer.pw/tags/ElasticSearch%E4%B9%8Bpinyin%E5%88%86%E8%AF%8D%E5%99%A8%E5%AE%89%E8%A3%85/"/>
    
      <category term="ElasticSearch之IK分词器与pinyin分词器一起使用" scheme="http://nullpointer.pw/tags/ElasticSearch%E4%B9%8BIK%E5%88%86%E8%AF%8D%E5%99%A8%E4%B8%8Epinyin%E5%88%86%E8%AF%8D%E5%99%A8%E4%B8%80%E8%B5%B7%E4%BD%BF%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之ElasticSearch入门</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之ElasticSearch入门.html</id>
    <published>2018-09-13T13:45:26.000Z</published>
    <updated>2020-03-10T10:43:43.284Z</updated>
    
    <content type="html"><![CDATA[<p>本文简单介绍了使用 Rest 接口，对 es 进行操作，更深入的学习，可以参考文末部分。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><p>索引–相当于数据库<br>类型–相当于表<br>文档–相当于一条记录<br>分片–对索引进行分片，分布于集群各个节点上，降低单个节点的压力<br>备份–拷贝分片就完成了备份  </p><hr><h2 id="基本语法"><a href="#基本语法" class="headerlink" title="基本语法"></a>基本语法</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180901153578638051792.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引类型"><a href="#索引类型" class="headerlink" title="索引类型"></a>索引类型</h3><ul><li>结构化索引<ul><li>特点：通过接口创建，可以指定 mappings </li><li>url:port/索引名/类型名/_mappings</li></ul></li><li>非结构化索引 <ul><li>特点：通过 elasticsearch head 创建 mapping 为空 </li></ul></li></ul><h3 id="使用-RestClient-PostMan-创建结构化索引"><a href="#使用-RestClient-PostMan-创建结构化索引" class="headerlink" title="使用 RestClient/PostMan 创建结构化索引"></a>使用 RestClient/PostMan 创建结构化索引</h3><p>创建一个 people 的索引，包含一个类型 man</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180901153578804439765.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"settings"</span>:&#123;</span><br><span class="line">        <span class="attr">"number_of_shards"</span>:<span class="number">3</span>,</span><br><span class="line">        <span class="attr">"number_of_replicas"</span>:<span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"mappings"</span>:&#123;</span><br><span class="line">        <span class="attr">"man"</span>:&#123;</span><br><span class="line">            <span class="attr">"properties"</span>:&#123;</span><br><span class="line">                <span class="attr">"name"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"text"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"country"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"keyword"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"age"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"integer"</span></span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="attr">"date"</span>:&#123;</span><br><span class="line">                    <span class="attr">"type"</span>:<span class="string">"date"</span>,</span><br><span class="line">                    <span class="attr">"format"</span>:<span class="string">"yyyy-MM-dd HH:mm:ss||yyyy-MM-dd||epoch_millis"</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="keyword-与-text-的区别"><a href="#keyword-与-text-的区别" class="headerlink" title="keyword 与 text 的区别"></a>keyword 与 text 的区别</h4><p><strong>type 类型为 keyword 的时候，ES 不会对其进行分词，而 text 会被分词</strong></p><h2 id="es-通过-rest-接口对数据操作"><a href="#es-通过-rest-接口对数据操作" class="headerlink" title="es 通过 rest 接口对数据操作"></a>es 通过 rest 接口对数据操作</h2><h3 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h3><ol><li>指定文档 id 插入<ol><li><strong>PUT</strong> 请求：  ip:port/索引/类型/id<br><img src="http://img12345.5-project.com/20180901153578852713262.png" alt=""></li></ol></li><li>自动产生文档 id 插入<ol><li><strong>POST</strong> 请求： ip:port/索引/类型<br><img src="http://img12345.5-project.com/20180901153578859766521.png" alt=""></li></ol></li></ol><h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><ol><li>直接修改<ol><li><strong>POST</strong> 请求：  ip:port/索引/类型/id/_update<br><img src="http://img12345.5-project.com/20180901153578892736222.png" alt=""></li></ol></li></ol><h3 id="删除数据-删除索引"><a href="#删除数据-删除索引" class="headerlink" title="删除数据/删除索引"></a>删除数据/删除索引</h3><ol><li>删除文档<ol><li><strong>DELETE</strong> 请求 ip:端口/索引/类型/id</li></ol></li><li>删除索引<ol><li><strong>DELETE</strong> 请求 ip:端口/索引</li></ol></li></ol><h3 id="查询数据"><a href="#查询数据" class="headerlink" title="查询数据"></a>查询数据</h3><ol><li><p>简单查询</p><ol><li><strong>GET</strong> 请求： ip:端口/索引/类型/id</li></ol></li><li><p>条件查询</p><ol><li><strong>POST</strong>请求： ip:端口/索引/_search</li><li>指定条件查询,分页与排序 <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     <span class="attr">"query"</span>:&#123;</span><br><span class="line">         <span class="attr">"match"</span>:&#123;</span><br><span class="line">             <span class="attr">"name"</span>:<span class="string">"WeJan"</span></span><br><span class="line">         &#125;</span><br><span class="line">     &#125;,</span><br><span class="line">     <span class="attr">"sort"</span>:[</span><br><span class="line">         &#123;</span><br><span class="line">             <span class="attr">"age"</span>:&#123;</span><br><span class="line">                 <span class="attr">"order"</span>:<span class="string">"asc"</span></span><br><span class="line">             &#125;</span><br><span class="line">         &#125;</span><br><span class="line">     ],</span><br><span class="line">     <span class="attr">"from"</span> : <span class="number">0</span>,</span><br><span class="line">     <span class="attr">"size"</span> : <span class="number">10</span></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ol></li><li><p>聚合查询</p><ol><li><strong>POST</strong>请求： ip:端口/索引/_search</li><li><p>分组，可以多个分组</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">        <span class="attr">"group_by_age"</span>:&#123;</span><br><span class="line">            <span class="attr">"terms"</span>:&#123;</span><br><span class="line">                <span class="attr">"field"</span>:<span class="string">"age"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>聚合计算</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"aggs"</span>:&#123;</span><br><span class="line">        <span class="attr">"age_count"</span>:&#123;</span><br><span class="line">            <span class="attr">"stats"</span>:&#123;</span><br><span class="line">                <span class="attr">"field"</span>:<span class="string">"age"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>sum</li><li>avg</li><li>max</li><li>min</li><li>count</li></ul></li></ol></li></ol><h3 id="高级查询"><a href="#高级查询" class="headerlink" title="高级查询"></a>高级查询</h3><ol><li><p>习语匹配（全词匹配）</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"match_phrase"</span>:&#123;</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"WeJan"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>多字段匹配，多个字段包含query</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"multi_match"</span>:&#123;</span><br><span class="line">            <span class="attr">"query"</span>:<span class="string">"WeJan"</span>,</span><br><span class="line">            <span class="attr">"fields"</span>:[<span class="string">"author"</span>, <span class="string">"title"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>query_string 文本查询</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"query_string"</span>:&#123;</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"(WeJan AND Jan) OR 哈哈"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>针对多个字段的文本查询</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"query_string"</span>:&#123;</span><br><span class="line">            <span class="attr">"name"</span>:<span class="string">"WeJan OR 哈哈"</span>,</span><br><span class="line">             <span class="attr">"fields"</span>:[<span class="string">"author"</span>, <span class="string">"title"</span>]</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>字段查询,比如年龄，分类</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"term"</span>:&#123;</span><br><span class="line">           <span class="attr">"age"</span>:<span class="number">25</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>范围查询，可以对时间字段进行查询，现在使用 “now”替代</p> <figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"query"</span>:&#123;</span><br><span class="line">        <span class="attr">"range"</span>:&#123;</span><br><span class="line">          <span class="attr">"age"</span>:&#123;</span><br><span class="line">            <span class="attr">"gte"</span>:<span class="number">26</span>,</span><br><span class="line">            <span class="attr">"lte"</span>:<span class="number">36</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.imooc.com/learn/889">慕课网ElasticSearch入门</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文简单介绍了使用 Rest 接口，对 es 进行操作，更深入的学习，可以参考文末部分。&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch语法入门" scheme="http://nullpointer.pw/tags/ElasticSearch%E8%AF%AD%E6%B3%95%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>和我一起打造个简单搜索之ElasticSearch集群搭建</title>
    <link href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html"/>
    <id>http://nullpointer.pw/和我一起打造个简单搜索之ElasticSearch集群搭建.html</id>
    <published>2018-09-13T13:44:35.000Z</published>
    <updated>2020-01-22T14:31:09.646Z</updated>
    
    <content type="html"><![CDATA[<p>我们所常见的电商搜索如京东，搜索页面都会提供各种各样的筛选条件，比如品牌、尺寸、适用季节、价格区间等，同时提供排序，比如价格排序，信誉排序，销量排序等，方便了用户去找到自己心里理想的商品。</p><p>站内搜索对于一个网站几乎是标配，只是搜索的强大与否的区别，有的网站只支持关键词模糊搜索，而淘宝，京东提供了精细的筛选条件，同时支持拼音搜索等更方便的搜索方式。</p><p>由于笔者在一家做网络文学的公司工作，所以实现就是以小说为商品的搜索，具体可以参考起点网小说的搜索。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/201809061536241809780.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如图所示，起点网的搜索提供了关键词搜索和排序条件以及筛选条件，接下来，我们一起来实现这个吧~</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p>本文以及后续 es 系列文章都基于 <strong>5.5.3</strong> 这个版本的 elasticsearch ，这个版本比较稳定，可以用于生产环境。</p><h2 id="系列文章"><a href="#系列文章" class="headerlink" title="系列文章"></a>系列文章</h2><ul><li>一、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E9%9B%86%E7%BE%A4%E6%90%AD%E5%BB%BA.html">和我一起打造个简单搜索之ElasticSearch集群搭建</a></li><li>二、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之ElasticSearch入门</a></li><li>三、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BIK%E5%88%86%E8%AF%8D%E4%BB%A5%E5%8F%8A%E6%8B%BC%E9%9F%B3%E5%88%86%E8%AF%8D.html">和我一起打造个简单搜索之IK分词以及拼音分词</a></li><li>四、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BLogstash%E5%AE%9E%E6%97%B6%E5%90%8C%E6%AD%A5%E5%BB%BA%E7%AB%8B%E7%B4%A2%E5%BC%95.html">和我一起打造个简单搜索之Logstash实时同步建立索引</a></li><li>五、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%A5%E9%97%A8.html">和我一起打造个简单搜索之SpringDataElasticSearch入门</a></li><li>六、<a href="http://nullpointer.pw/%E5%92%8C%E6%88%91%E4%B8%80%E8%B5%B7%E6%89%93%E9%80%A0%E4%B8%AA%E7%AE%80%E5%8D%95%E6%90%9C%E7%B4%A2%E4%B9%8BSpringDataElasticSearch%E5%85%B3%E9%94%AE%E8%AF%8D%E9%AB%98%E4%BA%AE.html">和我一起打造个简单搜索之SpringDataElasticSearch关键词高亮</a></li><li>…</li></ul><h2 id="环境准备之-ES-集群搭建"><a href="#环境准备之-ES-集群搭建" class="headerlink" title="环境准备之 ES 集群搭建"></a>环境准备之 ES 集群搭建</h2><h3 id="master-配置"><a href="#master-配置" class="headerlink" title="master 配置"></a>master 配置</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 下载 elasticsearch</span></span></span><br><span class="line">wget https://artifacts.elastic.co/downloads/elasticsearch/elasticsearch-5.5.3.tar.gz</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 创建目录</span></span></span><br><span class="line">mkdir /usr/local/es</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 解压文件到 es 目录</span></span></span><br><span class="line">tar -xvf elasticsearch-5.5.3.tar.gz -C /usr/local/es</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 es 的配置文件</span></span></span><br><span class="line">cd /usr/local/es/elasticsearch-5.5.3/config</span><br><span class="line"></span><br><span class="line">vim elasticsearch.yml</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 在文件末尾增加</span></span></span><br><span class="line"></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: "*"</span><br><span class="line">cluster.name: es-search</span><br><span class="line">node.name: slave1</span><br><span class="line">node.master: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># 修改 es 的 jvm 设置，如果不调节，可能启动一个 master, slave 就没足够内存来启动了</span></span></span><br><span class="line"></span><br><span class="line">vim jvm.options</span><br><span class="line"></span><br><span class="line">修改</span><br><span class="line">-Xms2g </span><br><span class="line">-Xmx2g</span><br><span class="line">为</span><br><span class="line">-Xms512m</span><br><span class="line">-Xmx512m</span><br><span class="line"></span><br><span class="line">注意，如果是线上，这个内存就不要修改了，使用默认的内存 2G 即可。</span><br></pre></td></tr></table></figure><h3 id="slave-配置"><a href="#slave-配置" class="headerlink" title="slave 配置"></a>slave 配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">## 准备搭建一个伪集群 1个master + 2个slave</span><br><span class="line">cd /usr/local/es</span><br><span class="line"></span><br><span class="line">## 将目录重命名为 master</span><br><span class="line">[root@localhost es]# mv elasticsearch-5.5.3/ master</span><br><span class="line"></span><br><span class="line">##拷贝两份为 slave</span><br><span class="line">[root@localhost es]# cp -r master/ slave1</span><br><span class="line">[root@localhost es]# cp -r master/ slave2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 修改两个 slave 的配置</span><br><span class="line"></span><br><span class="line">### 修改 slave1 的配置</span><br><span class="line">[root@localhost es]# vim slave1/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">cluster.name: es-search</span><br><span class="line">node.name: slave1</span><br><span class="line">## 注意 http 端口不要设置一样，以免冲突</span><br><span class="line">http.port: 8200</span><br><span class="line">#node.master: true</span><br><span class="line">network.host: 0.0.0.0</span><br><span class="line"></span><br><span class="line">### 修改 slave2 的配置</span><br><span class="line">[root@localhost es]# vim slave2/config/elasticsearch.yml</span><br><span class="line"></span><br><span class="line">http.cors.enabled: true</span><br><span class="line">http.cors.allow-origin: &quot;*&quot;</span><br><span class="line">cluster.name: es-search</span><br><span class="line">node.name: slave2</span><br><span class="line">## 注意 http 端口不要设置一样，以免冲突</span><br><span class="line">http.port: 7200</span><br><span class="line">#node.master: true</span><br><span class="line">network.host: 0.0.0.0</span><br></pre></td></tr></table></figure><h3 id="添加用户"><a href="#添加用户" class="headerlink" title="添加用户"></a>添加用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">## 启动 es 不能使用 root 用户，所以先需要增加新的用户</span><br><span class="line"></span><br><span class="line">[root@localhost es]# adduser esuser</span><br><span class="line">[root@localhost es]# chown -R esuser /usr/local/es/</span><br><span class="line"></span><br><span class="line">## 切换到 esuser 用户</span><br><span class="line">[root@localhost es]# su esuser</span><br><span class="line">[esuser@localhost es]$ chmod 777 /usr/local/es/</span><br></pre></td></tr></table></figure><h3 id="启动集群中的-master"><a href="#启动集群中的-master" class="headerlink" title="启动集群中的 master"></a>启动集群中的 master</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"># 先测试能否正常启动</span><br><span class="line">[esuser@localhost es]$ /usr/local/es/master/bin/elasticsearch</span><br><span class="line"></span><br><span class="line"># 查看打印的日志信息</span><br><span class="line">[2018-09-02T01:45:21,125][INFO ][o.e.g.GatewayService     ] [master] recovered [0] indices into cluster_state</span><br><span class="line">[2018-09-02T01:45:21,138][INFO ][o.e.h.n.Netty4HttpServerTransport] [master] publish_address &#123;127.0.0.1:9200&#125;, bound_addresses &#123;127.0.0.1:9200&#125;</span><br><span class="line">[2018-09-02T01:45:21,138][INFO ][o.e.n.Node               ] [master] started</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 启动失败提示</span><br><span class="line">ERROR: [2] bootstrap checks failed</span><br><span class="line">[1]: max file descriptors [4096] for elasticsearch process is too low, increase to at least [65536]</span><br><span class="line">[2]: max virtual memory areas vm.max_map_count [65530] is too low, increase to at least [262144]</span><br><span class="line"></span><br><span class="line">## 切换到 root 用户，修改系统配置</span><br><span class="line">su root</span><br><span class="line"># 输入登录密码</span><br><span class="line"></span><br><span class="line">vim /etc/security/limits.conf</span><br><span class="line"></span><br><span class="line">## 在文件末尾增加，不要去掉前面的 * 号</span><br><span class="line"></span><br><span class="line">* soft nofile 300000</span><br><span class="line">* hard nofile 300000</span><br><span class="line">* soft nproc 102400</span><br><span class="line">* soft memlock unlimited</span><br><span class="line">* hard memlock unlimited</span><br><span class="line"></span><br><span class="line">## 对 sysctl.conf 文件 进行修改</span><br><span class="line">echo &quot;vm.max_map_count=262144&quot; &gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">## 修改完毕，切换回 esuser 用户身份</span><br><span class="line">su esuser</span><br><span class="line"></span><br><span class="line">## 尝试启动</span><br><span class="line">[esuser@localhost es]$ /usr/local/es/master/bin/elasticsearch</span><br><span class="line"></span><br><span class="line"># 提示已经启动成功了</span><br><span class="line">[2018-09-02T02:10:14,285][INFO ][o.e.h.n.Netty4HttpServerTransport] [master] publish_address &#123;192.168.199.192:9200&#125;, bound_addresses &#123;[::]:9200&#125;</span><br><span class="line">[2018-09-02T02:10:14,285][INFO ][o.e.n.Node               ] [master] started</span><br><span class="line">[2018-09-02T02:10:14,289][INFO ][o.e.g.GatewayService     ] [master] recovered [0] indices into cluster_state</span><br></pre></td></tr></table></figure><h3 id="验证启动"><a href="#验证启动" class="headerlink" title="验证启动"></a>验证启动</h3><p>使用浏览器访问 <code>http://ip:9200</code> ip 替换你的 ip 地址，我的是 <code>http://192.168.199.192:9200</code></p><p>浏览器响应内容<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    name: "master",</span><br><span class="line">    cluster_name: "es-search",</span><br><span class="line">    cluster_uuid: "JoNUMEKFS06NHNS7p3bdWg",</span><br><span class="line">    version: &#123;</span><br><span class="line">        number: "5.5.3",</span><br><span class="line">        build_hash: "9305a5e",</span><br><span class="line">        build_date: "2017-09-07T15:56:59.599Z",</span><br><span class="line">        build_snapshot: false,</span><br><span class="line">        lucene_version: "6.6.0"</span><br><span class="line">    &#125;,</span><br><span class="line">    tagline: "You Know, for Search"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>注意：如果无法访问，请关闭防火墙</strong></p><h3 id="后台守护进程启动-es-集群"><a href="#后台守护进程启动-es-集群" class="headerlink" title="后台守护进程启动 es 集群"></a>后台守护进程启动 es 集群</h3><p>前文是直接启动，如果按下 ctrl + c 或者结束 ssh 会话，es 会立即停止退出，因此需要通过守护进程后台启动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">[esuser@localhost es]$ /usr/local/es/master/bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line">## 查看是否启动成功</span><br><span class="line">ps -ef | grep elasticsearch</span><br><span class="line"></span><br><span class="line">## 正常可以看到一个 elasticsearch 进程</span><br><span class="line"></span><br><span class="line">## 如前文一样，分别测试两个 slave 是否可以正常启动</span><br><span class="line"></span><br><span class="line">### 测试slave1</span><br><span class="line">[esuser@localhost es]$ /usr/local/es/slave1/bin/elasticsearch -d</span><br><span class="line"></span><br><span class="line">### 浏览器访问 http://ip:8200，响应为：</span><br><span class="line">&#123;</span><br><span class="line">    &quot;name&quot;:&quot;slave1&quot;,</span><br><span class="line">    &quot;cluster_name&quot;:&quot;es-search&quot;,</span><br><span class="line">    &quot;cluster_uuid&quot;:&quot;JoNUMEKFS06NHNS7p3bdWg&quot;,</span><br><span class="line">    &quot;version&quot;:&#123;</span><br><span class="line">        &quot;number&quot;:&quot;5.5.3&quot;,</span><br><span class="line">        &quot;build_hash&quot;:&quot;9305a5e&quot;,</span><br><span class="line">        &quot;build_date&quot;:&quot;2017-09-07T15:56:59.599Z&quot;,</span><br><span class="line">        &quot;build_snapshot&quot;:false,</span><br><span class="line">        &quot;lucene_version&quot;:&quot;6.6.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;tagline&quot;:&quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 测试slave2</span><br><span class="line">[esuser@localhost es]$ /usr/local/es/slave2/bin/elasticsearch -d</span><br><span class="line">### 浏览器访问 http://ip:8200，响应为：</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    name: &quot;slave2&quot;,</span><br><span class="line">    cluster_name: &quot;es-search&quot;,</span><br><span class="line">    cluster_uuid: &quot;JoNUMEKFS06NHNS7p3bdWg&quot;,</span><br><span class="line">    version: &#123;</span><br><span class="line">        number: &quot;5.5.3&quot;,</span><br><span class="line">        build_hash: &quot;9305a5e&quot;,</span><br><span class="line">        build_date: &quot;2017-09-07T15:56:59.599Z&quot;,</span><br><span class="line">        build_snapshot: false,</span><br><span class="line">        lucene_version: &quot;6.6.0&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    tagline: &quot;You Know, for Search&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此完成了 es 集群(伪)的搭建。</p><h2 id="环境准备之-elasticsearch-head-安装"><a href="#环境准备之-elasticsearch-head-安装" class="headerlink" title="环境准备之 elasticsearch head 安装"></a>环境准备之 elasticsearch head 安装</h2><p>为了方便我们观察调试，安装这个 es 插件。</p><p>安装步骤参考官方 <a href="https://github.com/mobz/elasticsearch-head">github</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 把插件安装到 es 目录下</span><br><span class="line">cd /usr/local/es/</span><br><span class="line"></span><br><span class="line">git clone git://github.com/mobz/elasticsearch-head.git  </span><br><span class="line">cd elasticsearch-head  </span><br><span class="line">npm install</span><br><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>在 <code>npm install</code> 这一步，由于国内网络环境的原因，可能会失败，可以npm 换源重试。</p><p>启动完成后，浏览器访问 <code>http://ip:9100</code>，我的是 <code>http://192.168.199.192:9100/</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180906153624364960006.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里需要修改连接地址，为你的 es 所在的 ip:9200。后面集群健康为绿色为正常。</p><p>到这里，插件也就安好了。</p><h2 id="分词"><a href="#分词" class="headerlink" title="分词"></a>分词</h2><p>商品搜索，分词是必不可少的，开源的中文分词最有名的莫过于 IK 分词了，同时为了给用户提供更好的体验，同时配置 pinyin 分词，即输入拼音也可以进行搜索，网上也有对应的分词器，在下文中我们一起来配置分词器。</p><h2 id="有疑问"><a href="#有疑问" class="headerlink" title="有疑问?"></a>有疑问?</h2><p>欢迎来信，<a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们所常见的电商搜索如京东，搜索页面都会提供各种各样的筛选条件，比如品牌、尺寸、适用季节、价格区间等，同时提供排序，比如价格排序，信誉排序，销量排序等，方便了用户去找到自己心里理想的商品。&lt;/p&gt;
&lt;p&gt;站内搜索对于一个网站几乎是标配，只是搜索的强大与否的区别，有的网站只支持关键词模糊搜索，而淘宝，京东提供了精细的筛选条件，同时支持拼音搜索等更方便的搜索方式。&lt;/p&gt;
&lt;p&gt;由于笔者在一家做网络文学的公司工作，所以实现就是以小说为商品的搜索，具体可以参考起点网小说的搜索。&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://img12345.5-project.com/201809061536241809780.png&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;如图所示，起点网的搜索提供了关键词搜索和排序条件以及筛选条件，接下来，我们一起来实现这个吧~&lt;/p&gt;
    
    </summary>
    
      <category term="ElasticSearch" scheme="http://nullpointer.pw/categories/ElasticSearch/"/>
    
    
      <category term="ElasticSearch环境搭建" scheme="http://nullpointer.pw/tags/ElasticSearch%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>爬虫元素选择技巧</title>
    <link href="http://nullpointer.pw/%E7%88%AC%E8%99%AB%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E6%8A%80%E5%B7%A7.html"/>
    <id>http://nullpointer.pw/爬虫元素选择技巧.html</id>
    <published>2018-08-31T14:11:06.000Z</published>
    <updated>2020-01-22T14:33:56.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个爬虫框架，WebMagic 提供了多种选择器便于我们的使用。使用 Selectable 来对内容进行链式抽取，常用的抽取方式有：CSS 选择器、XPath，正则表达式，JsonPath。今天写写如何利用一些工具，来快捷编写这些选择语法。</p><a id="more"></a><h2 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h2><p>工欲善其事必先利其器，有了一件趁手的兵器，干起活来也利索。工具主要用到了</p><ul><li>Chrome 谷歌浏览器</li><li>Chrome 插件 <a href="https://chrome.google.com/webstore/detail/xpath-helper/hgimnogjllphhhkhlmebbmlgjoejdpjl">XPath Helper</a><br>(如果你翻不了 Q 的话，可以在这里 <a href="http://chromecj.com/web-development/2018-01/892.html">下载</a> 插件)</li></ul><h2 id="选择对象"><a href="#选择对象" class="headerlink" title="选择对象"></a>选择对象</h2><p>为了方便实验，我选择对 掘金 (<a href="https://juejin.im/">https://juejin.im/</a>) 这个网站进行实验。<br>以下内容默认使用的是 Chrome。</p><p>定义一个假的需求吧，需要对掘金热门进行爬取，如下所示。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180831153572214928252.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>这里我们只想要获取这里的所有的标题</p><h2 id="Xpath-抽取"><a href="#Xpath-抽取" class="headerlink" title="Xpath 抽取"></a>Xpath 抽取</h2><p>具体步骤：</p><ol><li>点击页面空白处，使用快捷键 <strong>ctrl + shift + x</strong> 调出 Xpath Helper 工具，调出后，按住 <strong>shift</strong> 移动鼠标可以选择元素，并且该元素的 xpath 会显示在上方框内<br> <img src="http://img12345.5-project.com/20180831153572291788354.png" alt=""></li><li>可以看到，工具生成的 XPath 路径非常长，需要进行优化。这里可以使用谷歌浏览器的开发者工具很方便得获取 Xpath 路径，打开开发者工具，使用开发者工具面板上最左侧的箭头选择工具，选择一个标题元素，右侧就会自动定位到该元素的源码处，右键源码里的这个元素，选择 Copy XPath。<br> <img src="http://img12345.5-project.com/2018083115357231057642.png" alt=""></li><li>清空 Xpath Helper 中的 QUERY 框内的内容，粘贴 Chrome 开发者工具拷贝的 Xpath 路径，可以清晰对比看到路径相纸上一步获取的要简短很多，我们可以在这个基础上进行进一步地优化。<br> <img src="http://img12345.5-project.com/20180831153572326370899.png" alt=""></li><li>由于我们需要获取的是所有的标题，所以修改 Xpath，同时 Xpath Helper 高亮了被选择的元素。因为当前标题是在一个列表页当中，把 li[2] 中的值修改为 * 就是选择所有了，// 表示从根元素查找，替代掉了前面多余的元素，  XPath 基础语法可以上 Google 搜索一下。<br> <img src="http://img12345.5-project.com/20180831153572349093818.png" alt=""></li></ol><h2 id="CSS-选择器"><a href="#CSS-选择器" class="headerlink" title="CSS 选择器"></a>CSS 选择器</h2><p>有的网站的 HTML 结构不适合使用 XPath 来写，会写的很长，可以尝试使用 css 选择器来完成，这里还是借助 Chrome 的开发者工具。</p><ol><li>同上一步一样，选择一个元素后，选择 Copy selector<br> <img src="http://img12345.5-project.com/2018083115357231057642.png" alt=""></li><li>可以在 Chrome 开发者工具的 console 里验证选择器是否正确,这里正确打印出了这个元素。在 webmagic 里通过 css 方法或者 $ 方法传递 css 选择器参数，得到对象.<br> <img src="http://img12345.5-project.com/20180831153572433184741.png" alt=""></li></ol><h2 id="json-path-方式"><a href="#json-path-方式" class="headerlink" title="json path 方式"></a>json path 方式</h2><p>详见我的另外一篇博客</p><h2 id="正则表达式方式"><a href="#正则表达式方式" class="headerlink" title="正则表达式方式"></a>正则表达式方式</h2><p>这个就不用多说了，通过正则抽取正文符合的内容</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;作为一个爬虫框架，WebMagic 提供了多种选择器便于我们的使用。使用 Selectable 来对内容进行链式抽取，常用的抽取方式有：CSS 选择器、XPath，正则表达式，JsonPath。今天写写如何利用一些工具，来快捷编写这些选择语法。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="爬虫技巧" scheme="http://nullpointer.pw/tags/%E7%88%AC%E8%99%AB%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
  <entry>
    <title>聊聊我的规划</title>
    <link href="http://nullpointer.pw/%E8%81%8A%E8%81%8A%E6%88%91%E7%9A%84%E8%A7%84%E5%88%92.html"/>
    <id>http://nullpointer.pw/聊聊我的规划.html</id>
    <published>2018-08-26T14:21:10.000Z</published>
    <updated>2020-01-22T14:33:56.895Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>去年的这个时候，闲着无事刷知乎，看到一个问题觉得很有意思，【<a href="https://www.zhihu.com/question/39430220r">天天写业务代码的程序员，怎么成为技术大牛，开始写技术代码？</a>】，当时的自己确实也一直是在写业务方面的代码，写的时间久了，面对着源源不断的需求，只能硬着头皮去应对，内心难免有所困扰；看到标题，我也不禁在想，什么时候我也能成为技术大牛呢？（对技术有所追求的 Coder 目标应该都是成为一个技术大牛吧）抱着这种心态，我点进了问题。</p><a id="more"></a><h2 id="我该怎么做？"><a href="#我该怎么做？" class="headerlink" title="我该怎么做？"></a>我该怎么做？</h2><p>看了几个回答，几乎都在讲大道理，看了感觉是这么一回事很有道理的样子，但是并没有起到什么实际作用。但是看到了<a href="https://www.zhihu.com/question/39430220/answer/81648584">李运华的回答</a>之后，“3D 理论”(<strong>Do more</strong>、<strong>Do better</strong>、<strong>Do exercise</strong>)对于我，用醍醐灌顶来形容也不为过，他的回答不仅解答了我的疑惑，同时也给出了具体的实际方法。兴奋之余，结合自己的工作情况，将原回答中 <strong>Do more</strong> 进行了小小改动，随后在笔记上做了一点相关的总结。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180826153529120868146.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>我把 “3D 理论” 分成了两个场景，一是在公司，另一个是在家。因为在当前的公司当中，不可能把大把的正常工作时间用于新的技术学习之上，所以，我认为在公司中能做的只有 1，2，3 这三点，而第 4 点只能利用你的业余时间来进行。</p><p>当然除了那种没有任务也必须硬是要待到 10 点以后才能下班的公司除外，这种公司，其实挤出几个小时，用于自己的学习应该也是可以的。如果可以准时下班，除掉一天的睡觉，吃饭，工作，交通的时间，可以支配的时间其实还是挺充裕的，前提是不玩游戏不刷剧，如果沉迷的话可以想一些措施来强制约束自己。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>到现在 2018 年 8 月份，已经过去了一年。很惭愧的是，笔者认为自己对于 “3D 理论”的执行力度还是远远不够，理论中的目前也只做到了其中一点，在公司里对自己负责的业务进行了较大的调整优化，也达到了预期的可靠稳定。</p><p>随着工作年限的增长，我就越发觉得程序员是个不学习就一定会被淘汰掉的职业，经常能看到某某公司辞退 40 岁以上程序员的新闻，就愈发感觉压力逐渐变大（虽然前几天我才过完  25 岁生日），其实换一个思路想，如果一个程序员在公司中是难以被取代的，那么也不会是被辞退那波人中的一名吧！</p><p>也是从去年的 7 月开始，约束自己每月至少要写两篇博客的目标也达到了，也算是执行了 “3D 理论”中的一点吧。</p><p>现在在公司中，负责的内容也发生了转变，纯业务代码写的比以前要少很多，更多的是要去关注基础服务稳定，对原有的项目优化，服务拆分等方面；但是又深觉自己的技术功底还很欠缺，忙着补充新的知识，于是在工作的产出就不是那么得多了，这也是让我很头疼的事情，毕竟工作的产出关系到自己的绩效。</p><p>可能每个时期都会出现令我头疼的事情，也许这也是让我突破自我的契机。</p><p>持续践行 “3D理论”，做一个践行的程序员，目标或许已在不远处啦~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;去年的这个时候，闲着无事刷知乎，看到一个问题觉得很有意思，【&lt;a href=&quot;https://www.zhihu.com/question/39430220r&quot;&gt;天天写业务代码的程序员，怎么成为技术大牛，开始写技术代码？&lt;/a&gt;】，当时的自己确实也一直是在写业务方面的代码，写的时间久了，面对着源源不断的需求，只能硬着头皮去应对，内心难免有所困扰；看到标题，我也不禁在想，什么时候我也能成为技术大牛呢？（对技术有所追求的 Coder 目标应该都是成为一个技术大牛吧）抱着这种心态，我点进了问题。&lt;/p&gt;
    
    </summary>
    
      <category term="闲谈" scheme="http://nullpointer.pw/categories/%E9%97%B2%E8%B0%88/"/>
    
    
  </entry>
  
  <entry>
    <title>WebMagic实现分布式抓取以及断点抓取</title>
    <link href="http://nullpointer.pw/WebMagic%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%93%E5%8F%96.html"/>
    <id>http://nullpointer.pw/WebMagic实现分布式抓取.html</id>
    <published>2018-08-04T15:30:29.000Z</published>
    <updated>2020-01-22T14:43:59.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>从去年到今年，笔者主要负责的是与合作方的内容对接，新增的合作商不是很多的情况下，在我自从去年引入了 WebMagic 这个爬虫框架之后，基本很少需要去关注维护爬虫，做的最多的是新接入合作商去写对应爬虫抓取模板。</p><p>因为在代码中实现了增量抓取，单机也足以承担日常的抓取工作。</p><p>在前两周，由于公司拓展新的业务渠道，需要接入的合作商瞬间增加了 3 倍，又被要求在 2 天内全部接入，那两天和另外一个同事，几乎都在忙着适配模板。</p><p>急速增加合作商的同时，服务器无法承受压力，频繁爆出 OOM 异常，导致抓取大批量失败，其中最多的一个合作商接口，需要解析下载的页面近 500w 个，单机抓取已无法满足需求，需要多台服务器同时抓取。</p><p>但鉴于当时需求紧，没有时间对爬虫部分代码进行重构升级，单机抓取也不行，而且会影响正常抓取任务的执行，于是临时想了个办法在其他服务器上抓取某个合作商，才坎坷解决了这个问题，但这也并非长久之计。</p><a id="more"></a><h2 id="分布式抓取基础前提之一"><a href="#分布式抓取基础前提之一" class="headerlink" title="分布式抓取基础前提之一"></a>分布式抓取基础前提之一</h2><p>因为刚刚引入 WebMagic 这个框架的时候，还不是太熟悉，使用的 Scheduler 是默认基于内存的队列 <strong>QueueScheduler</strong> ，当待抓取的 URL 太多时，内存就被占满了，从而导致 OOM。</p><p>如果要实现分布式抓取，前提需要使用基于 Redis 的 <strong>RedisScheduler</strong>。</p><p>在创建爬虫的时候，手动设置 Scheduler 为 RedisScheduler。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">spider.setScheduler(<span class="keyword">new</span> RedisScheduler(jedisPool));</span><br></pre></td></tr></table></figure><p>RedisScheduler 需要传入 JedisPool 参数。</p><p>如果使用的是 SpringBoot，可以声明一个 RedisConfig 的配置类。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedisConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.host&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String host;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.port&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.password&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.timeout&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> timeout;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.jedis.pool.max-idle&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> maxIdle;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;spring.redis.jedis.pool.max-wait&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> maxWaitMillis;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> JedisPool <span class="title">redisPoolFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        JedisPoolConfig jedisPoolConfig = <span class="keyword">new</span> JedisPoolConfig();</span><br><span class="line">        jedisPoolConfig.setMaxIdle(maxIdle);</span><br><span class="line">        jedisPoolConfig.setMaxWaitMillis(maxWaitMillis);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> JedisPool(jedisPoolConfig, host, port, timeout, password);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果使用的是 Spring，可以在 XML 中配置声明一个 Bean 节点。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"poolConfig"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPoolConfig"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxActive"</span>  <span class="attr">value</span>=<span class="string">"3000"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdle"</span> <span class="attr">value</span>=<span class="string">"100"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxWait"</span> <span class="attr">value</span>=<span class="string">"1000"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"testOnBorrow"</span>  <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"jedisPool"</span> <span class="attr">class</span>=<span class="string">"redis.clients.jedis.JedisPool"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"0"</span> <span class="attr">ref</span>=<span class="string">"poolConfig"</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"1"</span> <span class="attr">value</span>=<span class="string">"127.0.0.1"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"2"</span> <span class="attr">value</span>=<span class="string">"6379"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"3"</span> <span class="attr">value</span>=<span class="string">"60000"</span> /&gt;</span></span><br><span class="line">       <span class="tag">&lt;<span class="name">constructor-arg</span> <span class="attr">index</span>=<span class="string">"4"</span> <span class="attr">value</span>=<span class="string">"eCii8TH3xR8"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>声明了 JedisPool 之后，直接在代码中注入即可。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> JedisPool jedisPool;</span><br></pre></td></tr></table></figure></p><h2 id="分布式抓取基础前提之二"><a href="#分布式抓取基础前提之二" class="headerlink" title="分布式抓取基础前提之二"></a>分布式抓取基础前提之二</h2><p>仅仅配置了 RedisScheduler，还无法达成我们的进行分布式抓取的目的，如果需要进行分布式抓取，其队列应该是共享的，即多台服务器的多个爬虫使用同一个 Redis URL 队列，取 URL 或者添加 URL 都是同一个。</p><p>又因为是 WebMagic 在帮助我们管理 Scheduler，所以 URL 的维护也是 WebMagic 在做。</p><p>先看一段 WebMagic 的源码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    checkRunningStat();</span><br><span class="line">    initComponent();</span><br><span class="line">    logger.info(<span class="string">"Spider &#123;&#125; started!"</span>,getUUID());</span><br><span class="line">    <span class="keyword">while</span> (!Thread.currentThread().isInterrupted() &amp;&amp; stat.get() == STAT_RUNNING) &#123;</span><br><span class="line">        <span class="keyword">final</span> Request request = scheduler.poll(<span class="keyword">this</span>);</span><br><span class="line">        <span class="keyword">if</span> (request == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (threadPool.getThreadAlive() == <span class="number">0</span> &amp;&amp; exitWhenComplete) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// wait until new url added</span></span><br><span class="line">            waitNewUrl();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// ......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// ......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到 WebMagic 抓取的时候通过这行代码获取队列中待抓取的 URL 地址。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Request request = scheduler.poll(<span class="keyword">this</span>);</span><br></pre></td></tr></table></figure><p>而这个 this 是指实现了 Task 接口的对象，即把当前的 Spider 对象作为参数传入。</p><p>因为我们使用了 RedisScheduler，所以进入该类的 poll() 方法查看。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">String url = jedis.lpop(getQueueKey(task));</span><br></pre></td></tr></table></figure><p>通过 task 的 UUID 获取到队列的 key，然后利用 redis 的 list 的 lpop 命令从队列左侧弹出一个带抓取的 URL，构造 Request 对象。</p><p>同样的查看 poll 上面的 pushWhenNoDuplicate 方法，是将待抓取请求的 URL push到队列的右侧，而这个队列也是通过 Spider 的 UUID 里唯一确定的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.rpush(getQueueKey(task), request.getUrl());</span><br></pre></td></tr></table></figure><p><strong>所以，如果要实现分布式同时抓取同一个队列，就需要保持 多个 Spider 的 UUID 是一致的</strong></p><h2 id="实现分布式抓取"><a href="#实现分布式抓取" class="headerlink" title="实现分布式抓取"></a>实现分布式抓取</h2><p>用过 WebMagic 的人都知道，爬虫启动需要给他一个起始 URL，然后通过这个 URL 获取新的 URL；所以如果需要进行分布式抓取，肯定爬虫的起始 URL 是不能相同的，因为WebMagic 会对重复的 URL 进行自动去重。</p><p>因此爬虫的架构图从</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180804153339577157412.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>变成了如下架构</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180804153339572932005.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>即保证多个爬虫使用同一个 Redis 队列。具体思路就是第一只通过起始 URL 爬虫启动的时候，记录启动爬虫的设置UUID，然后启动其他爬虫的时候，设置爬虫的 UUID 为记录的 UUID 的值。</p><p>代码中体现的就是如下所示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180804153339696246963.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>启动其他爬虫的时候，手动从队列中获取 URL 设置为启动 URL 即可。</p><h2 id="分布式爬虫任务调度"><a href="#分布式爬虫任务调度" class="headerlink" title="分布式爬虫任务调度"></a>分布式爬虫任务调度</h2><p>笔者实现的爬虫启动是通过定时任务启动的，因为其他爬虫与第一只爬虫的入口不同，因此定义了两个任务去调度，并且两个任务之间有 30s 的间隔时间，防止第一只爬虫还未添加 URL 到队列当中，而造成其他爬虫无 URL 可抓取情况的发生。</p><p>基于这个思路，因 URL 放在 Redis 之中，所以同时也可以实现 <strong>断点抓取。</strong></p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>WebMagic 的源码很简洁易懂，可以学习到很多东西，尤其是多线程以及锁的应用，很值得借鉴学习。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;从去年到今年，笔者主要负责的是与合作方的内容对接，新增的合作商不是很多的情况下，在我自从去年引入了 WebMagic 这个爬虫框架之后，基本很少需要去关注维护爬虫，做的最多的是新接入合作商去写对应爬虫抓取模板。&lt;/p&gt;
&lt;p&gt;因为在代码中实现了增量抓取，单机也足以承担日常的抓取工作。&lt;/p&gt;
&lt;p&gt;在前两周，由于公司拓展新的业务渠道，需要接入的合作商瞬间增加了 3 倍，又被要求在 2 天内全部接入，那两天和另外一个同事，几乎都在忙着适配模板。&lt;/p&gt;
&lt;p&gt;急速增加合作商的同时，服务器无法承受压力，频繁爆出 OOM 异常，导致抓取大批量失败，其中最多的一个合作商接口，需要解析下载的页面近 500w 个，单机抓取已无法满足需求，需要多台服务器同时抓取。&lt;/p&gt;
&lt;p&gt;但鉴于当时需求紧，没有时间对爬虫部分代码进行重构升级，单机抓取也不行，而且会影响正常抓取任务的执行，于是临时想了个办法在其他服务器上抓取某个合作商，才坎坷解决了这个问题，但这也并非长久之计。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="WebMagic分布式抓取" scheme="http://nullpointer.pw/tags/WebMagic%E5%88%86%E5%B8%83%E5%BC%8F%E6%8A%93%E5%8F%96/"/>
    
      <category term="WebMagic断点抓取" scheme="http://nullpointer.pw/tags/WebMagic%E6%96%AD%E7%82%B9%E6%8A%93%E5%8F%96/"/>
    
  </entry>
  
  <entry>
    <title>IDEA远程调试Tomcat</title>
    <link href="http://nullpointer.pw/IDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95Tomcat.html"/>
    <id>http://nullpointer.pw/IDEA远程调试Tomcat.html</id>
    <published>2018-07-28T02:40:28.000Z</published>
    <updated>2020-01-22T14:37:59.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>开发新功能时，经常会遇到在本地环境运行没问题，但是部署到了 Linux 服务器上跑的时候就出现问题这种情况；还有一种情况是需要定位线上问题，这两种情况以前的做法就是加 log 日志输出，总是不能精准定位问题所在，如果能够像本地环境一样调试代码，那这个问题也就迎刃而解了。</p><a id="more"></a><h2 id="开始之前"><a href="#开始之前" class="headerlink" title="开始之前"></a>开始之前</h2><p>本文介绍 IDEA 与 Tomcat 的远程调试，且<strong>笔者在日常工作当中也是这么做的</strong>，网上很多都是互相抄袭，没有经过验证的伪原创，让人不快。</p><h2 id="一、添加运行项"><a href="#一、添加运行项" class="headerlink" title="一、添加运行项"></a>一、添加运行项</h2><p>IDEA 添加远程调试项</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180508/155321907.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>填写服务器 IP ，端口使用默认的即可，复制第二行参数</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180508/160344543.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="二、修改服务器中的-Tomcat-配置"><a href="#二、修改服务器中的-Tomcat-配置" class="headerlink" title="二、修改服务器中的 Tomcat 配置"></a>二、修改服务器中的 Tomcat 配置</h2><p>连接远程服务器，进入 Tomcat 根目录下的 <code>bin</code> 目录，修改 <code>catalina.sh</code> 文件</p><p>定位到 108 行左右，找到 <code>cygwin=false</code> 这一行，</p><p>在这一行的前一行添加</p><p><code>JAVA_OPTS=&quot;&quot;</code></p><p>然后将从 IDEA 中复制的那串参数粘贴到双引号之间，保存退出。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/102842589.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后启动 Tomcat，如果 Tomcat 是已经启动的话，必须要<strong>重启</strong>一下。</p><h2 id="三、调试环境修改"><a href="#三、调试环境修改" class="headerlink" title="三、调试环境修改"></a>三、调试环境修改</h2><p>为了调试方便，需要暂时关闭掉防火墙，否则可能无法连接。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables stop</span><br></pre></td></tr></table></figure></p><h2 id="四、IDEA-远程调试"><a href="#四、IDEA-远程调试" class="headerlink" title="四、IDEA 远程调试"></a>四、IDEA 远程调试</h2><p>回到 IDEA，点击 Debug 按钮，启动刚才添加的 Remote，如果以上没有配置错，那么控制台将打印出</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180508/161146521.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时就和本地调试一样打断点调试就行了</p><h2 id="五、解决IDEA-无法连接远程-Tomcat"><a href="#五、解决IDEA-无法连接远程-Tomcat" class="headerlink" title="五、解决IDEA 无法连接远程 Tomcat"></a>五、解决IDEA 无法连接远程 Tomcat</h2><p>如果提示无法连接，如下图  </p><p><img src="http://img12345.5-project.com/blog/20180508/164001814.png?imageslim" alt=""></p><p>则检查以上配置是否正确，确认都正确的话，可能是服务器防火墙的原因导致，需要关闭防火墙。</p><p><strong>如果服务器是阿里云的，还需要配置 ECS 服务器的安全组，开放 <code>5005</code> 远程调试端口。 详见第八条</strong></p><h2 id="六、解决断点不生效"><a href="#六、解决断点不生效" class="headerlink" title="六、解决断点不生效"></a>六、解决断点不生效</h2><p>注意：</p><p>启动 Remote 的 Debug 之后，需要等待断点变成如下图时，再去访问接口；如果断点中间没有出现对号，说明断点还未生效，需要等待一会儿。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180508/163525309.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>如果有时候死活也没法断点，就把服务器上的 Tomcat 重启一下试试！</p><h2 id="七、其他问题"><a href="#七、其他问题" class="headerlink" title="七、其他问题"></a>七、其他问题</h2><p>因为在 catalina.sh 中添加了远程调试的参数，导致使用 tomcat 的 bin/shutdown.sh 时，可能无法完全停止服务器。可以直接 kill 掉服务器，如果不再进行远程调试，最后把远程调试参数注释掉重启。</p><h2 id="八、阿里云-ECS-安全组设置"><a href="#八、阿里云-ECS-安全组设置" class="headerlink" title="八、阿里云 ECS 安全组设置"></a>八、阿里云 ECS 安全组设置</h2><p>进入 ECS 控制台，点击安全组</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/103855731.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后选择 创建安全组</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/104030559.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>然后配置该安全组的规则</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/104112424.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>点击公网入标签</strong>，再点击右上角 添加安全组规则</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/104517431.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>授权对象 填写你的 ip 地址即可。</p><p>添加完安全组之后，进入 ECS 实例</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180727/103740709.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择右侧 加入安全组，选择加入刚才添加的安全组即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;开发新功能时，经常会遇到在本地环境运行没问题，但是部署到了 Linux 服务器上跑的时候就出现问题这种情况；还有一种情况是需要定位线上问题，这两种情况以前的做法就是加 log 日志输出，总是不能精准定位问题所在，如果能够像本地环境一样调试代码，那这个问题也就迎刃而解了。&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Tomcat远程调试" scheme="http://nullpointer.pw/tags/Tomcat%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/"/>
    
      <category term="解决IDEA无法远程调试Tomcat" scheme="http://nullpointer.pw/tags/%E8%A7%A3%E5%86%B3IDEA%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95Tomcat/"/>
    
      <category term="解决IDEA远程调试断点不生效" scheme="http://nullpointer.pw/tags/%E8%A7%A3%E5%86%B3IDEA%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95%E6%96%AD%E7%82%B9%E4%B8%8D%E7%94%9F%E6%95%88/"/>
    
  </entry>
  
  <entry>
    <title>微信公众号强制关注</title>
    <link href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%BA%E5%88%B6%E5%85%B3%E6%B3%A8%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://nullpointer.pw/微信公众号强制关注的实现.html</id>
    <published>2018-07-07T10:36:59.000Z</published>
    <updated>2020-01-22T14:34:38.094Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信官方规定是不允许诱导关注的，所以强制关注就更加不可能的，但是道高一丈魔高一丈，总是有各种对策来绕过这些规定。</p><p>比如笔者所在的公司行业，有公司开发功能进行推广小说，访问推广链接后，阅读到某一章时，弹出二维码才能继续阅读，其实这里就是变相的微信公众号强制关注了。关注他的二维码之后，公众号就会自动发送消息，给出继续阅读的链接地址，读者点进去之后才可以接着读。</p><p>其实这个功能我之前也写过一篇博文，<a href="http://nullpointer.pw/基于微信事件二维码推广.html">基于微信事件二维码推广</a>，实现的功能就和上述一致，但是，由于使用到了微信事件二维码，所以<strong>只能使用微信的服务号</strong>，而普通的订阅号没有这个接口权限。那么订阅号怎么实现呢？也是被我生生想出了个法子，来达到类似服务号使用参数二维码的效果，而且服务号与订阅号通用。</p><a id="more"></a><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>公司新开发了一个分销平台项目，可以让商户即个人公众号主拥有自己的小说网站，收入与公司进行分成，从而达到了双收的效果。</p><p>商户为了增加粉丝数量，于是我们开发了上述需求的功能。但是这些商户基本上都用的是订阅号，前文也提到，订阅号无法使用参数二维码接口，所以只能另辟蹊径。</p><h2 id="流程图"><a href="#流程图" class="headerlink" title="流程图"></a>流程图</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180705/141232778.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="流程梳理"><a href="#流程梳理" class="headerlink" title="流程梳理"></a>流程梳理</h2><p>首先我们在后台配置微信二维码，然后针对某一本小说，指定开始章节与显示二维码章节的 ID，生成推广链接，如下格式：<br><code>http://m.domain.com/link?code=7788</code>，以下简称 A 链接。<br>然后商户发推文，设置阅读原文的链接地址为 A 链接。</p><p>当用户访问这个 A 链接的时候，跳转阅读页，待其阅读到二维码章节时，将二维码章节的下一章节 ID 写入 Cookie 之中，同时弹出二维码提示关注。</p><p>用户关注，触发了微信的 <strong>SUBSCRIBE</strong> 事件，给用户发送继续阅读的消息，如下格式：<br><code>http://m.domain.com/reading</code>，以下简称 B 链接，该链接是固定不变的。</p><p><img src="http://img12345.5-project.com/blog/20180705/135619684.png?imageslim" alt=""></p><p>如果用户点击了该消息，则打开了 B 链接，读取之前存储的 Cookie 信息，得到继续阅读的章节 ID，然后组装阅读 URL，通过 redirect 跳转即可。（如果用户是正常关注，也会发送消息，如果点击，找不到该 Cookie，跳转首页即可）</p><p>这是针对公司需求开发的，其实，主要的地方在于参数的传递。除了关注事件，微信还有许多其他事件可供使用，比如菜单点击事件，至于怎么用，就看你的了。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微信官方规定是不允许诱导关注的，所以强制关注就更加不可能的，但是道高一丈魔高一丈，总是有各种对策来绕过这些规定。&lt;/p&gt;
&lt;p&gt;比如笔者所在的公司行业，有公司开发功能进行推广小说，访问推广链接后，阅读到某一章时，弹出二维码才能继续阅读，其实这里就是变相的微信公众号强制关注了。关注他的二维码之后，公众号就会自动发送消息，给出继续阅读的链接地址，读者点进去之后才可以接着读。&lt;/p&gt;
&lt;p&gt;其实这个功能我之前也写过一篇博文，&lt;a href=&quot;http://nullpointer.pw/基于微信事件二维码推广.html&quot;&gt;基于微信事件二维码推广&lt;/a&gt;，实现的功能就和上述一致，但是，由于使用到了微信事件二维码，所以&lt;strong&gt;只能使用微信的服务号&lt;/strong&gt;，而普通的订阅号没有这个接口权限。那么订阅号怎么实现呢？也是被我生生想出了个法子，来达到类似服务号使用参数二维码的效果，而且服务号与订阅号通用。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="微信公众号强制关注" scheme="http://nullpointer.pw/tags/%E5%BE%AE%E4%BF%A1%E5%85%AC%E4%BC%97%E5%8F%B7%E5%BC%BA%E5%88%B6%E5%85%B3%E6%B3%A8/"/>
    
      <category term="订阅号参数二维码" scheme="http://nullpointer.pw/tags/%E8%AE%A2%E9%98%85%E5%8F%B7%E5%8F%82%E6%95%B0%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Java实现排行榜基于Redis</title>
    <link href="http://nullpointer.pw/Java%E5%AE%9E%E7%8E%B0%E6%8E%92%E8%A1%8C%E6%A6%9C%E5%9F%BA%E4%BA%8ERedis.html"/>
    <id>http://nullpointer.pw/Java实现排行榜基于Redis.html</id>
    <published>2018-06-10T01:45:52.000Z</published>
    <updated>2020-01-22T14:39:44.757Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>排行榜作为互联网应用中几乎必不可少的一个元素，其能够勾起人类自身对比的欲望，从而来增加商品的销量。排行榜的实现方式基本大同小异，大部分都基于 Redis 的有序集合 sorted set 来实现。不久前，负责开发一个活动，就有排行榜这个需求，笔者也使用 Redis 进行了实现。本文通过了商品销售排行榜这一模型，来进行演示。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><ol><li>按照商品销量进行排行</li><li>可以获得指定商品的排名</li><li>显示实时销售动态情况</li></ol><h2 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h2><p>分析需求，以上这些都可以通过 Redis 的有序集合相关命令进行实现，首先看一下使用到的具体 Redis 命令。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; ZADD bangdan 1 &quot;one&quot;</span><br><span class="line">(integer) 1</span><br><span class="line"># 对有序集合中指定成员的分数加上增量</span><br><span class="line"></span><br><span class="line">redis&gt; zadd bangdan 1 &quot;one&quot; 4 &quot;three&quot; 3 &quot;two&quot;</span><br><span class="line">(integer) 2</span><br><span class="line"># 将一个或多个成员以及分数加入到有序集合中</span><br><span class="line"></span><br><span class="line">redis&gt; zrange bangdan 0 1</span><br><span class="line">1) &quot;one&quot;</span><br><span class="line">2) &quot;three&quot;</span><br><span class="line"># 按照 score 升序排列 ,取出前两名</span><br><span class="line"></span><br><span class="line">redis&gt; zscore bangdan three</span><br><span class="line">&quot;4&quot;</span><br><span class="line"># 获得榜单中指定元素的score</span><br><span class="line"></span><br><span class="line">redis&gt; zrank bangdan one</span><br><span class="line">(integer) 0</span><br><span class="line"># 在升序榜中的名次 第一返回0</span><br><span class="line"></span><br><span class="line"># 第三个需求需要使用 Redis 的 list 来进行实现</span><br><span class="line"></span><br><span class="line">redis&gt; LPUSH dynamic abc</span><br><span class="line">(integer) 1</span><br><span class="line"># 向队列左侧头部 push 数据</span><br><span class="line"></span><br><span class="line">redis&gt; LINDEX dynamic 0</span><br><span class="line">&quot;abc&quot;</span><br><span class="line"># 通过索引获取列表中的元素</span><br><span class="line"></span><br><span class="line">redis&gt; LTRIM dynamic 0 2</span><br><span class="line">&quot;abc&quot;</span><br><span class="line"># 对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除</span><br></pre></td></tr></table></figure></p><h2 id="排行榜预览"><a href="#排行榜预览" class="headerlink" title="排行榜预览"></a>排行榜预览</h2><p>按照需求开发，最后的效果如下：  </p><p><img src="http://img12345.5-project.com/20180610152859148695744.png" alt=""></p><p>以下通过 Java 代码实现。</p><h2 id="通过-Java-实现排行榜"><a href="#通过-Java-实现排行榜" class="headerlink" title="通过 Java 实现排行榜"></a>通过 Java 实现排行榜</h2><h3 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h3><p>项目中使用到了 Redis，因此需要引入相关依赖，为了简明演示，这里没有使用 JedisPool。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>redis.clients<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jedis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="开发逻辑"><a href="#开发逻辑" class="headerlink" title="开发逻辑"></a>开发逻辑</h3><ol><li><p>页面上点击一次购买按钮，则对该手机的销量加 1，同时将销售动态添加到队列当中</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">jedis.zincrby(Constants.SALES_LIST, <span class="number">1</span>, String.valueOf(phoneId));</span><br><span class="line">jedis.lpush(Constants.BUY_DYNAMIC, msg);</span><br></pre></td></tr></table></figure></li><li><p>获得排行榜</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按照scope升序排名，取出前五</span></span><br><span class="line">jedis.zrevrangeWithScores(Constants.SALES_LIST, <span class="number">0</span>, <span class="number">4</span>);</span><br></pre></td></tr></table></figure></li><li><p>获得指定手机的排名情况</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jedis.zrevrank(Constants.SALES_LIST, String.valueOf(phoneId));</span><br></pre></td></tr></table></figure></li><li><p>获得销售动态，此处只取 3 条，同时队列只保存最新的 20 条动态</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">List&lt;DynamicVO&gt; dynamicList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++) &#123;</span><br><span class="line">        String result = jedis.lindex(Constants.BUY_DYNAMIC, i);</span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isEmpty(result)) &#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        String[] arr = result.split(Constants.separator);</span><br><span class="line">        <span class="keyword">long</span> time = Long.valueOf(arr[<span class="number">0</span>]);</span><br><span class="line">        String phone = arr[<span class="number">1</span>];</span><br><span class="line">        DynamicVO vo = <span class="keyword">new</span> DynamicVO();</span><br><span class="line">        vo.setPhone(phone);</span><br><span class="line">        vo.setTime(StringUtil.showTime(<span class="keyword">new</span> Date(time)));</span><br><span class="line">        dynamicList.add(vo);</span><br><span class="line">&#125;</span><br><span class="line">jedis.ltrim(Constants.BUY_DYNAMIC, <span class="number">0</span>, <span class="number">19</span>);</span><br></pre></td></tr></table></figure></li><li><p>因为排行榜这种实时性比较强的数据，更新比较快，个人觉得没有必要进行持久化，如果 Redis 的排行榜数据丢失，可以通过代码重新计算排行，通过 zadd 命令，重新添加到 Redis 中即可。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Double&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    map.put(<span class="string">"1"</span>, <span class="number">4.0</span>);</span><br><span class="line">    map.put(<span class="string">"2"</span>, <span class="number">2.0</span>);</span><br><span class="line">    map.put(<span class="string">"3"</span>, <span class="number">3.0</span>);</span><br><span class="line">jedis.zadd(Constants.SALES_LIST, map);</span><br></pre></td></tr></table></figure></li></ol><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="https://github.com/Mosiki/RedisListExample">点我下载</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;排行榜作为互联网应用中几乎必不可少的一个元素，其能够勾起人类自身对比的欲望，从而来增加商品的销量。排行榜的实现方式基本大同小异，大部分都基于
      
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="Redis排行榜" scheme="http://nullpointer.pw/tags/Redis%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    
      <category term="Java排行榜" scheme="http://nullpointer.pw/tags/Java%E6%8E%92%E8%A1%8C%E6%A6%9C/"/>
    
  </entry>
  
  <entry>
    <title>Dom4j生成XML</title>
    <link href="http://nullpointer.pw/Dom4J%E7%94%9F%E6%88%90XML.html"/>
    <id>http://nullpointer.pw/Dom4J生成XML.html</id>
    <published>2018-06-04T08:50:29.000Z</published>
    <updated>2020-01-22T14:36:11.090Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在看本篇文章之前，先探讨一下常见的两种数据格式，一种是 JSON，另外一种就是 XML，在日常工作中不可避免地都会对这两种数据格式进行接触。</p><p>JSON 格式灵活，有大量的支持库，操作起来极为方便；而 XML 操作起来就不是很顺手了。 JSON 格式灵活的就会导致结构不够统一规范，而 XML 有了 XML Schema 以及 DTD 约束进行校验，也减少了数据格式不规范的问题。</p><p>对于以上这点，个人是深有体会，因为在工作中需要经常和其他公司的技术打交道。公司合作有内容输出以及内容引入两种，内容引入就是去抓取其他公司的授权接口内容，文档制定的数据格式是 JSON 的，但是可能对方参照我方文档进行接口开发时，会忽略掉一些事项，比如数据类型、时间格式等等，造成我方抓取之后，出现错误的情况；</p><p>而在和百度内容输出进行接口对接的时候，百度需要 XML 格式的数据，如果我方接口中的数据不符合对方的 XML 约束的话，对方就能马上停止抓取，反馈问题，由此避免错误情况的发生。</p><p>平时为了图方便，很多接口都使用 JSON，对于 XML 也比较生疏，但还是不可避免接触到使用，开发过微信公众号的都知道，微信接口基本都使用的是 XML。在开发了微信图文回复之后，需要组装 XML 发送给微信服务器，可能有人说，那用字符串拼装不也是可以的么，干嘛那么麻烦非要用 DOM4J 呢？确实公司中一些项目的微信支付，也使用的是字符串拼接 XML 的方式，但是多掌握一些技术也并不是什么坏事！</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>首先引入 dom4j 依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.dom4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>dom4j<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><p>接到需求，要求用户发送作品名称，自动图文回复搜索相关作品，微信的接口是这样的：  </p><p><img src="http://img12345.5-project.com/blog/20180426/155812049.png?imageslim" alt=""></p><p>需要的 XML 文档格式如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">xml</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ToUserName</span>&gt;</span>&lt;![CDATA[toUser]]&gt;<span class="tag">&lt;/<span class="name">ToUserName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">FromUserName</span>&gt;</span>&lt;![CDATA[fromUser]]&gt;<span class="tag">&lt;/<span class="name">FromUserName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">CreateTime</span>&gt;</span>12345678<span class="tag">&lt;/<span class="name">CreateTime</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">MsgType</span>&gt;</span>&lt;![CDATA[news]]&gt;<span class="tag">&lt;/<span class="name">MsgType</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ArticleCount</span>&gt;</span>2<span class="tag">&lt;/<span class="name">ArticleCount</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">Articles</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[title]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[description]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PicUrl</span>&gt;</span>&lt;![CDATA[picurl]]&gt;<span class="tag">&lt;/<span class="name">PicUrl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Url</span>&gt;</span>&lt;![CDATA[url]]&gt;<span class="tag">&lt;/<span class="name">Url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Title</span>&gt;</span>&lt;![CDATA[title]]&gt;<span class="tag">&lt;/<span class="name">Title</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Description</span>&gt;</span>&lt;![CDATA[description]]&gt;<span class="tag">&lt;/<span class="name">Description</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">PicUrl</span>&gt;</span>&lt;![CDATA[picurl]]&gt;<span class="tag">&lt;/<span class="name">PicUrl</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">Url</span>&gt;</span>&lt;![CDATA[url]]&gt;<span class="tag">&lt;/<span class="name">Url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">Articles</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">xml</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="需求实现"><a href="#需求实现" class="headerlink" title="需求实现"></a>需求实现</h2><p>其实这个接口也就是组装数据，然后发送给微信就可以了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 1. 创建文档对象</span></span><br><span class="line">    Document doc = DocumentHelper.createDocument();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 2. 新增根节点</span></span><br><span class="line">    Element rootXML = doc.addElement(<span class="string">"xml"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 向根节点添加子节点</span></span><br><span class="line">    rootXML.addElement(<span class="string">"ToUserName"</span>).addCDATA(<span class="string">"toUser"</span>);</span><br><span class="line">    rootXML.addElement(<span class="string">"FromUserName"</span>).addCDATA(<span class="string">"fromUser"</span>);</span><br><span class="line">    rootXML.addElement(<span class="string">"CreateTime"</span>).setText(<span class="string">"12345678"</span>);</span><br><span class="line">    rootXML.addElement(<span class="string">"MsgType"</span>).addCDATA(<span class="string">"news"</span>);</span><br><span class="line">    rootXML.addElement(<span class="string">"ArticleCount"</span>).setText(<span class="string">"2"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建节点</span></span><br><span class="line">    Element subElement = DocumentHelper.createElement(<span class="string">"Articles"</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++) &#123;</span><br><span class="line">        Element itemElement = DocumentHelper.createElement(<span class="string">"item"</span>);</span><br><span class="line">        itemElement.addElement(<span class="string">"Title"</span>).addCDATA(<span class="string">"title"</span>);</span><br><span class="line">        itemElement.addElement(<span class="string">"Description"</span>).addCDATA(<span class="string">"description"</span>);</span><br><span class="line">        itemElement.addElement(<span class="string">"PicUrl"</span>).addCDATA(<span class="string">"picurl"</span>);</span><br><span class="line">        itemElement.addElement(<span class="string">"Url"</span>).addCDATA(<span class="string">"url"</span>);</span><br><span class="line">        subElement.add(itemElement);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 向根节点追加节点</span></span><br><span class="line">    rootXML.add(subElement);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 4. 输出xml字符串</span></span><br><span class="line">    System.out.println(rootXML.asXML());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>最近博客文章都是个人的总结性文章，没有涉及什么难的技术，希望对你有所帮助！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在看本篇文章之前，先探讨一下常见的两种数据格式，一种是 JSON，另外一种就是 XML，在日常工作中不可避免地都会对这两种数据格式进行接触。
      
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="XML 生成" scheme="http://nullpointer.pw/tags/XML-%E7%94%9F%E6%88%90/"/>
    
      <category term="Dom4j" scheme="http://nullpointer.pw/tags/Dom4j/"/>
    
  </entry>
  
  <entry>
    <title>jsonpath解析</title>
    <link href="http://nullpointer.pw/jsonpath%E8%A7%A3%E6%9E%90.html"/>
    <id>http://nullpointer.pw/jsonpath解析.html</id>
    <published>2018-05-19T09:46:15.000Z</published>
    <updated>2020-01-22T14:40:35.299Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在工作中，经常会遇到从一串 JSON 中提取一个或多个字段的情况，常用的做法就是将其反序列化为 JSONObject 对象，然后从对象中获取，如果是 JSONArray 就进行迭代获取，总之比较麻烦。可以使用 <strong>JsonPath</strong> 快速提取所需信息。</p><a id="more"></a><h2 id="JSONPATH-简明语法"><a href="#JSONPATH-简明语法" class="headerlink" title="JSONPATH 简明语法"></a>JSONPATH 简明语法</h2><table><thead><tr><th style="text-align:center">JsonPath</th><th>描述</th></tr></thead><tbody><tr><td style="text-align:center">$</td><td>根节点</td></tr><tr><td style="text-align:center">@</td><td>当前节点</td></tr><tr><td style="text-align:center">.or[]</td><td>子节点</td></tr><tr><td style="text-align:center">..</td><td>选择所有符合条件的节点</td></tr><tr><td style="text-align:center">*</td><td>所有节点</td></tr><tr><td style="text-align:center">[]</td><td>迭代器标示，如数组下标</td></tr><tr><td style="text-align:center">[,]</td><td>支持迭代器中做多选</td></tr><tr><td style="text-align:center">[start:end:step]</td><td>数组切片运算符</td></tr><tr><td style="text-align:center">?()</td><td>支持过滤操作</td></tr><tr><td style="text-align:center">()</td><td>支持表达式计算</td></tr></tbody></table><h2 id="尝试-JsonPath-前提准备"><a href="#尝试-JsonPath-前提准备" class="headerlink" title="尝试 JsonPath 前提准备"></a>尝试 JsonPath 前提准备</h2><p>maven 工程引入 jsonpath 的依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.jayway.jsonpath<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>json-path<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.4.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>有人说，FastJson 自带了 JSONPath，为什么不用要用这个呢？我只能回 FastJson 确实很好用，但是 FastJson 的 JsonPath 是真难用！</p><h2 id="JsonPath-简单入门版"><a href="#JsonPath-简单入门版" class="headerlink" title="JsonPath 简单入门版"></a>JsonPath 简单入门版</h2><p>给定一串 JSON 如下所示：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"store"</span>: &#123;</span><br><span class="line">    <span class="attr">"book"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"文学"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"曹雪芹"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"红楼梦"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">47.20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"心理"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"凯利·麦格尼格尔"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"自控力"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">30.20</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"励志"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"史蒂芬·柯维"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"高效能人士的七个习惯"</span>,</span><br><span class="line">        <span class="attr">"isbn"</span>: <span class="string">"7515326395"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">51</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">        <span class="attr">"category"</span>: <span class="string">"小说"</span>,</span><br><span class="line">        <span class="attr">"author"</span>: <span class="string">"毛姆"</span>,</span><br><span class="line">        <span class="attr">"title"</span>: <span class="string">"月亮与六便士"</span>,</span><br><span class="line">        <span class="attr">"isbn"</span>: <span class="string">"7533936027"</span>,</span><br><span class="line">        <span class="attr">"price"</span>: <span class="number">19.50</span></span><br><span class="line">      &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"bicycle"</span>: &#123;</span><br><span class="line">      <span class="attr">"color"</span>: <span class="string">"red"</span>,</span><br><span class="line">      <span class="attr">"price"</span>: <span class="number">19.95</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要按照条件提取信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonPathExample</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 读取上面的那串 JSON </span></span><br><span class="line">        File file = <span class="keyword">new</span> File(JsonPathExample.class.getClassLoader().getResource(<span class="string">"store.json"</span>).getPath());</span><br><span class="line">        String storeJson = FileUtils.readFileToString(file);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 注意使用 JsonPath ，不要使用 FastJson 的 JSONPath</span></span><br><span class="line">        <span class="comment">// 输出第一本书的作者</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$.store.book[0].author"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果： 曹雪芹</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出所有书的作者</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$.store.book[*].author"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果： ["曹雪芹","凯利·麦格尼格尔","史蒂芬·柯维","毛姆"]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出分类为文学的书信息</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$.store.book[?(@.category =='文学')]"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果： [&#123;"author":"曹雪芹","price":47.2,"category":"文学","title":"红楼梦"&#125;]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出价格大于 50 的书</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$.store.book[?(@.price &gt; 50)]"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: [&#123;"author":"史蒂芬·柯维","price":51,"isbn":"7515326395","category":"励志","title":"高效能人士的七个习惯"&#125;]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出 book[*] 中包含 isbn 的书</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$.store.book[?(@.isbn)]"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: [&#123;"author":"史蒂芬·柯维","price":51,"isbn":"7515326395","category":"励志","title":"高效能人士的七个习惯"&#125;,&#123;"author":"毛姆","price":19.5,"isbn":"7533936027","category":"小说","title":"月亮与六便士"&#125;]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 输出 json 中所有的 price</span></span><br><span class="line">        println(JsonPath.read(storeJson, <span class="string">"$..price"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: [19.95,47.2,30.2,51,19.5]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>以上基本上，简单提取需要 JSON 中的信息便已经足够了，以下为扩展内容，也是我在工作中使用到的。</p><h2 id="JsonPath-复杂结构版"><a href="#JsonPath-复杂结构版" class="headerlink" title="JsonPath 复杂结构版"></a>JsonPath 复杂结构版</h2><p>给定一串 JSON 如下所示<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"bookId"</span>: <span class="number">7333</span>,</span><br><span class="line">  <span class="attr">"volumeDetailList"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"卷一 恢弘世界"</span>,</span><br><span class="line">      <span class="attr">"volumeId"</span>: <span class="number">28585</span>,</span><br><span class="line">      <span class="attr">"chapterDetailList"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"chapterId"</span>: <span class="number">11719110</span>,</span><br><span class="line">          <span class="attr">"free"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"第1章 上九天"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"words"</span>: <span class="number">1678</span>,</span><br><span class="line">          <span class="attr">"contentId"</span>: <span class="number">2930434</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"chapterId"</span>: <span class="number">1719111</span>,</span><br><span class="line">          <span class="attr">"free"</span>: <span class="literal">true</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"第2章：揽月"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">0</span>,</span><br><span class="line">          <span class="attr">"words"</span>: <span class="number">2390</span>,</span><br><span class="line">          <span class="attr">"contentId"</span>: <span class="number">2930444</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"title"</span>: <span class="string">"卷二 在人家"</span>,</span><br><span class="line">      <span class="attr">"volumeId"</span>: <span class="number">285852</span>,</span><br><span class="line">      <span class="attr">"chapterDetailList"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"chapterId"</span>: <span class="number">1719120</span>,</span><br><span class="line">          <span class="attr">"free"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"第3章：千年后之始"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">19</span>,</span><br><span class="line">          <span class="attr">"words"</span>: <span class="number">2989</span>,</span><br><span class="line">          <span class="attr">"contentId"</span>: <span class="number">29540933</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="attr">"chapterId"</span>: <span class="number">17133111</span>,</span><br><span class="line">          <span class="attr">"free"</span>: <span class="literal">false</span>,</span><br><span class="line">          <span class="attr">"name"</span>: <span class="string">"第4章：破冰而生"</span>,</span><br><span class="line">          <span class="attr">"price"</span>: <span class="number">30</span>,</span><br><span class="line">          <span class="attr">"words"</span>: <span class="number">3409</span>,</span><br><span class="line">          <span class="attr">"contentId"</span>: <span class="number">29540988</span></span><br><span class="line">        &#125;</span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>读取需要的相关信息<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JsonPathExample2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">// 用于读取上面的那串 JSON</span></span><br><span class="line">        File file = <span class="keyword">new</span> File(JsonPathExample2.class.getClassLoader().getResource(<span class="string">"chapterlist.json"</span>).getPath());</span><br><span class="line">        String chapterlistJson = FileUtils.readFileToString(file);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到书的所有卷名称</span></span><br><span class="line">        println(JsonPath.read(chapterlistJson, <span class="string">"$..title"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: ["卷一 恢弘世界","卷二 在人家"]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 得到书的所有章节名称</span></span><br><span class="line">        println(JsonPath.read(chapterlistJson, <span class="string">"$..name"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: ["第1章 上九天","第2章：揽月","第3章：千年后之始","第4章：破冰而生"]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 上面两个非常简单，下面这个需要注意 volumeDetailList 与 chapterDetailList 都是数组，且是数组嵌套</span></span><br><span class="line">        <span class="comment">// 得到 chapterId 为 17133111 的 contentId</span></span><br><span class="line">        println(JsonPath.read(chapterlistJson, <span class="string">"$.volumeDetailList[*].chapterDetailList[?(@.chapterId == '17133111')].contentId"</span>).toString());</span><br><span class="line">        <span class="comment">// 简化写法</span></span><br><span class="line">        println(JsonPath.read(chapterlistJson, <span class="string">"$..[?(@.chapterId == '17133111')].contentId"</span>).toString());</span><br><span class="line">        <span class="comment">// 输出结果: 29540988</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">println</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        System.out.println(str);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="常用JsonPath在线解析工具网站"><a href="#常用JsonPath在线解析工具网站" class="headerlink" title="常用JsonPath在线解析工具网站"></a>常用JsonPath在线解析工具网站</h2><ul><li><a href="http://jsonpath.com/">http://jsonpath.com/</a></li><li><a href="http://jsonpath.herokuapp.com/">http://jsonpath.herokuapp.com/</a></li></ul><p>这两个网站都可以在线写 JsonPath 语句，可以用来校验写的是否正确而不用去跑代码程序，比较方便</p><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="http://goessner.net/articles/JsonPath/">http://goessner.net/articles/JsonPath/</a></li><li><a href="https://www.cnblogs.com/weilunhui/p/3857366.html">https://www.cnblogs.com/weilunhui/p/3857366.html</a></li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>在工作中使用到的时候，也不熟悉 JsonPath 的语法，写出了比较复杂的 JsonPath，但是在写这篇博客的时候，又写了一般，发现了有很多自己写的 JsonPath 语句是可以精简的，比如倒数第二条 JsonPath 语句可以精简为它下面那句。</p><p>在输出的时候，可以发现自己认知中不足之处，写博客还是能给自己带来很多好处的，希望自己能够笔耕不息~</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在工作中，经常会遇到从一串 JSON 中提取一个或多个字段的情况，常用的做法就是将其反序列化为 JSONObject 对象，然后从对象中获取，如果是 JSONArray 就进行迭代获取，总之比较麻烦。可以使用 &lt;strong&gt;JsonPath&lt;/strong&gt; 快速提取所需信息。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="JSONPath解析" scheme="http://nullpointer.pw/tags/JSONPath%E8%A7%A3%E6%9E%90/"/>
    
      <category term="JSONPath在线解析" scheme="http://nullpointer.pw/tags/JSONPath%E5%9C%A8%E7%BA%BF%E8%A7%A3%E6%9E%90/"/>
    
      <category term="JSONPath多层嵌套解析" scheme="http://nullpointer.pw/tags/JSONPath%E5%A4%9A%E5%B1%82%E5%B5%8C%E5%A5%97%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>解决WebMagic抓HTTPS时出现SSLException</title>
    <link href="http://nullpointer.pw/%E8%A7%A3%E5%86%B3WebMagic%E6%8A%93HTTPS%E6%97%B6%E5%87%BA%E7%8E%B0SSLException.html"/>
    <id>http://nullpointer.pw/解决WebMagic抓HTTPS时出现SSLException.html</id>
    <published>2018-05-12T07:03:47.000Z</published>
    <updated>2020-01-22T14:33:12.956Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在今年二月份在项目中引入了 <strong>WebMagic</strong> 技术，用来抓取合作方的书籍，详见之前文章：<a href="http://nullpointer.pw/WebMagic%E4%B9%8B%E7%88%AC%E8%99%AB%E7%9B%91%E6%8E%A7.html">WebMagic之爬虫监控</a>，这两天新接入了一个合作商，对方接口采取的是 HTTPS 协议，而以前合作商的接口全都是 HTTP 的，在接入这家合作商的时候，发现了问题，只要是 HTTPS 的 URL 全部无法爬取。</p><a id="more"></a><h2 id="一、问题复现"><a href="#一、问题复现" class="headerlink" title="一、问题复现"></a>一、问题复现</h2><p>在 WebMagic-core 包中，<code>us.codecraft.webmagic.processor.example.GithubRepoPageProcessor</code> 这个包下面是作者放的示例代码，拷贝这个类代码到新建的类中，右键运行这个类，运行后控制台报出错误：<br><code>[WARN ] 2018-05-12 13:28:11,828 download page https://github.com/code4craft error [us.codecraft.webmagic.downloader.HttpClientDownloader.download(HttpClientDownloader.java:91)]</code></p><p>进入这个类，定位到 <strong>HttpClientDownloader</strong> 源代码 85 行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Page <span class="title">download</span><span class="params">(Request request, Task task)</span> </span>&#123;</span><br><span class="line">    ......</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        httpResponse = httpClient.execute(requestContext.getHttpUriRequest(), requestContext.getHttpClientContext());</span><br><span class="line">        page = handleResponse(request, task.getSite().getCharset(), httpResponse, task);</span><br><span class="line">        onSuccess(request);</span><br><span class="line">        logger.info(<span class="string">"downloading page success &#123;&#125;"</span>, request.getUrl());</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        logger.warn(<span class="string">"download page &#123;&#125; error"</span>, request.getUrl(), e);</span><br><span class="line">        onError(request);</span><br><span class="line">        <span class="keyword">return</span> page;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">      ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在 85 行此处断点 Debug 运行，发现此行抛出了 SSLException 异常。异常的内容是：<br><code>javax.net.ssl.SSLException: Received fatal alert: protocol_version</code></p><h2 id="二、解决问题方法（一）"><a href="#二、解决问题方法（一）" class="headerlink" title="二、解决问题方法（一）"></a>二、解决问题方法（一）</h2><p>出现异常后，通过 Google 搜索了一下，找到了 WebMagic 作者黄大的解决方式，详见 <a href="https://github.com/code4craft/webmagic/issues/701">Https下无法抓取只支持TLS1.2的站点</a></p><p>于是按照黄大说的方式来做</p><ol><li><p>首先复制源码中的 <strong>HttpClientGenerator</strong> 与 <strong>HttpClientDownloader</strong> 到自己的项目中。</p></li><li><p>修改 <strong>HttpClientGenerator</strong> 的代码，只需要修改 <strong>buildSSLConnectionSocketFactory</strong> 这个方法为如下即可。    </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    ...</span><br><span class="line"><span class="function"><span class="keyword">private</span> SSLConnectionSocketFactory <span class="title">buildSSLConnectionSocketFactory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> SSLConnectionSocketFactory(createIgnoreVerifySSL(), <span class="keyword">new</span> String[]&#123;<span class="string">"SSLv3"</span>, <span class="string">"TLSv1"</span>, <span class="string">"TLSv1.1"</span>, <span class="string">"TLSv1.2"</span>&#125;,</span><br><span class="line">                <span class="keyword">null</span>,</span><br><span class="line">                <span class="keyword">new</span> DefaultHostnameVerifier()); <span class="comment">// 优先绕过安全证书</span></span><br><span class="line">&#125; <span class="keyword">catch</span> (KeyManagementException e) &#123;</span><br><span class="line">        logger.error(<span class="string">"ssl connection fail"</span>, e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NoSuchAlgorithmException e) &#123;</span><br><span class="line">        logger.error(<span class="string">"ssl connection fail"</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">return</span> SSLConnectionSocketFactory.getSocketFactory();</span><br><span class="line">&#125;</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p> <strong>注意：</strong> DefaultHostnameVerifier 需要使用 <strong><code>org.apache.http.conn.ssl.DefaultHostnameVerifier</code></strong>，而不要使用 <del><code>sun.net.www.protocol.https.DefaultHostnameVerifier</code></del> </p></li><li>修改 <strong>HttpClientDownloader</strong> 中引用的 <strong>HttpClientGenerator</strong> 为你修改后的类。</li><li><p>设置爬虫 Spider 的 Downloader 为 你修改的 <strong>HttpClientDownloader</strong>。  </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Spider.create(<span class="keyword">new</span> GithubRepoPageProcessor()).setDownloader(<span class="keyword">new</span> HttpClientDownloader()).addUrl(<span class="string">"https://github.com/code4craft"</span>).thread(<span class="number">5</span>).run();</span><br></pre></td></tr></table></figure></li><li><p>运行后，发现控制台已经可以正常输出所抓取网页的内容了</p></li></ol><h2 id="三、解决问题方法（二）"><a href="#三、解决问题方法（二）" class="headerlink" title="三、解决问题方法（二）"></a>三、解决问题方法（二）</h2><p>既然对方接口地址是 HTTPS 的，那我们访问他的 HTTP 接口不就没有这个问题了么？但是事实是，访问对方 HTTP 接口时，会自动跳转到 HTTPS 网址，所以这条路行不通。这时我忽然想到，之前使用 Nginx 解决前端跨域的方法，使用我方的 HTTP 域名，反向代理到对方的 HTTPS 网址是不是就解决了问题呢？于是对 Nginx 进行配置。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  partner.domain.com;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">          proxy_set_header Host github.com;</span><br><span class="line">          proxy_pass https://github.com/;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启动/重启 Nginx，将爬虫的地址由 <strong><code>https://github.com/code4craft</code></strong> 修改为 <strong><code>http://partner.domain.com/code4craft</code></strong>，使用 WebMagic 默认的 Downloader，启动爬虫  </p><pre><code class="java"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GithubRepoPageProcessor</span> <span class="keyword">implements</span> <span class="title">PageProcessor</span> </span>{    <span class="keyword">private</span> Site site = Site.me().setRetryTimes(<span class="number">3</span>).setSleepTime(<span class="number">1000</span>).setTimeOut(<span class="number">10000</span>);    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">process</span><span class="params">(Page page)</span> </span>{        System.out.println(page.getRawText());    }    <span class="meta">@Override</span>    <span class="function"><span class="keyword">public</span> Site <span class="title">getSite</span><span class="params">()</span> </span>{        <span class="keyword">return</span> site;    }    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>{        Spider.create(<span class="keyword">new</span> GithubRepoPageProcessor()).addUrl(<span class="string">"http://partner.domain.com/code4craft"</span>).thread(<span class="number">5</span>).run();    }}</code></pre><p>发现控制台成功打印出了页面的内容，测试中，如果页面，页面的其他请求还是会错误，只有第一个页面是正确的，因此此方法<strong>只适合与 Ajax 类似的接口</strong>，我们是这样处理抓取 Https 问题的，因为第一种方法对于我们 JDK1.6 项目无效，第一种方法在 JDK 1.8 测试时可以正常抓取的。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果第一种方法解决不了你的问题，那就跟我一样弄一个临时域名反向代理吧，Nginx 在这方面还是蛮好用的。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在今年二月份在项目中引入了 &lt;strong&gt;WebMagic&lt;/strong&gt; 技术，用来抓取合作方的书籍，详见之前文章：&lt;a href=&quot;http://nullpointer.pw/WebMagic%E4%B9%8B%E7%88%AC%E8%99%AB%E7%9B%91%E6%8E%A7.html&quot;&gt;WebMagic之爬虫监控&lt;/a&gt;，这两天新接入了一个合作商，对方接口采取的是 HTTPS 协议，而以前合作商的接口全都是 HTTP 的，在接入这家合作商的时候，发现了问题，只要是 HTTPS 的 URL 全部无法爬取。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="WebMagic出现SSLException" scheme="http://nullpointer.pw/tags/WebMagic%E5%87%BA%E7%8E%B0SSLException/"/>
    
      <category term="爬虫异常" scheme="http://nullpointer.pw/tags/%E7%88%AC%E8%99%AB%E5%BC%82%E5%B8%B8/"/>
    
      <category term="反向代理到其他域名" scheme="http://nullpointer.pw/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86%E5%88%B0%E5%85%B6%E4%BB%96%E5%9F%9F%E5%90%8D/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓包实战详解</title>
    <link href="http://nullpointer.pw/Charles%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98%E8%AF%A6%E8%A7%A3.html"/>
    <id>http://nullpointer.pw/Charles抓包实战详解.html</id>
    <published>2018-04-25T14:19:22.000Z</published>
    <updated>2020-01-22T14:35:44.398Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>通过上一篇文章，想必你已经掌握了如何正确安装抓包神器 Charles，如果还是抓不了包，可以再看看。</p><p>今天要做是抓包实战，因为我在做网络文学的公司就职，所以就拿网络文学的 APP <strong>掌阅</strong>开刀好了，以下进入抓包实战，体会 Charles 的强大之处！。</p><p>掌握了下面的抓包技巧，对于某些校验并不是十分严格的 APP 来说，破解他们的接口实在是轻而易举。比如修改个 isVip 参数为 true，就变身超级 VIP等；之前用这套抓包技巧，找了一个网校随便修改，发现要价上千至上万的课程竟然可以跳过校验直接被我播放下载，也是醉了。</p><p>希望大家掌握了抓包不要干违法的事情，本文目的在于让技术人员了解漏洞，加固校验，不被他人有机可乘，以免造成公司损失。</p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>环境：</p><ul><li>Windows </li><li>Charles</li><li>iphone 7</li><li>掌阅 APP 7.4.2</li></ul><p><strong>前提：手机已经连接 Charles 代理，并可以抓取 HTTPS 数据包。</strong></p><h2 id="一、Charles-的断点功能-Breakpoints-实战"><a href="#一、Charles-的断点功能-Breakpoints-实战" class="headerlink" title="一、Charles 的断点功能 Breakpoints 实战"></a>一、Charles 的断点功能 Breakpoints 实战</h2><p>首先登录掌阅 APP ，清空Charles 的抓包列表，以防止干扰实验，然后进入 APP 的个人中心，可以看到图中圈出的数值，这里我们对其数值进行修改。<br><img src="http://img12345.5-project.com/blog/20180425/172739449.png?imageslim" alt=""></p><p>此时看到 Charles 的请求列表中出现了 APP 的请求。<br><img src="http://img12345.5-project.com/blog/20180425/173517796.png?imageslim" alt="">  </p><p>通过简单分析，可以知道个人中心的那些数据是从这个请求中获取到的，那么我们便修改这个请求，右键这个请求，选择 <strong>Breakpoints</strong>，这样就给这个请求加上了断点。此时切换 App 到 书架再切换回个人中心，会再次发送该请求，Charles 会弹出请求的断点，因为这里不需要修改请求参数，直接放行即可，选择 <strong>Execute</strong>；放行后，会再次弹出断点，此时就是响应返回的断点了，选择 <strong>Edit Response</strong>， 底部选择 JSON text 可以修改返回值，<br><img src="http://img12345.5-project.com/blog/20180425/174223787.png?imageslim" alt=""></p><p>我这里把 2 修改成了 2222，修改完之后，点击<strong>Execute</strong>，回到 App 发现已经更改了。<br><img src="http://img12345.5-project.com/blog/20180425/174139868.png?imageslim" alt=""></p><p>测试中发现，掌阅 App 的请求时间如果过长，修改之后也会不生效。<br>这就需要使用 Charles 的下一个牛 X 的功能了，Map 映射，让 Charles 自动返回我们想要的返回值。</p><h2 id="二、Charles-的映射功能-Map-实战"><a href="#二、Charles-的映射功能-Map-实战" class="headerlink" title="二、Charles 的映射功能 Map 实战"></a>二、Charles 的映射功能 Map 实战</h2><p>上一个实验进行的时候，如果请求的响应时间过长，掌阅的 App 就会抛弃本次请求的结果，不对数据进行修改，因此我们需要更快的去修改返回值。</p><p>以前用 Fiddler 对于这种响应时间有要求的 App，反正我是束手无策的，APP 总是提示网络异常，响应超时等。如果是更改一两个返回值还可以，如果是多个，是真没辙了，所以 Charles 的 Map 功能是很强大的。</p><p>重复上一步，抓到个人中心的数据包，就是这个请求。<br><img src="http://img12345.5-project.com/blog/20180425/173517796.png?imageslim" alt="">  </p><p>右键选择 <strong>Save Response</strong> 到一个文件当中去。<br><img src="http://img12345.5-project.com/blog/20180425/175550942.png?imageslim" alt=""></p><p>再次右键，选择该请求，为了不干扰实验，取消勾选上一步中的<strong>Breakpoints</strong>，然后再右键该请求，选择最下方 <strong>Map Local</strong>，选择刚才保存的文件。<br><img src="http://img12345.5-project.com/blog/20180425/180202513.png?imageslim" alt=""></p><p>注意这里的 <strong>Query</strong>，因为掌阅 APP 在请求时，附带了签名时间戳等参数，这里设置为 * 之后，就会忽略这些参数。<br>设置完成后，修改刚才保存的文件，使用 NotePad++ 等编辑器打卡，修改里面的 JSON 内容。<br>我改了部分数据，重新进入个人中心，查看 Charles 的请求内容，发现已经修改了<br><img src="http://img12345.5-project.com/blog/20180425/180114345.png?imageslim" alt=""></p><p>同时看 App 的个人中心也已经修改了，可以改很大的值，然后向不懂的人炫耀炫耀了哈哈哈~<br><img src="http://img12345.5-project.com/blog/20180425/180817131.png?imageslim" alt=""></p><h2 id="三、Charles-的-Rewrite-实战"><a href="#三、Charles-的-Rewrite-实战" class="headerlink" title="三、Charles 的 Rewrite 实战"></a>三、Charles 的 Rewrite 实战</h2><p>Rewrite 是对于 map 功能的一个补充，可以设置较为复杂的规则，下面演示替换 Body 内的用户名称</p><p>选择菜单栏 Tools -&gt; Rewrite，选择开启 Rewrite, 并添加一条规则。替换 Body 体内的 We Jan 为 CCTV<br><img src="http://img12345.5-project.com/20180425152466495838315.png" alt=""></p><p>APP再次发起请求，响应如下<br><img src="http://img12345.5-project.com/20180425152466522079125.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>其实日常中，我们需要用到的地方基本以上三个都可以包含到了，其他深入学习的，可以参考下面的链接。</p><ul><li><a href="http://www.heyuan110.com/2015/08/15/Charles%E8%BE%85%E5%8A%A9%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3/">http://www.heyuan110.com/2015/08/15/Charles%E8%BE%85%E5%8A%A9%E8%B0%83%E8%AF%95%E6%8E%A5%E5%8F%A3/</a></li><li><a href="http://blog.devtang.com/2015/11/14/charles-introduction/">http://blog.devtang.com/2015/11/14/charles-introduction/</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;通过上一篇文章，想必你已经掌握了如何正确安装抓包神器 Charles，如果还是抓不了包，可以再看看。&lt;/p&gt;
&lt;p&gt;今天要做是抓包实战，因为
      
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Charles抓包" scheme="http://nullpointer.pw/tags/Charles%E6%8A%93%E5%8C%85/"/>
    
      <category term="抓包破解" scheme="http://nullpointer.pw/tags/%E6%8A%93%E5%8C%85%E7%A0%B4%E8%A7%A3/"/>
    
      <category term="抓包实战" scheme="http://nullpointer.pw/tags/%E6%8A%93%E5%8C%85%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Charles抓包之HTTPS抓包配置</title>
    <link href="http://nullpointer.pw/Charles%E6%8A%93%E5%8C%85%E4%B9%8BHTTPS%E6%8A%93%E5%8C%85%E9%85%8D%E7%BD%AE.html"/>
    <id>http://nullpointer.pw/Charles抓包之HTTPS抓包配置.html</id>
    <published>2018-04-15T12:36:40.000Z</published>
    <updated>2020-01-22T14:35:59.462Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>由于工作中经常需要配置客户端开发人员对接接口，有时候对接地不太顺利，因此需要经常性地对公司 APP 进行抓包看请求，找出具体的原因。</p><p>在公司中开发使用的 Windows 台式电脑，抓包工具选择了 Fiddler，这个工具刚开始学会抓包的时候，觉得真乃神器！在经过几次开发电脑升级之后，重新安装 Fiddler 后，和之前的设置相同，但是死活抓不了包，或者抓不了 Https 的包， 总之总会出现各种奇怪的问题，如果出了问题，简直让人抓狂！</p><a id="more"></a><p>去年年底，给自己换了一台 MBP，日常学习中也需要用到抓包，为了和公司中的工具保持一致，想下载 Fiddler 的 Mac 版，结果并没有。于是下载了 Charles (花瓶)，用了花瓶之后，发现其比 Fiddler 更加好用~</p><p>在一次受够了 Fiddler 的莫名其妙地抓不了 Https，怒卸载之，寻寻觅觅，找到了 Win 版的 Charles (之前还以为没有 Win 版呢)，经过简单配置，开始了愉快的抓包~</p><h2 id="抓包准备之-Charles-下载以及激活"><a href="#抓包准备之-Charles-下载以及激活" class="headerlink" title="抓包准备之 Charles 下载以及激活"></a>抓包准备之 Charles 下载以及激活</h2><p><a href="https://www.charlesproxy.com/latest-release/download.do">Charles 软件下载</a></p><p>下载安装完，在开始菜单中找到 Charles 打开，提示有 30 天的试用期。如果 30 天到期的话，可以选择购买一个 license ，30 刀。如果不想买，可以参考此文继续试用，<a href="https://zhile.io/2017/07/07/charles-proxy-usage-and-license.html">Charles Proxy使用笔记（文内有好礼）</a>。选择 Help-Registered 填入 license 即可激活。</p><h2 id="抓包准备之-Charles-配置-HTTPS-抓包基础配置"><a href="#抓包准备之-Charles-配置-HTTPS-抓包基础配置" class="headerlink" title="抓包准备之 Charles 配置 HTTPS 抓包基础配置"></a>抓包准备之 Charles 配置 HTTPS 抓包基础配置</h2><p>如今 Https 大行其道，苹果更是强制要求 APP 通信必须要使用 Https 协议，如果只是抓普通的 HTTP 请求，无需复杂配置即可抓包，这也表明了 HTTP 的安全性很低。</p><p>Charles 默认不对 HTTPS 的请求开启抓包，所以，需要先开启所有 HTTPS 请求的抓包。</p><p>进入菜单 Proxy-SSL Proxying Settings<br>选择开启 SSL Proxy，并 Add 一条 Location 记录，Host 填写 <code>*</code>，代表匹配所有网址，端口 Port，填写443，即 HTTPS 端口。  选择保存。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180415/192924472.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>基础配置到此就完成了，以下本文按照两方面来描述，Charles 抓 HTTPS。</p><h2 id="Charles-抓-Windows-上的-HTTPS-请求"><a href="#Charles-抓-Windows-上的-HTTPS-请求" class="headerlink" title="Charles 抓 Windows 上的 HTTPS 请求"></a>Charles 抓 Windows 上的 HTTPS 请求</h2><p>进入 Help 中，选择 SSL Proxying 设置，安装根证书  </p><p><img src="http://img12345.5-project.com/blog/20180413/175314107.png?imageslim" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20180413/175426039.png?imageslim" alt=""></p><p>注意这一步一定要将证书存储到 <strong>受信任的根证书颁发机构</strong>，否则抓包 HTTPS 会提示证书不受信任！！！嗯，搞了好久，血一般的教训！ </p><p><img src="http://img12345.5-project.com/blog/20180413/175511643.png?imageslim" alt="">  </p><p>安装期间会有安全警告，选择是即可。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180413/175547783.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>访问 <a href="https://www.baidu.com">https://www.baidu.com</a>后，查看 Charles，已经可以看到 Https 请求下的数据了。  </p><p><img src="http://img12345.5-project.com/20180415152379485069600.png" alt=""></p><h2 id="Charles-抓-APP-的-HTTPS-请求"><a href="#Charles-抓-APP-的-HTTPS-请求" class="headerlink" title="Charles 抓 APP 的 HTTPS 请求"></a>Charles 抓 APP 的 HTTPS 请求</h2><p>想要 Charles 抓 HTTPS 的数据包，需要设置代理并安装 Charles 的中间 SSL 证书。</p><p>选择 Help-SSL Proxying  </p><p><img src="http://img12345.5-project.com/20180415152379262077868.png" alt=""></p><p>点击会弹出对话框如下  </p><p><img src="http://img12345.5-project.com/2018041515237927135136.png" alt=""></p><p>按照提示，将手机连入电脑同一个网络，WIFI 处设置代理，代理的地址以及端口按照对话框中进行设置。 </p><p><img src="http://img12345.5-project.com/20180415152379295633941.png" alt=""></p><p>设置成功返回之后，此时电脑上 Charles 会自动弹出提醒，提示是否允许请求代理通过，选择 <code>Allow</code> 允许即可。  </p><p><img src="http://img12345.5-project.com/20180415152379304426547.png" alt=""></p><p>连上代理之后，使用系统自带浏览器( iPhone 使用 Safari)访问地址 <code>chls.pro/ssl</code>，如果是 iPhone 会自动弹出安装描述文件，选择安装输入密码后无视警告安装即可。因为手边没有安卓设备，不过流程应该类似，就是安装一个 CA 证书文件。</p><p>手机访问 <code>https://m.baidu.com</code>，查看 Charles ，发现此时已经可以拿到 HTTPS 数据内容了，如果没设置成功，里面都将会是 unknown。  </p><p><img src="http://img12345.5-project.com/20180415152379397996806.jpg" alt=""></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><ol><li>开启 SSL Proxy 代理后，提示证书不受信任或者无效，PC 端一般都是因为证书放错了位置。</li><li><p>在 IOS11上测试时，抓包<strong>显示unknown</strong>  需要进入通用-关于本机-证书信任设置，将新增的证书进行开启操作。</p><p> <img src="http://img12345.5-project.com/blog/20180413/165008375.png?imageslim" alt=""><br><del>1. 小米系统的手机安装证书方式比较繁琐，需要进入开发者选项中，在信用证书中进行安装（Fiddler安装证书是这样的，Charles 应该也差不多）</del></p></li></ol><h2 id="最后说几句"><a href="#最后说几句" class="headerlink" title="最后说几句"></a>最后说几句</h2><p>善用搜索引擎，因为你遇到的问题肯定有别人都遇到过了，如果你搜不到，肯定是你的搜索姿势不对~</p><p>实在有问题解决不了，可以找我哟! </p><p><a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">给我写信</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;由于工作中经常需要配置客户端开发人员对接接口，有时候对接地不太顺利，因此需要经常性地对公司 APP 进行抓包看请求，找出具体的原因。&lt;/p&gt;
&lt;p&gt;在公司中开发使用的 Windows 台式电脑，抓包工具选择了 Fiddler，这个工具刚开始学会抓包的时候，觉得真乃神器！在经过几次开发电脑升级之后，重新安装 Fiddler 后，和之前的设置相同，但是死活抓不了包，或者抓不了 Https 的包， 总之总会出现各种奇怪的问题，如果出了问题，简直让人抓狂！&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://nullpointer.pw/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Charles抓包" scheme="http://nullpointer.pw/tags/Charles%E6%8A%93%E5%8C%85/"/>
    
      <category term="HTTPS抓包" scheme="http://nullpointer.pw/tags/HTTPS%E6%8A%93%E5%8C%85/"/>
    
      <category term="Windows抓包" scheme="http://nullpointer.pw/tags/Windows%E6%8A%93%E5%8C%85/"/>
    
      <category term="抓包显示unknown" scheme="http://nullpointer.pw/tags/%E6%8A%93%E5%8C%85%E6%98%BE%E7%A4%BAunknown/"/>
    
  </entry>
  
  <entry>
    <title>微信域名防止屏蔽</title>
    <link href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E5%9F%9F%E5%90%8D%E9%98%B2%E6%AD%A2%E5%B1%8F%E8%94%BD.html"/>
    <id>http://nullpointer.pw/微信域名防止屏蔽.html</id>
    <published>2018-03-27T13:11:17.000Z</published>
    <updated>2020-01-22T14:34:48.822Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这几日，由于遭到他人的恶意投诉举报，导致了微信中阅读业务的根域名被屏蔽，提示如图</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180326/160535526.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>由于我司是做网络文学的，作者的内容中不可避免地会出现些微露骨的内容，但是这些内容是经过了编辑审核之后才公开的，也不至于太露骨，但举报就被封禁了。</p><p>公司的用户有很多是通过微信公众号进行阅读，这一封，就许多用户过来反馈了。</p><a id="more"></a><h2 id="切换域名之痛"><a href="#切换域名之痛" class="headerlink" title="切换域名之痛"></a>切换域名之痛</h2><p>既然根域名被封了，就只能切换域名了，因为之前代码中有不少的地方域名写死了，没有提取成公共变量，改了好久，才替换成了新的域名。</p><p>眼看已经修改完了，线上也正常了，都已经晚上9点多，准备下班回家了。就这时候，群里又反馈网站进不去了，打开一开，又**被封了，当时的心情真是想问候一下恶意举报人的全家了！</p><p>没法子，继续换域名，还好之前提前备案了几个域名，没想到现在全用上了。</p><p>有了上一次的经验，现在修改起来也快多了，修改上线完事都已经 10 点多了，恶意举报的人这时候也消停了下来没有继续投诉了，我们也终于可以下班，害的我们大周六的过来加了一天的班！</p><p>第二天，也就是周日。群里又反应被封了，真是崩溃。<br>最开始的域名被微信封禁后，公司第一时间进行了申诉，此时收到通知，说检测后没有违规内容，就进行了解封。<br>可能是别人恶意利用了微信的封禁系统，此时觉得微信的这套系统做的真烂！于是我们开发人员又是一番替换，把现在被封的域名切换了回去。</p><p>经过这几波操作，这两天网站的收入骤减，那帮使坏的人是趁你病要你命的节奏！</p><h2 id="痛定思过"><a href="#痛定思过" class="headerlink" title="痛定思过"></a>痛定思过</h2><p>总结了一下这次事件的教训，主要的原因就是因为小说的内容页被频繁恶意举报导致域名被封。 这就导致了即使换了域名，比如支付，登录都受到了影响，而且微信支付限制了每个月修改支付域名的次数，不得已我们只好换了另外一个服务号才重新打通了支付。</p><p>接下来需要做的就是，将可能还会被举报的小说内容页的域名拆分出去，不和网站主要域名一样。</p><p>比如首页、个人中心是 <code>m.aaa.com</code>, 将内容页的域名修改成 <code>m.bbb.com</code>。</p><p>我们的阅读页 URL 地址为 <code>https://m.aaa.com/book/1010545066/385773672</code>，则在 nginx 匹配到 <code>^/book/([0-9]+)/([0-9]+)</code> 就进行跳转到 <code>http://m.bbb.com/book/1010545066/385773672</code>，于是，修改 nginx 的配置，对 URL 进行匹配。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       443;</span><br><span class="line">    server_name  m.aaa.com;</span><br><span class="line">    </span><br><span class="line">    # ...</span><br><span class="line">    set $temp_content_host &quot;http://m.bbb.com&quot;;</span><br><span class="line">    location ~ ^/book/([0-9]+)/([0-9]+) &#123;</span><br><span class="line">        # If WeChat browser, jump to temporary domain name</span><br><span class="line">        if ($http_user_agent ~* (Micromessenger) ) &#123;</span><br><span class="line">            return 301 $temp_content_host$request_uri;</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_pass http://domainAserver;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://domainAserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  m.bbb.com;</span><br><span class="line">    </span><br><span class="line">    # ...</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://domainAserver;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>因为只有在微信浏览器内部，才存在被封禁的风险，而在其他浏览器内没有，一旦被微信封禁，内容页的域名需要一起更换，这样可能会不利于搜索引擎的收录，因此加了一个判断<br>浏览器 UA，微信的 UA 是 <em>Micromessenger</em> 如果是在微信浏览器内部，nginx 才 301 跳转到 <code>m.bbb.com</code>，如果不是，则保持之前的域名不变。</p><p>这样就解决了问题，一旦 <code>m.bbb.com</code> 域名被封禁了，就是 aaa 域名的 nginx 修改 <em>$temp_content_host</em> 这个变量的值为新的域名然后 reload 一下 nginx 即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>可能是公司战略上的问题，太过于依赖微信的公众号，在微信的生态中，微信想弄死你轻而易举，你却无可奈何，尽量把用户引导到客户端上才是上上策。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ttlsa.com/nginx/how-to-block-user-agents-using-nginx/">http://www.ttlsa.com/nginx/how-to-block-user-agents-using-nginx/</a></li><li><a href="http://lzl124631x.github.io/2016/04/08/check-wechat-user-agent.html">http://lzl124631x.github.io/2016/04/08/check-wechat-user-agent.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;这几日，由于遭到他人的恶意投诉举报，导致了微信中阅读业务的根域名被屏蔽，提示如图&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
                    &lt;img src=&quot;http://img12345.5-project.com/blog/20180326/160535526.png?imageslim&quot; alt=&quot;&quot; title=&quot;&quot;&gt;
                &lt;/div&gt;
                &lt;div class=&quot;image-caption&quot;&gt;&lt;/div&gt;
            &lt;/figure&gt;
&lt;p&gt;由于我司是做网络文学的，作者的内容中不可避免地会出现些微露骨的内容，但是这些内容是经过了编辑审核之后才公开的，也不至于太露骨，但举报就被封禁了。&lt;/p&gt;
&lt;p&gt;公司的用户有很多是通过微信公众号进行阅读，这一封，就许多用户过来反馈了。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="微信域名封禁" scheme="http://nullpointer.pw/tags/%E5%BE%AE%E4%BF%A1%E5%9F%9F%E5%90%8D%E5%B0%81%E7%A6%81/"/>
    
  </entry>
  
  <entry>
    <title>微信分享踩坑之旅</title>
    <link href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB%E8%B8%A9%E5%9D%91%E4%B9%8B%E6%97%85.html"/>
    <id>http://nullpointer.pw/微信分享踩坑之旅.html</id>
    <published>2018-03-17T08:32:52.000Z</published>
    <updated>2020-01-22T14:34:22.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>三月伊始，此月任务重心在于用户的拉新与传播，自然也少不了新增加些许需求。由我负责用户分享传播的需求，主要任务就是在于微信分享。<br>在做之前觉得这个很简单，就几个接口的事情罢，实际上做起来，却是不如意料那般简单，踩坑颇多。</p><a id="more"></a><p>在做这个分享需求之前，和同事们也已经讨论过大致的流程。无非常用的手法，针对用户生成唯一二维码，通过微信分享出去，然后其他人注册填写邀请码获取奖励。</p><p>在填写邀请码这里，我参考了一些主流 APP 的做法。正常是复制邀请码然后用户找到入口粘贴邀请码并进行激活，但是发现有个别的 APP 体验很好，可以做到复制邀请码后，直接抵达 APP（网易蜗牛读书） 内部 WebView 中自动填写邀请码。</p><p>在对这个 APP 抓包分析之后发现了其中的奥妙所在，这是他们分享页面的地址：</p><p><code>https://du.163.com/static/wechatFallback.html?openurl=nesnailreader://webview?url=https://du.163.com/invite?code=EPPEG&amp;inside=true&amp;downloadurl=https://du.163.com/download</code></p><p>原来他们使用了一种叫做 schema 的技术，可以直接在浏览器中打开 APP。于是开始了模仿之旅。 </p><p>知道了其他 APP 的做法后，便询问了客户端的同事，能不能实现同样的效果，他们都是说以前没有这样做过，但是可以做。协调了前端与客户端同事，共同开发这个看起来挺简单的功能需求。客户端同事都很给力，虽然出现了一些小插曲，但很快便调通了功能，剩下了 WAP 版本微信分享，由于之前都没有做过，踩了不少的坑，分享这次踩坑，这也是本文重心所在。</p><h2 id="坑一"><a href="#坑一" class="headerlink" title="坑一"></a>坑一</h2><p>后台代码开发不必多说，跟着文档开发，因为需要获取 微信公众号的 AccessToken 所有需要在微信后天白名单处添加本机 IP 。</p><p>在微信开发者工具中，调试微信 JSSDK 时，发现 JS-SDK 提示签名错误<code>｛errmsg：config: invalid signature｝</code>，但是通过 <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=jsapisign">微信 JS 接口签名校验工具</a> 提交相关参数进行校验后，发现程序生成的和微信网页生成的签名是一样的,但是这里就一直提示是无效的签名。</p><p>我查看了 JS-SDK 下注册 config 信息处的输入参数，发现本该提交五个参数，但是只提交了四个，漏提交了<strong>nonceStr</strong> 参数，如果你发现程序生成的和微信网页生成的签名是一样的，但是提示无效签名，务必检查是否是这里的问题。还有提交了五个参数，但是参数的大小写不正确的的，比如 <strong>nonceStr</strong> 写成了 <strong>nonceStr</strong> 也是不行的。可以对比下图进行校验。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20180314/100655619.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="坑二"><a href="#坑二" class="headerlink" title="坑二"></a>坑二</h2><p>坑一种提到了 AccessToken，使用 JSSDK 时还需要另外一个 ticket，这二者都有超时时间的限制，如果过期了，那么 config 是无论如何也不会初始化成功的。</p><h2 id="坑三"><a href="#坑三" class="headerlink" title="坑三"></a>坑三</h2><p>踩了前两个坑之外，其实 WAP 版的开发也都差不多调通了，但是分享之后，分享人进入分享的链接后，二次分享时，便又出现了无效签名的情况，仔细排查之后，发现是分享后，微信会在分享的链接后面自动加上了一些参数，正是因为这些参数的存在，导致签名失败。</p><p>刚开始没有细看文档，因此分享 URL 的地址就没有进行动态传递到后台进行签名，所以导致了二次分享出现了问题，于是修改为了动态传递当前 URL 到后台进行签名，才解决了这个问题。</p><p>需要注意的是，如果当前的 URL 中包含了中文，需要进行<br> <strong>encodeURIComponent</strong> 后传递，再在后台进行 URL 解码处理。另外编码之后最好再将参数中的 <strong>&amp;</strong> 临时替换为 <strong>%26</strong>，后台再替换为 <strong>&amp;</strong>，如果直接传到后台，存在多个参数的情况下，后台将只会接收到第一个参数。</p><h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p> 安卓客户端进行开发的时候，出现了很奇怪的状况，就是在 WebView 里面无法获取当前 APP 登录的用户信息，即 WebView 发送请求到服务器，发现获取不到 Cookie 中登录用户信息的值，而 IOS 客户端便没有出现这种情况。</p><p> 之前安卓在做签到功能的时候，也是使用的 WebView，负责签到后台开发的同事也遇到了这种情况，当时没有彻底解决这种问题，使用了一种折中的方法来实现，让安卓客户端传递一串包含用户信息的加密串参数，后台解析这个参数判断用户。</p><p> 谷歌查找这种情况之后，发现安卓需要将 Cookie 同步到 WebView 中，询问安卓同事之后，他说同步过了啊，这就很奇怪了！</p><p>继续万能谷歌查找，然后看了一下同事的客户端代码，发现他同步 Cookie 到 WebView 部分的代码并没有设置 Cookie 的 <strong>domain</strong> 与 <strong>path</strong>，而后台获取登录用户信息时，只去获取指定域名指定路径下的 Cookie 值，自然是获取不到 WebView 里登录用户信息的值了。</p><p>知道了问题，解决起来就简单多了，只要将需要同步的每一条 Cookie 信息设置 <strong>Domain</strong> 与 <strong>Path</strong> 即可，后台也就可以拿到同步的 Cookie 信息了。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">syncCookie</span><span class="params">(String url, String cookie)</span> </span>&#123;</span><br><span class="line">    cookie += <span class="string">";Max-Age=3600"</span> + <span class="string">";Domain=.cctv.com"</span> + <span class="string">";Path = /"</span>  </span><br><span class="line">    cookieManager.setCookie(url, cookie);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;三月伊始，此月任务重心在于用户的拉新与传播，自然也少不了新增加些许需求。由我负责用户分享传播的需求，主要任务就是在于微信分享。&lt;br&gt;在做之前觉得这个很简单，就几个接口的事情罢，实际上做起来，却是不如意料那般简单，踩坑颇多。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="微信分享" scheme="http://nullpointer.pw/tags/%E5%BE%AE%E4%BF%A1%E5%88%86%E4%BA%AB/"/>
    
      <category term="WebView同步Cookie问题" scheme="http://nullpointer.pw/tags/WebView%E5%90%8C%E6%AD%A5Cookie%E9%97%AE%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>SpringBoot与WebSocket集成</title>
    <link href="http://nullpointer.pw/SpringBoot%E4%B8%8EWebSocket%E9%9B%86%E6%88%90.html"/>
    <id>http://nullpointer.pw/SpringBoot与WebSocket集成.html</id>
    <published>2018-02-28T14:17:09.000Z</published>
    <updated>2020-01-22T14:43:31.507Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>目前，公司的项目部署方式还是使用的原始的方式，通过手动运行脚本去部署。每次全部服务器部署一遍，需要耗费的时间很长，如果遇到错误，也不能立刻进行回滚，只能将错误解决提交或者将备份代码进行还原。</p><p>在持续集成大行其道的今天，这种原始的方式实在是不应该再使用了！在调研了 Jekins 等开源持续集成工具之后，发现对于我们公司而言，比如 Jekins 的上手难度还是较高的，配置也比较复杂繁琐，也就没有采用。</p><p>于是想着自己能不能也搞一个简化版适用于公司的自动化部署系统呢？于是在开发的过程中，遇到了本文的问题，为了<strong>实时展示服务器命令输出情况</strong>，我使用了 WebSocket 技术来实现，同时使用 SpringBoot 框架进行快速搭建项目，该部署系统目前未开发完成，姑且作为一个练手项目。</p><a id="more"></a><h2 id="WebSocket-介绍"><a href="#WebSocket-介绍" class="headerlink" title="WebSocket 介绍"></a>WebSocket 介绍</h2><p>对于 WebSocket 就不多说什么了，直接引用维基百科的解释。  </p><blockquote><p>WebSocket是HTML5开始提供的一种浏览器与服务器间进行全双工通讯的网络技术。 WebSocket通信协议于2011年被IETF定为标准RFC 6455，WebSocketAPI被W3C定为标准。 在WebSocket API中，浏览器和服务器只需要要做一个握手的动作，然后，浏览器和服务器之间就形成了一条快速通道。两者之间就直接可以数据互相传送。</p></blockquote><p>易于理解的版本，可以看看阮一峰的 <a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">WebSocket 教程</a></p><p>下面讲解 WebSocket 与 SpringBoot 的集成使用。</p><h2 id="服务端环境准备"><a href="#服务端环境准备" class="headerlink" title="服务端环境准备"></a>服务端环境准备</h2><ol><li><p>SpringBoot 项目引入 WebSocket 依赖  </p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>新建 WebSocketHandler， 用于处理请求，以及向客户端发送消息</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketHandler</span> <span class="keyword">extends</span> <span class="title">AbstractWebSocketHandler</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CopyOnWriteArraySet&lt;WebSocketSession&gt; webSocketSet = <span class="keyword">new</span> CopyOnWriteArraySet&lt;&gt;();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionEstablished</span><span class="params">(WebSocketSession session)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 接收到WebSocket会触发</span></span><br><span class="line">        System.out.println(session.getUri().getQuery());</span><br><span class="line">        webSocketSet.add(session);</span><br><span class="line">        session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"欢迎！！！"</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterConnectionClosed</span><span class="params">(WebSocketSession session, CloseStatus closeStatus)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="comment">// 关闭WebSocket会触发</span></span><br><span class="line">        System.out.println(<span class="string">"关闭WebSocket会触发"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">handleTransportError</span><span class="params">(WebSocketSession session, Throwable exception)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        exception.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 广播消息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (WebSocketSession session : webSocketSet) &#123;</span><br><span class="line">            session.sendMessage(<span class="keyword">new</span> TextMessage(<span class="string">"欢迎你来啦！"</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>新建 Config 类，用于接收 WebSocket 请求</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableWebSocket</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSocketConfig</span> <span class="keyword">implements</span> <span class="title">WebSocketConfigurer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WebSocketHandler webSocketHandler;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">registerWebSocketHandlers</span><span class="params">(WebSocketHandlerRegistry webSocketHandlerRegistry)</span> </span>&#123;</span><br><span class="line">        webSocketHandlerRegistry.addHandler(webSocketHandler,<span class="string">"/webSocket"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="客户端环境准备"><a href="#客户端环境准备" class="headerlink" title="客户端环境准备"></a>客户端环境准备</h2><ol><li><p>新建页面</p> <figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span> <span class="comment">&lt;!--标准HTML5--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"zh-CN"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    var websocket = null;</span></span><br><span class="line"><span class="undefined">    if('WebSocket' in window) &#123;</span></span><br><span class="line"><span class="undefined">        websocket = new WebSocket('ws://localhost:8080/webSocket?code=abcd');</span></span><br><span class="line"><span class="xml">        <span class="comment">&lt;!--此处的地址即第二步指定的接口地址，可以传递参数--&gt;</span></span></span><br><span class="line"><span class="undefined">    &#125;else &#123;</span></span><br><span class="line"><span class="undefined">        alert('该浏览器不支持websocket!');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    websocket.onopen = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        alert('建立连接');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    websocket.onclose = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        alert('连接关闭');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    websocket.onmessage = function (event) &#123;</span></span><br><span class="line"><span class="undefined">        alert('收到消息:' + event.data)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    websocket.onerror = function () &#123;</span></span><br><span class="line"><span class="undefined">        alert('websocket通信发生错误！');</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">    window.onbeforeunload = function () &#123;</span></span><br><span class="line"><span class="undefined">        websocket.close();</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p> 注意：如果websocket 的 url写的是localhost:8080，则当前页面的地址也应是localhost:8080域名下，不可以是127.0.0.1:8080 ，否则会提示 403，如果用真实域名也同理。</p></li><li><p>新建 Controller 跳转到该页面</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(value = <span class="string">"/home"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">home</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ModelAndView(<span class="string">"home"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="进行测试"><a href="#进行测试" class="headerlink" title="进行测试"></a>进行测试</h2><ol><li>启动项目</li><li>访问 <a href="http://localhost:8080/home">http://localhost:8080/home</a></li><li>浏览器控制台打印结果：<br> <img src="http://img12345.5-project.com/20180228151982725368692.png" alt=""></li></ol><h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><ul><li>服务器向浏览器发送通知可以使用 WebSocket</li><li>聊天室</li></ul><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://img12345.5-project.com/websocket.zip">点我下载示例源码</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;目前，公司的项目部署方式还是使用的原始的方式，通过手动运行脚本去部署。每次全部服务器部署一遍，需要耗费的时间很长，如果遇到错误，也不能立刻进行回滚，只能将错误解决提交或者将备份代码进行还原。&lt;/p&gt;
&lt;p&gt;在持续集成大行其道的今天，这种原始的方式实在是不应该再使用了！在调研了 Jekins 等开源持续集成工具之后，发现对于我们公司而言，比如 Jekins 的上手难度还是较高的，配置也比较复杂繁琐，也就没有采用。&lt;/p&gt;
&lt;p&gt;于是想着自己能不能也搞一个简化版适用于公司的自动化部署系统呢？于是在开发的过程中，遇到了本文的问题，为了&lt;strong&gt;实时展示服务器命令输出情况&lt;/strong&gt;，我使用了 WebSocket 技术来实现，同时使用 SpringBoot 框架进行快速搭建项目，该部署系统目前未开发完成，姑且作为一个练手项目。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="SpringBoot" scheme="http://nullpointer.pw/tags/SpringBoot/"/>
    
      <category term="WebSocket" scheme="http://nullpointer.pw/tags/WebSocket/"/>
    
  </entry>
  
  <entry>
    <title>WebMagic之爬虫监控</title>
    <link href="http://nullpointer.pw/WebMagic%E4%B9%8B%E7%88%AC%E8%99%AB%E7%9B%91%E6%8E%A7.html"/>
    <id>http://nullpointer.pw/WebMagic之爬虫监控.html</id>
    <published>2018-02-26T22:16:05.000Z</published>
    <updated>2020-01-22T14:44:20.975Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>年前闲着无聊，研究了一阵子爬虫技术，接触到爬虫框架 <a href="http://webmagic.io">WebMagic</a>，感觉很好用。<br>在之后的工作中，接手了新站与第三方接口对接的工作，主要的工作是去抓取对方接口的内容；初始的时候，之前负责该工作的同事，是手动使用多线程去抓取，在应用的过程当中暴露了不少问题。比如对于接口内容超级多的时候，虽然使用了多线程，但是抓取的效率很低，而且也没有实现增量抓取，每次都需要去全量抓取，跑一次基本需要好几天-.-；小说是连载的情况下，这种问题是亟需解决的。</p><a id="more"></a><p>趁着熟悉了新兵器 WebMagic, 果断在项目中进行引入，解决以上问题。功能上线后，替换了原有的多线程抓取，目前已经十分稳定， 基本上配置好任务之后，就无需再人工干预了。</p><p>以下，正文是基于我学习 WebMagic 时练手项目，功能和在公司开发的差不多，只不过我本地开发的是去抓取盗版网站的内容。</p><h2 id="项目预览"><a href="#项目预览" class="headerlink" title="项目预览"></a>项目预览</h2><ol><li>菜单管理<br><img src="http://img12345.5-project.com/20180226151959640216787.png" alt=""></li><li><p>爬虫任务管理<br><img src="http://img12345.5-project.com/20180226151959624621624.png" alt=""></p></li><li><p>实现了爬虫的状态监控，以及可视化启停<br><img src="http://img12345.5-project.com/20180226151959631369334.png" alt=""></p></li></ol><h2 id="初入手兵器-基本使用"><a href="#初入手兵器-基本使用" class="headerlink" title="初入手兵器-基本使用"></a>初入手兵器-基本使用</h2><ol><li><p>爬虫套路分析<br>先看官方文档的总体架构图<br><img src="http://img12345.5-project.com/20180226151959718557253.png" alt="">  </p><blockquote><p>大部分模块WebMagic已经提供了默认实现。   </p><pre><code>一般来说，对于编写一个爬虫，PageProcessor是需要编写的部分，而Spider则是创建和控制爬虫的入口。  </code></pre></blockquote><p> 得益于 WebMagic 框架的良好封装，对于框架的使用者来说，所需要编写的代码几乎只有爬虫的逻辑代码，而对于怎么爬，维护任务队列的事情，WebMagic 都可以替我们做好。开始我们的爬虫之旅吧！</p></li></ol><ol><li><p>引入依赖<br>本文中所使用到的项目是基于 Maven 的 SSM 项目，在 pom.xml 中引入 WebMagic 的依赖。</p> <figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>us.codecraft<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>webmagic-extension<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>0.7.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>基本类图<br> 先将对应的处理类进行抽象出来，方便统一处理。<br> <img src="http://img12345.5-project.com/2018022615195977045471.png" alt=""></p></li><li><p>每个爬虫都有其对应的配置信息<br> <img src="http://img12345.5-project.com/20180226151959825374564.png" alt=""><br> Site 是 抓取网站的相关配置，包括编码、抓取间隔、重试次数  </p></li><li><p>对应的实现类重写 process 方法，在方法中实现对应的爬虫逻辑处理<br> <img src="http://img12345.5-project.com/20180226151959811438600.png" alt=""></p></li><li><p>启动爬虫<br> <img src="http://img12345.5-project.com/20180226151959883679762.png" alt=""></p></li><li>爬虫的使用就简单带过，具体可以将本文与官方文档结合使用，官方文档的示例只是基于 main 方法。</li></ol><h2 id="爬虫监控"><a href="#爬虫监控" class="headerlink" title="爬虫监控"></a>爬虫监控</h2><ol><li><p>扩展源码<br> 为了实现项目预览的效果，实现爬虫的状态监控，需要对爬虫进行扩展。因为官网提供的方式功能不足以达到在页面展示的效果。  </p><blockquote><p>添加监控非常简单，获取一个 SpiderMonitor 的单例 SpiderMonitor.instance()，并将你想要监控的 Spider 注册进去即可。你可以注册多个 Spider 到 SpiderMonitor 中。</p></blockquote><p> 查看 SpiderMonitor 源代码后，如果调用的是 获取一个 SpiderMonitor 的单例 SpiderMonitor  的 注册方法，发现 WebMagic 将每只爬虫的状态对象 SpiderStatusMXBean 全部添加到一个 List 集合当中去，这样就难以区分具体是哪一只爬虫的状态，所以我们需要对 SpiderMonitor 进行扩展。</p><p> 将 SpiderMonitor 中的<br> <code>private List&lt;SpiderStatusMXBean&gt; spiderStatuses = new ArrayList&lt;SpiderStatusMXBean&gt;();</code><br> 修改为 Map 集合，key 选择 Spider 的 UUID 作为唯一区分爬虫的标记。</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Experimental</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpiderMonitor</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> MySpiderMonitor INSTANCE = <span class="keyword">new</span> MySpiderMonitor();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> AtomicBoolean started = <span class="keyword">new</span> AtomicBoolean(<span class="keyword">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> MBeanServer mbeanServer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> String jmxServerName;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Map&lt;String,MySpiderStatus&gt; spiderStatuses = <span class="keyword">new</span> HashMap&lt;String,MySpiderStatus&gt;();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="title">MySpiderMonitor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">jmxServerName = <span class="string">"WebMagic"</span>;</span><br><span class="line">mbeanServer = ManagementFactory.getPlatformMBeanServer();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> Map&lt;String,MySpiderStatus&gt; <span class="title">getSpiderStatuses</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spiderStatuses;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Register spider for monitor.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> spiders spiders</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> this</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> MySpiderMonitor <span class="title">register</span><span class="params">(Spider... spiders)</span> <span class="keyword">throws</span> JMException </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (Spider spider : spiders) &#123;</span><br><span class="line">MyMonitorSpiderListener monitorSpiderListener = <span class="keyword">new</span> MyMonitorSpiderListener();</span><br><span class="line"><span class="keyword">if</span> (spider.getSpiderListeners() == <span class="keyword">null</span>) &#123;</span><br><span class="line">List&lt;SpiderListener&gt; spiderListeners = <span class="keyword">new</span> ArrayList&lt;SpiderListener&gt;();</span><br><span class="line">spiderListeners.add(monitorSpiderListener);</span><br><span class="line">spider.setSpiderListeners(spiderListeners);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">spider.getSpiderListeners().add(monitorSpiderListener);</span><br><span class="line">&#125;</span><br><span class="line">            MySpiderStatus spiderStatusMBean = getSpiderStatusMBean(spider, monitorSpiderListener);</span><br><span class="line">registerMBean(spiderStatusMBean);</span><br><span class="line">spiderStatuses.put(spider.getUUID(),spiderStatusMBean);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> MySpiderStatus <span class="title">getSpiderStatusMBean</span><span class="params">(Spider spider, MyMonitorSpiderListener monitorSpiderListener)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> MySpiderStatus(spider, monitorSpiderListener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> MySpiderMonitor <span class="title">instance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMonitorSpiderListener</span> <span class="keyword">implements</span> <span class="title">SpiderListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger successCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> AtomicInteger errorCount = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> List&lt;String&gt; errorUrls = Collections.synchronizedList(<span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">successCount.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onError</span><span class="params">(Request request)</span> </span>&#123;</span><br><span class="line">errorUrls.add(request.getUrl());</span><br><span class="line">errorCount.incrementAndGet();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AtomicInteger <span class="title">getSuccessCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> successCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> AtomicInteger <span class="title">getErrorCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> errorCount;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getErrorUrls</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> errorUrls;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerMBean</span><span class="params">(SpiderStatusMXBean spiderStatus)</span> <span class="keyword">throws</span> MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException </span>&#123;</span><br><span class="line">ObjectName objName = <span class="keyword">new</span> ObjectName(jmxServerName + <span class="string">":name="</span> + spiderStatus.getName());</span><br><span class="line">        <span class="keyword">if</span>(mbeanServer.isRegistered(objName)==<span class="keyword">false</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            mbeanServer.registerMBean(spiderStatus, objName);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 需要注意的是，SpiderMonitor 中使用的 SpiderStatus 也需要进行一同扩展。    </p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySpiderStatus</span> <span class="keyword">implements</span> <span class="title">SpiderStatusMXBean</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> Spider spider;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> Logger logger = LoggerFactory.getLogger(getClass());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> MySpiderMonitor.MyMonitorSpiderListener monitorSpiderListener;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MySpiderStatus</span><span class="params">(Spider spider, MySpiderMonitor.MyMonitorSpiderListener monitorSpiderListener)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.spider = spider;</span><br><span class="line">        <span class="keyword">this</span>.monitorSpiderListener = monitorSpiderListener;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Spider <span class="title">getSpider</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.spider;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spider.getUUID();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLeftPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spider.getScheduler() <span class="keyword">instanceof</span> MonitorableScheduler) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((MonitorableScheduler) spider.getScheduler()).getLeftRequestsCount(spider);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(<span class="string">"Get leftPageCount fail, try to use a Scheduler implement MonitorableScheduler for monitor count!"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getTotalPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (spider.getScheduler() <span class="keyword">instanceof</span> MonitorableScheduler) &#123;</span><br><span class="line">            <span class="keyword">return</span> ((MonitorableScheduler) spider.getScheduler()).getTotalRequestsCount(spider);</span><br><span class="line">        &#125;</span><br><span class="line">        logger.warn(<span class="string">"Get totalPageCount fail, try to use a Scheduler implement MonitorableScheduler for monitor count!"</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getSuccessPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monitorSpiderListener.getSuccessCount().get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getErrorPageCount</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monitorSpiderListener.getErrorCount().get();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">getErrorPages</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> monitorSpiderListener.getErrorUrls();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getStatus</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spider.getStatus().name();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getThread</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spider.getThreadAlive();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">start</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        spider.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        spider.stop();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Date <span class="title">getStartTime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> spider.getStartTime();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getPagePerSecond</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> runSeconds = (<span class="keyword">int</span>) (System.currentTimeMillis() - getStartTime().getTime()) / <span class="number">1000</span>;</span><br><span class="line">        <span class="keyword">return</span> getSuccessPageCount() / runSeconds;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>重写爬虫启动处代码</p> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebMagicService</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> ApplicationContext context;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> TaskService taskService;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(TaskDTO taskDTO, <span class="keyword">boolean</span> runAsync)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        MySpiderMonitor spiderMonitor = MySpiderMonitor.instance();</span><br><span class="line">        String ruleJson = taskDTO.getTaskRuleJson();</span><br><span class="line">        WebMagicConfig config = JSONObject.parseObject(ruleJson, WebMagicConfig.class);</span><br><span class="line">        SpiderConfig spiderConfig = config.getSpider();</span><br><span class="line">        AbstractPageProcess pageProcess = context.getBean(spiderConfig.getProcesser(), AbstractPageProcess.class);</span><br><span class="line">    </span><br><span class="line">        pageProcess.init(config);</span><br><span class="line">        pageProcess.setUuid(taskDTO.getSpiderUUID());</span><br><span class="line">    </span><br><span class="line">        Spider spider = Spider.create(pageProcess).thread(spiderConfig.getThread());</span><br><span class="line">        spider.setUUID(taskDTO.getSpiderUUID());</span><br><span class="line">    </span><br><span class="line">        List&lt;String&gt; pipelines = spiderConfig.getPipeline();</span><br><span class="line">        <span class="keyword">for</span> (String pipeline : pipelines) &#123;</span><br><span class="line">            Pipeline bean = context.getBean(pipeline, Pipeline.class);</span><br><span class="line">            <span class="keyword">if</span> (bean != <span class="keyword">null</span>) &#123;</span><br><span class="line">                spider.addPipeline(bean);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 设置Downloader</span></span><br><span class="line">        <span class="comment">// 设置Scheduler</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 注册爬虫</span></span><br><span class="line">        spiderMonitor.register(spider);</span><br><span class="line">        spider.addUrl(spiderConfig.getStartUrl());</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (runAsync) &#123;</span><br><span class="line">            spider.runAsync();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            spider.run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 爬虫状态监控</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;TaskDTO&gt; <span class="title">runTaskList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">        MySpiderMonitor spiderMonitor = MySpiderMonitor.instance();</span><br><span class="line">        Map&lt;String, MySpiderStatus&gt; spiderStatuses = spiderMonitor.getSpiderStatuses();</span><br><span class="line">    </span><br><span class="line">        List&lt;TaskDTO&gt; taskDTOList = taskService.findAll();</span><br><span class="line">        <span class="keyword">for</span> (TaskDTO taskDTO : taskDTOList) &#123;</span><br><span class="line">            MySpiderStatus spiderStatus = spiderStatuses.get(taskDTO.getSpiderUUID());</span><br><span class="line">            <span class="keyword">if</span> (spiderStatus == <span class="keyword">null</span>) &#123;</span><br><span class="line">                taskDTO.setRunState(Spider.Status.Stopped.name());</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                taskDTO.setRunState(spiderStatus.getStatus());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> taskDTOList;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> TaskDTO <span class="title">stop</span><span class="params">(TaskDTO taskDTO)</span> </span>&#123;</span><br><span class="line">        MySpiderMonitor spiderMonitor = MySpiderMonitor.instance();</span><br><span class="line">        Map&lt;String, MySpiderStatus&gt; spiderStatuses = spiderMonitor.getSpiderStatuses();</span><br><span class="line">        MySpiderStatus spiderStatus = spiderStatuses.get(taskDTO.getSpiderUUID());</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">if</span> (spiderStatus != <span class="keyword">null</span>) &#123;</span><br><span class="line">            spiderStatus.stop();</span><br><span class="line">            spiderStatus.getSpider().close();</span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        <span class="keyword">return</span> taskDTO;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 创建爬虫时，将爬虫注册到 MySpiderMonitor 中，之后通过 getSpiderStatuses 方法即可获取所有爬虫的状态了。</p></li></ol><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://img12345.5-project.com/solam.zip">点我下载源码</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;年前闲着无聊，研究了一阵子爬虫技术，接触到爬虫框架 &lt;a href=&quot;http://webmagic.io&quot;&gt;WebMagic&lt;/a&gt;，感觉很好用。&lt;br&gt;在之后的工作中，接手了新站与第三方接口对接的工作，主要的工作是去抓取对方接口的内容；初始的时候，之前负责该工作的同事，是手动使用多线程去抓取，在应用的过程当中暴露了不少问题。比如对于接口内容超级多的时候，虽然使用了多线程，但是抓取的效率很低，而且也没有实现增量抓取，每次都需要去全量抓取，跑一次基本需要好几天-.-；小说是连载的情况下，这种问题是亟需解决的。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="webmagic" scheme="http://nullpointer.pw/tags/webmagic/"/>
    
      <category term="爬虫监控" scheme="http://nullpointer.pw/tags/%E7%88%AC%E8%99%AB%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>SpringDataJPA快速入门</title>
    <link href="http://nullpointer.pw/SpringDataJPA%E5%BF%AB%E9%80%9F%E5%85%A5%E9%97%A8.html"/>
    <id>http://nullpointer.pw/SpringDataJPA快速入门.html</id>
    <published>2018-01-27T13:02:48.000Z</published>
    <updated>2020-01-22T14:43:40.925Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前在学习 SpringBoot 框架的时候，使用到了 SpringData JPA，但是当时只是简单的查询，没有用到稍微复杂的查询。  </p><p>JPA 的 JPQL 语法规则对于简单的查询实属利器，大大加快了开发速度。不久前，在公司将用户推荐功能单独抽取出为一个独立项目，由于公司一直沿用的底层框架太老，只能使用 JDK1.6，JDK 1.9都出来了，实在不能忍😅，果断引入了 SpringData JPA。  </p><p>然后最近公司其他同事接手了该项目，但是不太了解 SpringData JPA 的使用，于是有了此文，不会就可以直接让他看本篇博客了哈哈。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里不讲解 SpringData JPA 与框架的整合，只讲解 JPA 语法的使用</p><h3 id="Entity-实体类"><a href="#Entity-实体类" class="headerlink" title="Entity 实体类"></a>Entity 实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Entity</span> <span class="comment">// 表示为一个实体类</span></span><br><span class="line"><span class="meta">@Table</span>(<span class="string">"employee"</span>) <span class="comment">// 表名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Employee</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Id</span> <span class="comment">//主键标识注解</span></span><br><span class="line">    <span class="meta">@GeneratedValue</span> <span class="comment">// 主键生成方式</span></span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//Getter/Setter省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Repository-接口"><a href="#Repository-接口" class="headerlink" title="Repository 接口"></a>Repository 接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 继承 JpaRepository 接口，第一个参数为查询的实体类，第二个为实体类的主键数据类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">EmployeeRepository</span> <span class="keyword">extends</span> <span class="title">JpaRepository</span>&lt;<span class="title">Employee</span>, <span class="title">Integer</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="插入测试数据"><a href="#插入测试数据" class="headerlink" title="插入测试数据"></a>插入测试数据</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testAdd</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++) &#123;</span><br><span class="line">        Employee employee = <span class="keyword">new</span> Employee();</span><br><span class="line">        employee.setAge(i);</span><br><span class="line">        employee.setName(<span class="string">"test"</span> + i);</span><br><span class="line">        employeeRepository.save(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="JPA-查询语法讲解"><a href="#JPA-查询语法讲解" class="headerlink" title="JPA 查询语法讲解"></a>JPA 查询语法讲解</h2><h3 id="使用-JPQL-进行查询"><a href="#使用-JPQL-进行查询" class="headerlink" title="使用 JPQL 进行查询"></a>使用 JPQL 进行查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 新增</span></span><br><span class="line">employeeRepository.save(employee);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1</span></span><br><span class="line">employeeRepository.findByName(<span class="string">"test1"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1 and age = ?2</span></span><br><span class="line">employeeRepository.findByNameAndAge(<span class="string">"test1"</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age between ?1 and ?2 【包含头尾】</span></span><br><span class="line">List&lt;Employee&gt; byAgeBetween = employeeRepository.findByAgeBetween(<span class="number">10</span>, <span class="number">16</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &lt; ?1</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByAgeLessThan(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &gt; ?1</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByAgeGreaterThan(<span class="number">90</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name is null  【不包含为空字符串的数据】</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByNameIsNull();</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "test9%" 以test9为开头的name</span></span><br><span class="line">List&lt;Employee&gt; list = employeeRepository.findByNameLike(<span class="string">"test9%"</span>);</span><br><span class="line">或者</span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "test_" 以test开头，且后面只模糊匹配一位</span></span><br><span class="line">List&lt;Employee&gt; list2 = employeeRepository.findByNameLike(<span class="string">"test_"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name like "%6" 模糊匹配以6结尾的</span></span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameEndingWith(<span class="number">6</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name in (?1, ?2)</span></span><br><span class="line">List&lt;String&gt; names = Arrays.asList(<span class="string">"test1"</span>, <span class="string">"test2"</span>);</span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByNameIn(names);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where age &lt;&gt; ?1</span></span><br><span class="line">List&lt;Employee&gt; employees = employeeRepository.findByAgeNot(<span class="number">99</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// where name = ?1 order by age desc </span></span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">findByNameOrderByAgeDesc</span><span class="params">(<span class="string">"test"</span>)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="使用自定义-Sql-以及-原生-Sql-查询"><a href="#使用自定义-Sql-以及-原生-Sql-查询" class="headerlink" title="使用自定义 Sql 以及 原生 Sql 查询"></a>使用自定义 Sql 以及 原生 Sql 查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** EmployeeRepository.java 添加方法 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据姓名与年龄查找，[通过占位符获取参数值]</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select o from Employee o where name = ?1 and age = ?2"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams</span><span class="params">(String name, Integer age)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 根据姓名与年龄查找，[通过命名参数获取参数值]，必须使用 @Param 注解</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"select o from Employee o where name = :name and age = :age"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams2</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 原生SQL，与上面不同的是，上面使用的是对象名称以及对象属性名称，Native SQL使用数据库表名以及字段名</span></span><br><span class="line"><span class="meta">@Query</span>(nativeQuery = <span class="keyword">true</span>, value = <span class="string">"select * from employee where name = :name and age = :age"</span>)</span><br><span class="line"><span class="function">List&lt;Employee&gt; <span class="title">queryEmployeeByParams3</span><span class="params">(@Param(<span class="string">"name"</span>)</span> String name, @<span class="title">Param</span><span class="params">(<span class="string">"age"</span>)</span> Integer age)</span>;</span><br></pre></td></tr></table></figure><hr><h3 id="JPA-更新操作"><a href="#JPA-更新操作" class="headerlink" title="JPA 更新操作"></a>JPA 更新操作</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** 需要搭配使用 <span class="doctag">@Query</span> 与 <span class="doctag">@Modifying</span> 和 <span class="doctag">@Transactional</span> 注解使用*/</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Modifying</span></span><br><span class="line"><span class="meta">@Query</span>(<span class="string">"update Employee o set o.age = ?2 where o.id = ?1"</span>)</span><br><span class="line"><span class="function">Integer <span class="title">updateAge</span><span class="params">(Integer id, Integer age)</span></span>;</span><br></pre></td></tr></table></figure><p>在 Service 层调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> EmployeeRepository employeeRepository;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Transactional</span> <span class="comment">// 必须开启事务</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(Integer id, Integer age)</span> </span>&#123;</span><br><span class="line">    employeeRepository.update(id, age);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="分页查询"><a href="#分页查询" class="headerlink" title="分页查询"></a>分页查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// EmployeeRepository 接口定义</span></span><br><span class="line"><span class="function">Page&lt;Employee&gt; <span class="title">findByNameStartingWith</span><span class="params">(String name, Pageable pageable)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 测试类 EmployeeRepositoryTest.java</span></span><br><span class="line"><span class="comment">// 普通分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNameStartingWith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 注意 page 从 0 开始</span></span><br><span class="line">    Pageable request = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">10</span>);</span><br><span class="line">    Page&lt;Employee&gt; result = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>, request);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : result.getContent()) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 带排序条件的分页查询</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testFindByNameStartingWith</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    Sort.Order order = <span class="keyword">new</span> Sort.Order(Sort.Direction.DESC, <span class="string">"id"</span>);</span><br><span class="line">    Sort sort = <span class="keyword">new</span> Sort(order);</span><br><span class="line">    Pageable request = <span class="keyword">new</span> PageRequest(<span class="number">0</span>, <span class="number">10</span>, sort);</span><br><span class="line">    Page&lt;Employee&gt; result = employeeRepository.findByNameStartingWith(<span class="string">"test"</span>, request);</span><br><span class="line">    <span class="keyword">for</span> (Employee employee : result.getContent()) &#123;</span><br><span class="line">        System.out.println(employee);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态-SQL-查询"><a href="#动态-SQL-查询" class="headerlink" title="动态 SQL 查询"></a>动态 SQL 查询</h3><p>在 Java 开发中，动态 SQL 是必不可少的，JPA 也可以实现，Repository 多继承一个接口 <code>JpaSpecificationExecutor</code> 即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// 修改之前的 EmployeeRepository, 使其多继承 JpaSpecificationExecutor 接口</span><br><span class="line">public interface EmployeeRepository extends JpaRepository&lt;Employee, Integer&gt;, JpaSpecificationExecutor&lt;Employee&gt;&#123;</span><br><span class="line"></span><br><span class="line">    // ......</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Pageable request = new PageRequest(0, 10);</span><br><span class="line">Specification&lt;Employee&gt; specification = new Specification&lt;Employee&gt;() &#123;</span><br><span class="line">public Predicate toPredicate(Root&lt;Employee&gt; root, CriteriaQuery&lt;?&gt; query, CriteriaBuilder cb) &#123;</span><br><span class="line">        Path&lt;Integer&gt; path = root.get(&quot;age&quot;);</span><br><span class="line">                return cb.gt(path, 50);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">Page&lt;Employee&gt; all = employeeRepository.findAll(specification, request);</span><br></pre></td></tr></table></figure></p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>这里感谢一下<a href="https://www.imooc.com">慕课网</a>，快速入门多亏了 imooc 上的课程。</p><p>参考课程：    </p><ul><li><a href="https://www.imooc.com/learn/821">https://www.imooc.com/learn/821</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前在学习 SpringBoot 框架的时候，使用到了 SpringData JPA，但是当时只是简单的查询，没有用到稍微复杂的查询。  &lt;/p&gt;
&lt;p&gt;JPA 的 JPQL 语法规则对于简单的查询实属利器，大大加快了开发速度。不久前，在公司将用户推荐功能单独抽取出为一个独立项目，由于公司一直沿用的底层框架太老，只能使用 JDK1.6，JDK 1.9都出来了，实在不能忍😅，果断引入了 SpringData JPA。  &lt;/p&gt;
&lt;p&gt;然后最近公司其他同事接手了该项目，但是不太了解 SpringData JPA 的使用，于是有了此文，不会就可以直接让他看本篇博客了哈哈。&lt;/p&gt;
    
    </summary>
    
      <category term="SpringData" scheme="http://nullpointer.pw/categories/SpringData/"/>
    
    
      <category term="JPA" scheme="http://nullpointer.pw/tags/JPA/"/>
    
  </entry>
  
  <entry>
    <title>Mac下VMwareFusion安装CentOS并设置静态IP</title>
    <link href="http://nullpointer.pw/Mac%E4%B8%8BVMwareFusion%E5%AE%89%E8%A3%85CentOS%E5%B9%B6%E8%AE%BE%E7%BD%AE%E9%9D%99%E6%80%81IP.html"/>
    <id>http://nullpointer.pw/Mac下VMwareFusion安装CentOS并设置静态IP.html</id>
    <published>2018-01-21T09:03:09.000Z</published>
    <updated>2020-01-22T14:40:47.343Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>MAC下VMwareFusion安装CentOS及设置固定IP<br>之前写过一篇文章，关于虚拟机的快速安装的教程 <a href="http://nullpointer.pw/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85.html">CentOS快速安装</a>，当时是学习中用到了 Linux 环境，为了以后无需重复进行虚拟机繁杂配置，比如配置网络连接外网，才制作的镜像。为了开发调试方便，镜像设置为了固定 IP，所以导入该镜像的时候，需要简单设置以下即可 访问外网环境。<br>当时使用的是 Windows 环境，前不久入手了 MBP，也需要用到虚拟机环境，但是 MAC 环境下并没有 <code>虚拟网络编辑器</code>,所以设置静态 IP 费了好一般功夫。本文介绍虚拟机快速导入镜像，修改静态IP。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>VMware Fusion </li><li>CentOS 镜像(链接：<a href="http://pan.baidu.com/s/1nuKxhpf">http://pan.baidu.com/s/1nuKxhpf</a> 密码：8dt8)</li></ul><h2 id="导入虚拟机镜像"><a href="#导入虚拟机镜像" class="headerlink" title="导入虚拟机镜像"></a>导入虚拟机镜像</h2><p>下载镜像后解压，打开 Vmware Fusion 软件，选择导入</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151651476447145.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择镜像文件，选择 ovf 文件后打开。</p><p><img src="http://img12345.5-project.com/2018012115165148637891.png" alt=""></p><p>导入过程不再赘述。</p><hr><h2 id="为静态IP做准备"><a href="#为静态IP做准备" class="headerlink" title="为静态IP做准备"></a>为静态IP做准备</h2><p>打开 VMware Fusion 设置。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151652247955860.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>进入网络选项卡，添加一个网卡。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151652276054517.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>打开终端，输入以下命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Preferences/VMware\ Fusion/</span><br><span class="line"></span><br><span class="line">sudo vim networking</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151652307377122.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>红色圈内是我们需要关注的地方,修改完之后保存退出。</p><p>再修改另外一个文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd /Library/Preferences/VMware\ Fusion/vmnet2</span><br><span class="line">sudo vim nat.conf</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/2018012115165233457757.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="使网络配置生效"><a href="#使网络配置生效" class="headerlink" title="使网络配置生效"></a>使网络配置生效</h2><p>重新打开VMware的网络配置，为了使刚才的修改生效，我们重新设置保存一下。步骤是，先取消勾选<code>将 Mac 主机连接到该网络</code> 点击应用；再勾选上 <code>将 Mac 主机连接到该网络</code>，点击应用。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/2018012115165234489139.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><h2 id="修改虚拟机的静态-IP"><a href="#修改虚拟机的静态-IP" class="headerlink" title="修改虚拟机的静态 IP"></a>修改虚拟机的静态 IP</h2><p>打开虚拟机<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">账号: root</span><br><span class="line">密码: 123456</span><br></pre></td></tr></table></figure></p><p>修改第一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/sysconfig/network-scripts/ifcfg-eth0</span><br></pre></td></tr></table></figure></p><p>修改 <code>DEVICE</code> 为 <code>eth1</code>;<br>修改 <code>IPADDR</code> 地址为 <code>192.168.200.3 ~ 192.168.200.254</code> 之间的值;<br>修改 <code>GATEWAY</code> 为 <code>nat.conf</code> 中配置的 ip 地址 <code>192.168.200.2</code></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151652365148908.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>修改另外一个文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/udev/rules.d/70-persistent-net.rules</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">注释掉 eth0 所在行，结果是</span><br><span class="line"># PCI device 0x8086:0x100f (e1000)</span><br><span class="line">#SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;00:0c:29:30:a4:b5&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth0&quot;</span><br><span class="line"># PCI device 0x8086:0x100f (e1000)</span><br><span class="line">SUBSYSTEM==&quot;net&quot;, ACTION==&quot;add&quot;, DRIVERS==&quot;?*&quot;, ATTR&#123;address&#125;==&quot;00:0c:29:cd:05:ea&quot;, ATTR&#123;type&#125;==&quot;1&quot;, KERNEL==&quot;eth*&quot;, NAME=&quot;eth1&quot;</span><br></pre></td></tr></table></figure><p>重启 虚拟机</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure><p>重启成功后，输入 <code>ifconfig</code> 提示：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151652403427361.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>此时已经也可以 ping 通外网了，在 mac 的终端中也可以 ping 通虚拟机。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>为了在使用过程中，虚拟机环境被折腾坏，可以做一下快照。到时候可以直接恢复到此快照，免去再次安装的步骤。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180121151651578018201.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/zhishengqianjun/article/details/77046796">http://blog.csdn.net/zhishengqianjun/article/details/77046796</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;MAC下VMwareFusion安装CentOS及设置固定IP&lt;br&gt;之前写过一篇文章，关于虚拟机的快速安装的教程 &lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="服务器" scheme="http://nullpointer.pw/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="VMware Fusion" scheme="http://nullpointer.pw/tags/VMware-Fusion/"/>
    
      <category term="静态IP" scheme="http://nullpointer.pw/tags/%E9%9D%99%E6%80%81IP/"/>
    
      <category term="mac" scheme="http://nullpointer.pw/tags/mac/"/>
    
  </entry>
  
  <entry>
    <title>基于微信事件二维码推广</title>
    <link href="http://nullpointer.pw/%E5%9F%BA%E4%BA%8E%E5%BE%AE%E4%BF%A1%E4%BA%8B%E4%BB%B6%E4%BA%8C%E7%BB%B4%E7%A0%81%E6%8E%A8%E5%B9%BF.html"/>
    <id>http://nullpointer.pw/基于微信事件二维码推广.html</id>
    <published>2018-01-06T11:53:36.000Z</published>
    <updated>2020-01-22T14:32:58.748Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前写了一篇关于推广系统设计的博客，在那篇博客中介绍了统一的推广地址生成的方法，只举例说明了一种推广的方式，本篇博客讲解另外一种推广方式，基于<strong>微信事件二维码</strong>的方式。需要注意的是，事件二维码<strong>只有服务号有此接口权限，订阅号是没有该接口权限的</strong>，当然如果没有服务号的话，想学习一下接口的使用，微信官方提供的<strong>测试号</strong>可以使用该接口。</p><a id="more"></a><h2 id="谈谈事件二维码"><a href="#谈谈事件二维码" class="headerlink" title="谈谈事件二维码"></a>谈谈事件二维码</h2><p>二维码的便利性毋庸置疑，尤其是在微信中可以通过长按识别的方式识别二维码，让二维码的使用更加便捷频繁。微信推出的事件二维码大大提高二维码的交互能力，以下内容摘自官网介绍。</p><blockquote><p>为了满足用户渠道推广分析和用户帐号绑定等场景的需要，公众平台提供了生成带参数二维码的接口。使用该接口可以获得多个带不同场景值的二维码，用户扫描后，公众号可以接收到事件推送。</p></blockquote><p>事件二维码可以产生事件，并且二维码是可以携带参数的，这就可以用作推广。比如我司，针对某一本书的某一章节生成事件二维码，用户扫描二维码后，如果未关注公众号，会进入关注公众号页面，方便用户进行关注，关注后，后台接收到微信的事件推送，得到了存储的书与章节的信息，则可以直接发送消息，引导用户进入推广的章节页面，以下为我司微信推广的流程图。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/2018010615152212998383.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="创建事件二维码"><a href="#创建事件二维码" class="headerlink" title="创建事件二维码"></a>创建事件二维码</h2><p>为了便于演示，我的项目是基于 SpringBoot 搭建。本项目使用的是微信测试号，可以在此处进行申请 <strong><a href="https://mp.weixin.qq.com/debug/cgi-bin/sandboxinfo?action=showinfo&amp;t=sandbox/index">微信测试号</a></strong>。appID 与 appsecret 在微信测试号中可以得到。<br><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/2018010615152200274759.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></p><p>之前在公司写这套推广系统的时候，都是自己看微信公众平台文档，自己写的基础代码，比如封装请求参数，参数拼接，最近在 Github 上发现了一个封装得不错的 微信开发 SDK，对微信的开放平台、公众平台、小程序都有对应的子项目。秉着不重复造轮子的原则，我们引入这套 SDK，也就无需自己再进行封装了，还可以学习封装的源代码。</p><ol><li><p>首先添加 Maven 依赖，这里引入操作微信公众号的 SDK</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.binarywang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>weixin-java-mp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>然后配置微信公众平台参数 appID 与 appsecret，<br>新建微信平台配置信息 Properties</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.context.properties.ConfigurationProperties;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"wechat"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechatProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String appId;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String seecret;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>application.yml 中添加 appID 与 appsecret</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">wechat:</span></span><br><span class="line"><span class="attr">  appId:</span> <span class="string">wx1234567890</span></span><br><span class="line"><span class="attr">  seecret:</span> <span class="string">c912345678900987654321</span></span><br><span class="line"><span class="attr">  token:</span> <span class="string">QAnEo9760zDywWMvTKCxx</span></span><br></pre></td></tr></table></figure></li><li><p>创建微信配置类，声明两个 Bean。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WechatProperties wechatProperties;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpService <span class="title">wxMpService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpService wxMpService = <span class="keyword">new</span> WxMpServiceImpl();</span><br><span class="line">        wxMpService.setWxMpConfigStorage(wxMpConfigStorage());</span><br><span class="line">        <span class="keyword">return</span> wxMpService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WxMpConfigStorage <span class="title">wxMpConfigStorage</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        WxMpInMemoryConfigStorage wxMpConfigStorage = <span class="keyword">new</span> WxMpInMemoryConfigStorage();</span><br><span class="line">        wxMpConfigStorage.setAppId(wechatProperties.getAppId());</span><br><span class="line">        wxMpConfigStorage.setSecret(wechatProperties.getSeecret());</span><br><span class="line">        wxMpConfigStorage.setToken(wechatProperties.getToken());</span><br><span class="line">        <span class="keyword">return</span> wxMpConfigStorage;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>创建 WechaptService 以及其实现类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechapServiceImpl</span> <span class="keyword">implements</span> <span class="title">WechatService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxMpService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建永久事件二维码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 附加的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needShortUrl 是否转换为短链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 微信二维码地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createQrCode</span><span class="params">(String param, <span class="keyword">boolean</span> needShortUrl)</span> </span>&#123;</span><br><span class="line">        WxMpQrcodeService qrService = wxMpService.getQrcodeService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WxMpQrCodeTicket ticket = qrService.qrCodeCreateLastTicket(param);</span><br><span class="line">            String url = qrService.qrCodePictureUrl(ticket.getTicket(), needShortUrl);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建临时事件二维码</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> param 附加的参数</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> expireSeconds 有效时间 单位为秒，最大2592000（即30天）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> needShortUrl 是否转换为短链接</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 微信二维码地址</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">createTempQrCode</span><span class="params">(String param, Integer expireSeconds, <span class="keyword">boolean</span> needShortUrl)</span> </span>&#123;</span><br><span class="line">        WxMpQrcodeService qrService = wxMpService.getQrcodeService();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            WxMpQrCodeTicket ticket = qrService.qrCodeCreateTmpTicket(param, expireSeconds);</span><br><span class="line">            String url = qrService.qrCodePictureUrl(ticket.getTicket(), needShortUrl);</span><br><span class="line">            <span class="keyword">return</span> url;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (WxErrorException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><p>可以看到，简单的几行语句就可以生成事件二维码了。这里的参数 param 就是附加到二维码中的参数（可以放入推广相关参数，如推广链接ID），用户扫描后，微信服务器会推送相应的事件，可以在事件参数中可以获得 param。</p><ol><li>创建 Spring Junit 测试该方法，生成事件二维码</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith</span>(SpringRunner.class)</span><br><span class="line"><span class="meta">@SpringBootTest</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WechapServiceImplTest</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Resource</span></span><br><span class="line">    <span class="keyword">private</span> WechatService wechatService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createQrCode</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        String url = wechatService.createQrCode(<span class="string">"hello wechat"</span>, <span class="keyword">true</span>);</span><br><span class="line">        System.out.println(url);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>打开生成的二维码链接，短链接 URL 格式如： <strong><a href="https://w.url.cn/s/xxxxx">https://w.url.cn/s/xxxxx</a></strong> 使用微信进行扫描，会进入提示关注的页面。<figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/2018010615152206445930.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure></li></ol><h2 id="接收微信事件推送"><a href="#接收微信事件推送" class="headerlink" title="接收微信事件推送"></a>接收微信事件推送</h2><p>参数二维码已经生成了，但是你发现扫描关注之后，神马事情也没有发生，说好的发送消息呢！这是因为你没有接收微信的扫码关注事件推送和对其进行处理呢。</p><ol><li><p>创建 Controller 用于微信接口请求校验，然后启动项目</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/wechat/auth"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WeChatController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpService wxService;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> WxMpMessageRouter router;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping</span>(produces = <span class="string">"text/plain;charset=utf-8"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">authGet</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            @RequestParam(name = <span class="string">"signature"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    required = <span class="keyword">false</span>)</span> String signature,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"timestamp"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                    required = <span class="keyword">false</span>)</span> String timestamp,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"nonce"</span>, required = <span class="keyword">false</span>)</span> String nonce,</span></span><br><span class="line"><span class="function">            @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"echostr"</span>, required = <span class="keyword">false</span>)</span> String echostr,</span></span><br><span class="line"><span class="function">            HttpServletResponse response) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (StringUtils.isAnyBlank(signature, timestamp, nonce, echostr)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"请求参数非法，请核实!"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.getWriter().print(echostr);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="number">1111</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping</span>(produces = <span class="string">"application/xml; charset=UTF-8"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">post</span><span class="params">(@RequestBody String requestBody,</span></span></span><br><span class="line"><span class="function"><span class="params">                       @RequestParam(<span class="string">"signature"</span>)</span> String signature,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(<span class="string">"timestamp"</span>)</span> String timestamp,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(<span class="string">"nonce"</span>)</span> String nonce,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"encrypt_type"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                               required = <span class="keyword">false</span>)</span> String encType,</span></span><br><span class="line"><span class="function">                       @<span class="title">RequestParam</span><span class="params">(name = <span class="string">"msg_signature"</span>,</span></span></span><br><span class="line"><span class="function"><span class="params">                               required = <span class="keyword">false</span>)</span> String msgSignature) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.wxService.checkSignature(timestamp, nonce, signature)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"非法请求，可能属于伪造的请求！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String out = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (encType == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 明文传输的消息</span></span><br><span class="line">            WxMpXmlMessage inMessage = WxMpXmlMessage.fromXml(requestBody);</span><br><span class="line">            WxMpXmlOutMessage outMessage = <span class="keyword">this</span>.route(inMessage);</span><br><span class="line">            <span class="keyword">if</span> (outMessage == <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            out = outMessage.toXml();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"aes"</span>.equals(encType)) &#123;</span><br><span class="line">            <span class="comment">// aes加密的消息</span></span><br><span class="line">            <span class="comment">/*WxMpXmlMessage inMessage = WxMpXmlMessage.fromEncryptedXml(</span></span><br><span class="line"><span class="comment">                    requestBody, this.wxService.getWxMpConfigStorage(), timestamp,</span></span><br><span class="line"><span class="comment">                    nonce, msgSignature);</span></span><br><span class="line"><span class="comment">            WxMpXmlOutMessage outMessage = this.route(inMessage);</span></span><br><span class="line"><span class="comment">            if (outMessage == null) &#123;</span></span><br><span class="line"><span class="comment">                return "";</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">            out = outMessage</span></span><br><span class="line"><span class="comment">                    .toEncryptedXml(this.wxService.getWxMpConfigStorage());*/</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> out;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">route</span><span class="params">(WxMpXmlMessage message)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.router.route(message);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>设置微信消息推送接口，用于接收微信推送的请求，这里需要填写外网域名，如果你有自己的服务器和域名，可以直接填入；如果你没有，可以使用 <a href="https://ngrok.cc">ngrok</a> 进行内网穿透，得到一个外网域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20180106151522725276515.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>比如我的微信请求校验地址为 <code>127.0.0.1:8080/wechat/auth</code>， 通过内网映射转发后得到的外网地址为 <code>http://vcmq.free.ngrok.cc/wechat/auth</code>，填写这个域名， Token 用于校验服务器，之前的 yml 文件中已指定了 token 的值，填写该值即可，点击确认。</p></li><li><p>微信扫描事件二维码，微信服务器推送请求到 post 方法，调用 route 方法，进行处理。<br><a href="https://mp.weixin.qq.com/wiki?t=resource/res_main&amp;id=mp1421140454">事件二维码文档地址</a></p><blockquote><p>事件KEY值，qrscene_为前缀，后面为二维码的参数值。</p></blockquote></li></ol><p>可以针对这种情况的进行处理。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SubscribeHandler</span> <span class="keyword">extends</span> <span class="title">AbstractHandler</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> WxMpXmlOutMessage <span class="title">handle</span><span class="params">(WxMpXmlMessage wxMessage,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  Map&lt;String, Object&gt; context, WxMpService weixinService,</span></span></span><br><span class="line"><span class="function"><span class="params">                                  WxSessionManager sessionManager)</span> <span class="keyword">throws</span> WxErrorException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.logger.info(<span class="string">"新关注用户 OPENID: "</span> + wxMessage.getFromUser());</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*// 获取微信用户基本信息</span></span><br><span class="line"><span class="comment">    WxMpUser userWxInfo = weixinService.getUserService()</span></span><br><span class="line"><span class="comment">        .userInfo(wxMessage.getFromUser(), null);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    if (userWxInfo != null) &#123;</span></span><br><span class="line"><span class="comment">      // TODO 可以添加关注用户到本地</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    WxMpXmlOutMessage responseResult = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      responseResult = handleSpecial(wxMessage);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (responseResult != <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> responseResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> TextBuilder().build(<span class="string">"感谢关注"</span>, wxMessage, weixinService);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">      <span class="keyword">this</span>.logger.error(e.getMessage(), e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 处理特殊请求，比如如果是扫码进来的，可以做相应处理</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">private</span> WxMpXmlOutMessage <span class="title">handleSpecial</span><span class="params">(WxMpXmlMessage wxMessage)</span></span></span><br><span class="line"><span class="function">      <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">      <span class="comment">/* 微信返回数据示例</span></span><br><span class="line"><span class="comment">      &#123;</span></span><br><span class="line"><span class="comment">              "createTime": 1515235853,</span></span><br><span class="line"><span class="comment">              "event": "subscribe",</span></span><br><span class="line"><span class="comment">              "eventKey": "qrscene_hello wechat",</span></span><br><span class="line"><span class="comment">              "fromUser": "onbpEv3umpi7ihx381D-vpw1SEwE",</span></span><br><span class="line"><span class="comment">              "msgType": "event",</span></span><br><span class="line"><span class="comment">              "ticket": "gQA",</span></span><br><span class="line"><span class="comment">              "toUser": "gh_96fd4ea38axx"</span></span><br><span class="line"><span class="comment">      &#125;*/</span></span><br><span class="line">      <span class="comment">// 如果是扫描</span></span><br><span class="line">      <span class="keyword">if</span> (wxMessage.getEventKey().startsWith(<span class="string">"qrscene_"</span>)) &#123;</span><br><span class="line">          <span class="comment">// 在此处进行绑定操作</span></span><br><span class="line">          System.out.println();</span><br><span class="line">      &#125;</span><br><span class="line">      System.out.println(JSONObject.toJSONString(wxMessage));</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p><a href="http://img12345.5-project.com/wechat-simple-example.zip">示例工程下载</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://github.com/Wechat-Group/weixin-java-tools/blob/master/demo.md">https://github.com/Wechat-Group/weixin-java-tools/blob/master/demo.md</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前写了一篇关于推广系统设计的博客，在那篇博客中介绍了统一的推广地址生成的方法，只举例说明了一种推广的方式，本篇博客讲解另外一种推广方式，基于&lt;strong&gt;微信事件二维码&lt;/strong&gt;的方式。需要注意的是，事件二维码&lt;strong&gt;只有服务号有此接口权限，订阅号是没有该接口权限的&lt;/strong&gt;，当然如果没有服务号的话，想学习一下接口的使用，微信官方提供的&lt;strong&gt;测试号&lt;/strong&gt;可以使用该接口。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="推广系统" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="推广" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF/"/>
    
  </entry>
  
  <entry>
    <title>2017年终总结</title>
    <link href="http://nullpointer.pw/2017%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93.html"/>
    <id>http://nullpointer.pw/2017年终总结.html</id>
    <published>2017-12-30T10:02:57.000Z</published>
    <updated>2020-01-22T14:30:05.081Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>一年时间倏然而逝，今日已是年终岁尾矣！  </p><p>总是感觉今年过得太快了，很多次下班的时候，同事说：“明天周五了”，而我的反应就是：“诶？又要放假了吗？我怎么感觉前天才上班的啊”。<br>以前还在上学的时候，总是感叹，这一天天为何如此漫长呢！随着年龄的增长，仿佛时间的流速也同时加快了一般，每天总是觉得是在和时间赛跑，让我有些焦虑。</p><p>今年过的让我感觉很快，但是觉得比以前充实，因为做到的事情比以前多很多。</p><a id="more"></a><h2 id="2017-我做了哪些事"><a href="#2017-我做了哪些事" class="headerlink" title="2017 我做了哪些事"></a>2017 我做了哪些事</h2><ul><li><p><strong>记录 2017 整年收支</strong><br>从 2017 年开始，比较认真的记录了自己的日常开支情况，记账 APP 显示已经坚持 记账 575 天了。我个人记账就是为了防止自己过度消费，毕竟移动支付在中国这么发达，钱已经变成了一串数字，不注意就全花光了。上个月买了一台 MBP，用于日常学习，之前的旧电脑已经带不动 IDE 了，索性换了，真的是血贵，不过写代码真爽！有的支出就是无法避免，能做的就是减少不必要的支出；记账这件事情上，做的不太好的是虽然记录的比较详尽，但是缺少总结；来年需要做阶段性的总结，比如每个月总结一次，找出不必要支出，下次尽量避免，努力实行“开源节流”。</p></li><li><p><strong>开始基金定投</strong><br>年初的时候，看了一些理财的入门书籍，基本的理财技能还是需要掌握的，于是从四月份开始走上了养基之路，目前为止只定投了一只股基，收益尚可，做的不太好的地方就是把鸡蛋都放在了同一个篮子里，明年要着手于分散投资。</p></li><li><p><strong>记录 2017 整年时间</strong><br>去年看了《奇特的一生》这本书，感觉时间不够用的我，尝试学习 <a href="https://zh.wikipedia.org/wiki/%E4%BA%9A%E5%8E%86%E5%B1%B1%E5%A4%A7%C2%B7%E4%BA%9A%E5%8E%86%E5%B1%B1%E5%BE%B7%E7%BD%97%E7%BB%B4%E5%A5%87%C2%B7%E6%9F%B3%E6%AF%94%E6%AD%87%E5%A4%AB">柳比歇夫</a> 的时间统计法，记录自己每天的时间清单，用的是 IOS 上的 APP：「时间块」</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171230151461868391216.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>    <p>通过软件的统计功能，比较直观了反映了我的时间都去哪儿了。<br>自我感觉比往年用在学习上的时间要多很多，但是预料不及的是我在玩（游戏、动漫、出外游玩等花费的时间）上的投入时间和蹉跎的时间（如漫无目的地上网浏览、做无任何意义事情的时间）之和，竟然狂甩学习时间几条街，说明自己对于时间的利用还是太低太低。<br>最让我震惊的是用于交通(坐车，步行，等车等)的时间，居然达到了近 <code>850</code> 小时！一年十二个月,其中的一个月全是在车上度过！<strong>慎思极恐！</strong><br>柳比歇夫在每天每个周末每个月每个季度每年他都会汇总统计自己的时间支出，核算有效时间并加以总结，这一点我确实是没做到他这么极致，也是自己需要进行改进的地方，比如以后每个月总结一次时间的消费，看看自己有没有利用好这个月。</p></li><li><p><strong>开始早起</strong><br>在记录了半年的时间消费后，看了统计后，深觉时间真的不够用，于是从六月份开始早起，工作日基本每天 5 点起床。<br>不足的地方就是早起后，到7点洗漱吃饭去上班之前的这段时间，时间的利用不是很有效率，还有就是周末有时候变得很懒，经常快拖到 8 点多才起床，明年努力给自己找事情，提高时间的利用效率，周末督促自己早起。</p></li><li><p><strong>开始认真对待博客</strong><br>其实从 2016 年，便开始用 Hexo 搭建了博客，并开始写博客，但是当时只是好奇心的驱使，随便写写觉得有趣，所以写的很水，但是从 2017 年开始，就约束自己要认真点写，对自己写博客付出的时间进行负责。<br>我认为对于做技术的人而言，写不写博客是两种人，写的博客好不好也是两种人。<br>不足之处就是总的博客文章不够多，大多也没有什么深度；明年多多写博客，提升技术能力，期望可以写一些比较有深度的博客。</p></li><li><p><strong>自学新的技术</strong><br>技术的更迭速度很快，为了不被淘汰，只有通过不断学习，来提高技术能力。<br>目前所在的公司是一家以业务驱动的公司，所以平时写的业务代码比较多一些，对于新的技术接触的比较少，但是领导比较鼓励我们学习新的技术用于工作中。<br>公司的技术一成不变往往不是公司的问题，而是我们做技术的问题，就算公司想用新的技术，但是没有人会，这种技术也就不会被引入，因为使用成本太高；但是若这项技术，我们都会，而且又很有利于公司，相信一定会得到公司推行。为了保持进步，自学新兴的技术，对于自学新技术，垂直教育网站(编程) <a href="http://www.imooc.com/">慕课网</a> 很不错！学习了新的技术，在恰当的时机合适的项目进行引入，也是对自己学习成果的一种实践！</p></li><li><p><strong>买 Kindle 看书</strong><br>年初买了 Kindle 用于看书，强制自己看书；看书的过程中，越发觉得自己的阅读能力实在是太差了，很多地方都读不懂，这也坚定了我要坚持看书的想法。<br>今年看了 25 本左右的书，但是精读的太少，很多都是囫囵吞枣，纠结于读书的数量，而不是质量，来年尽量提高阅读的质量。</p></li></ul><h2 id="2017-做的不好的地方"><a href="#2017-做的不好的地方" class="headerlink" title="2017 做的不好的地方"></a>2017 做的不好的地方</h2><ul><li><p>除了上面提出的问题，身上还有一堆等着我去克服的缺点。</p></li><li><p>下半年的时候，搞了个服务器，给电脑装上了 SS 的客户端，得以随时可以访问被墙的 Google 。于是在便利查找问题的环境下，出现了要做什么工作的时候，不去思考，而是先去进行 Google 搜索一番的情况，太过依赖 Google ，随时番羽墙对于我也不是一件好事。来年希望可以养成万事先独立思考的习惯，不要成为一名只会 Google 代码的码农。</p></li><li><p>忘了从几月份开始，王者荣耀火了，我也不出意外地陷了进去，大概玩了两三个月，之后意识到自己的做法不对，方才卸载了游戏。多亏了定力的增长，否则还可能沉迷其中不可自拔，以后就尽量不玩游戏了吧，毕竟还要那么多的知识等待着我去学呢！</p></li><li><p>每年都会看到程序员猝死的新闻，这个行业有的公司高强度无休止的加班，加上精神压力，以及不经常锻炼身体的习惯，导致悲剧的发生。在唏嘘的同时，却没有想到自己也没有锻炼身体的习惯，幸运的是公司不加班。也曾经坚持跑步锻炼了一段时间，但是没有坚持下来，还是要制定一个锻炼的计划。</p></li></ul><h2 id="2018-我想要做的事"><a href="#2018-我想要做的事" class="headerlink" title="2018 我想要做的事"></a>2018 我想要做的事</h2><ul><li>锻炼身体，身体好是一切活动的前提</li><li>多写博客，多精读书，多写读书笔记</li><li>独立思考，多总结，争取做一个精进的人</li><li>重新学习英语，英语能力太差了，多学点英语</li><li><del>拾起日语的学习</del></li></ul><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>资源越多越浪费，资源越少越珍贵，时间亦是，周末时间很多但是利用效率却低的可怕，每天早起一个多小时，能完成周末好几个小时能完成的事情。每每浪费了光阴，在余下不多的时间里想要开始认真时，却总是在时间不够用的抱怨声里，草草结束了本次周末，所以，时间都去哪儿呢？</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;一年时间倏然而逝，今日已是年终岁尾矣！  &lt;/p&gt;
&lt;p&gt;总是感觉今年过得太快了，很多次下班的时候，同事说：“明天周五了”，而我的反应就是：“诶？又要放假了吗？我怎么感觉前天才上班的啊”。&lt;br&gt;以前还在上学的时候，总是感叹，这一天天为何如此漫长呢！随着年龄的增长，仿佛时间的流速也同时加快了一般，每天总是觉得是在和时间赛跑，让我有些焦虑。&lt;/p&gt;
&lt;p&gt;今年过的让我感觉很快，但是觉得比以前充实，因为做到的事情比以前多很多。&lt;/p&gt;
    
    </summary>
    
    
      <category term="年终总结" scheme="http://nullpointer.pw/tags/%E5%B9%B4%E7%BB%88%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>mac编译安装Nginx</title>
    <link href="http://nullpointer.pw/mac%E7%BC%96%E8%AF%91%E5%AE%89%E8%A3%85nginx.html"/>
    <id>http://nullpointer.pw/mac编译安装nginx.html</id>
    <published>2017-12-06T22:50:18.000Z</published>
    <updated>2020-04-01T09:41:54.189Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>虽然后简单的方式安装Nginx，但是习惯了在linux 上的操作，为了保持一致，因此也使用编译安装的方法进行安装Nginx。</p><a id="more"></a><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li>nginx: <a href="http://nginx.org/download/nginx-1.12.2.tar.gz">http://nginx.org/download/nginx-1.12.2.tar.gz</a></li><li>zlib: <a href="http://zlib.net/zlib-1.2.11.tar.gz">http://zlib.net/zlib-1.2.11.tar.gz</a></li><li>pcre: <a href="https://ftp.pcre.org/pub/pcre/pcre-8.38.tar.gz">https://ftp.pcre.org/pub/pcre/pcre-8.38.tar.gz</a></li><li>openssl: <a href="https://www.openssl.org/source/openssl-1.1.0g.tar.gz">https://www.openssl.org/source/openssl-1.1.0g.tar.gz</a></li></ul><p>这些都是 Nginx 编译需要的依赖，下载后分别解压， 注意解压的文件要在同一个目录下面</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.12.2.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf zlib-1.2.11.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf pcre-8.38.tar.gz</span><br><span class="line"></span><br><span class="line">tar -zxvf openssl-1.1.0g.tar.gz</span><br></pre></td></tr></table></figure><p>进入nginx目录后执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx --with-zlib=../zlib-1.2.11 --with-pcre=../pcre-8.38 --with-openssl=../openssl-1.1.0g</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 依次执行以下命令</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>以上执行完毕后， nginx 就被安装到 <code>/usr/local/nginx</code> 目录下</p><h2 id="Nginx的启停"><a href="#Nginx的启停" class="headerlink" title="Nginx的启停"></a>Nginx的启停</h2><p>在 mac 上随便修改点东西，就提示没有权限也是醉了，只好每个命令前面都加上 <strong>sudo</strong> 了</p><p>启动<br><code>sudo /usr/local/nginx/sbin/nginx</code></p><p>关闭<br><code>sudo /usr/local/nginx/sbin/nginx -s stop</code></p><p>重启<br><code>sudo /usr/local/nginx/sbin/nginx -s reload</code></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/tulies/article/details/77611409">http://blog.csdn.net/tulies/article/details/77611409</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;虽然后简单的方式安装Nginx，但是习惯了在linux 上的操作，为了保持一致，因此也使用编译安装的方法进行安装Nginx。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx安装" scheme="http://nullpointer.pw/tags/nginx%E5%AE%89%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>利用nginx解决跨域问题</title>
    <link href="http://nullpointer.pw/%E5%88%A9%E7%94%A8nginx%E8%A7%A3%E5%86%B3%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98.html"/>
    <id>http://nullpointer.pw/利用nginx解决跨域问题.html</id>
    <published>2017-12-06T22:31:02.000Z</published>
    <updated>2020-01-22T14:33:56.910Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到了跨域问题，结合之前【微信支付开发本地接收异步通知回调】的经验，利用 Nginx 实现了跨域。</p><p>公司之前为了解决跨域问题，用的是 iFrame，反正对于只做后端的我而言，觉得很复杂，但是现在利用 nginx 如此简单就实现了跨域，感觉还挺有成就感，哈哈！</p><a id="more"></a><h2 id="为什么会出现跨域问题？"><a href="#为什么会出现跨域问题？" class="headerlink" title="为什么会出现跨域问题？"></a>为什么会出现跨域问题？</h2><p>前人已经总结得很好了，就借鉴一下吧！</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171206151256895451444.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><blockquote><p>图片来源地址： <a href="http://www.cnblogs.com/gabrielchen/p/5066120.html">http://www.cnblogs.com/gabrielchen/p/5066120.html</a></p></blockquote><p>我们在开发项目中遇到的跨域问题具体是这样的，公司的域名若是 <strong>www.domain.com</strong>，那么如果是发送的 Ajax 请求就不通过这个域名走了，而是通过 <strong>a.domain.com</strong>，于是便出现了跨域问题。</p><p>比如在 <strong>www.domain.com</strong> 首页中需要通过 Ajax 获取用户登录信息。</p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="下载演示项目"><a href="#下载演示项目" class="headerlink" title="下载演示项目"></a>下载演示项目</h3><p>为了演示这个跨域问题，我创建了一个 SpringBoot 项目，便于演示，如果不会 SpringBoot 也没有关系，因为重点在于 Nginx 配置上面。</p><p><strong><a href="https://pan.baidu.com/s/1pLifFBl">【点我下载】</a>  提取密码: 8e68</strong></p><h3 id="启动演示项目"><a href="#启动演示项目" class="headerlink" title="启动演示项目"></a>启动演示项目</h3><p>因为是SpringBoot 项目，因此可以通过 <strong>java -jar</strong> 的方式直接启动，为了演示跨域，因此需要启动两个项目，这里我们用两个端口来分别启动项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># A 项目，端口设置为8080</span></span></span><br><span class="line">java -jar -Dserver.port=8080 demo.jar</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment"># B 项目，端口设置为8090</span></span></span><br><span class="line">java -jar -Dserver.port=8090 demo.jar</span><br></pre></td></tr></table></figure><h3 id="配置本地-Host"><a href="#配置本地-Host" class="headerlink" title="配置本地 Host"></a>配置本地 Host</h3><p>为了演示还需要两个域名，不用真正的域名，修改本地的 Host 即可，将两个域名的 Host 都执行本地。可以使用 <a href="https://oldj.github.io/SwitchHosts/">SwitchHosts</a> 来方便切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1 www.domain.com</span><br><span class="line">127.0.0.1 a.domain.com</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171206151256982730568.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h3><p>编译安装 Nginx后， 修改 nginx.conf 配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">user  nobody;</span></span><br><span class="line">worker_processes  1;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  notice;</span></span><br><span class="line"><span class="meta">#</span><span class="bash">error_log  logs/error.log  info;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">pid        logs/nginx.pid;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">events &#123;</span><br><span class="line">    worker_connections  1024;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http &#123;</span><br><span class="line">    include       mime.types;</span><br><span class="line">    default_type  application/octet-stream;</span><br><span class="line">    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '</span><br><span class="line">    #                  '$status $body_bytes_sent "$http_referer" '</span><br><span class="line">    #                  '"$http_user_agent" "$http_x_forwarded_for"';</span><br><span class="line">    #access_log  logs/access.log  main;</span><br><span class="line">    sendfile        on;</span><br><span class="line">    keepalive_timeout  65;</span><br><span class="line">    #gzip  on;</span><br><span class="line"></span><br><span class="line">    upstream webServer &#123;</span><br><span class="line">      server 127.0.0.1:8080;</span><br><span class="line">    &#125;</span><br><span class="line">    upstream ajaxServer &#123;</span><br><span class="line">      server 127.0.0.1:8090;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  a.domain.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://ajaxServer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">          proxy_pass http://webServer;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里来详细解释一下这里的配置，<strong>a.domain.com</strong> 代理到 ajaxServer，即端口设置为 8090 的 B 项目；</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  a.domain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">          proxy_pass http://ajaxServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>再看看 <strong>www.domain.com</strong> 的配置，反向代理到 webServer , 即端口设置为 8080 的 A 项目。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://webServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>访问项目地址 <strong><a href="http://www.domain.com/page">http://www.domain.com/page</a></strong>， 进入以下页面：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171206151257156452621.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>当输入框不输入或者输入的是当前域名 <strong><a href="http://www.domain.com">http://www.domain.com</a></strong> 时，可以正常提交，不会遇到跨域问题。</p><p>当输入 <strong><a href="http://a.domain.com">http://a.domain.com</a></strong> 时，点击按钮进行提交，会出现跨域问题。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171207151259706233672.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="修改-Nginx-配置文件"><a href="#修改-Nginx-配置文件" class="headerlink" title="修改 Nginx 配置文件"></a>修改 Nginx 配置文件</h2><p>修改 <strong>www.domain.com</strong> 的配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.domain.com;</span><br><span class="line"></span><br><span class="line">    location /proxy/ &#123;</span><br><span class="line">        proxy_set_header Host a.domain.com;</span><br><span class="line">        proxy_pass http://ajaxServer/;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">      proxy_pass http://webServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其中这里这处配置是这篇文章的关键点。意思是 <strong><a href="http://www.domain.com/proxy/">http://www.domain.com/proxy/</a></strong> 开头的请求将会被反向代理到 <strong>B 项目</strong> 即 <strong><a href="http://a.domain.com">http://a.domain.com</a></strong> 域名，<strong>proxy_set_header Host</strong> 这一行是必须的。需要注意的是，这两行的域名需要保持一致，<strong>且第二行后面必须要有一个 /</strong>，至于原因，可以参考这篇文章 <a href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E5%9B%9E%E8%B0%83%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html#必知的-Nginx-语法">proxy_pass后的url加不加/的区别</a><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_set_header Host a.domain.com;</span><br><span class="line">    proxy_pass http://ajaxServer/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>修改之后保存配置文件，重启 Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./nginx -s reload</span><br></pre></td></tr></table></figure></p><h2 id="再次测试"><a href="#再次测试" class="headerlink" title="再次测试"></a>再次测试</h2><p>修改提交 URL 为 <strong><a href="http://www.domain.com/proxy">http://www.domain.com/proxy</a></strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171207151259808430209.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击按钮进行提交，发现此时没有出现跨域问题。虽然提交的URL 域名是 <strong><a href="http://www.domain.com">http://www.domain.com</a></strong>，而请求经过 Nginx 的反向代理之后，实际上提交到了 B 项目，即 <strong><a href="http://a.domain.com">http://a.domain.com</a></strong>， 也可以看到 B 项目打印了输出语句 userId: 12，由此便解决了跨域问题。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p>文章涉及的jar文件我打成一个压缩包，可以自己下载尝试一下。</p><p><strong><a href="https://pan.baidu.com/s/1pLifFBl">【点我下载】</a>  提取密码: 8e68</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到了跨域问题，结合之前【微信支付开发本地接收异步通知回调】的经验，利用 Nginx 实现了跨域。&lt;/p&gt;
&lt;p&gt;公司之前为了解决跨域问题，用的是 iFrame，反正对于只做后端的我而言，觉得很复杂，但是现在利用 nginx 如此简单就实现了跨域，感觉还挺有成就感，哈哈！&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="跨域问题" scheme="http://nullpointer.pw/tags/%E8%B7%A8%E5%9F%9F%E9%97%AE%E9%A2%98/"/>
    
      <category term="反向代理" scheme="http://nullpointer.pw/tags/%E5%8F%8D%E5%90%91%E4%BB%A3%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>java推广系统设计</title>
    <link href="http://nullpointer.pw/java%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F%E8%AE%BE%E8%AE%A1.html"/>
    <id>http://nullpointer.pw/java推广系统设计.html</id>
    <published>2017-12-03T08:06:26.000Z</published>
    <updated>2020-01-22T14:40:35.314Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>公司新站由于运营需求，需要开发一套推广系统，用于网站用户引流，衍生出的推广套路目前便已经有四种，为了降低运营上手推广系统的难度，因此推广系统务必要便于使用，所以每种推广方式的配置需要保持足够明了简单。</p><a id="more"></a><h2 id="聊聊推广"><a href="#聊聊推广" class="headerlink" title="聊聊推广"></a>聊聊推广</h2><p>常见的推广套路就是针对一个推广员生成推广链接，推广员然后其他用户通过推广链接点击进来注册，但是不可能推广的页面是注册页面，所以需要先记录下用户的来源。注册成功的同时，绑定用户与推广员的关系，便于日后通过用户的充值消费统计推广员的推广费用，以下为推广的简单流程图。</p><p><img src="http://img12345.5-project.com/20171203151228872026958.png" alt=""></p><h2 id="推广系统实现"><a href="#推广系统实现" class="headerlink" title="推广系统实现"></a>推广系统实现</h2><h3 id="推广链接的生成"><a href="#推广链接的生成" class="headerlink" title="推广链接的生成"></a>推广链接的生成</h3><p>整个推广流程最主要的地方就是推广链接的生成与使用，为了方便推广链接的管理，需要将生成的推广链接进行保存。首先进行推广链接表的设计。最后提供给推广员的推广链接格式如：<code>http://m.domain.com/cp?code=xx</code>，其中 code 的值为推广链接的 ID。</p><table><thead><tr><th>字段名称</th><th style="text-align:center">字段类型</th><th>字段描述</th></tr></thead><tbody><tr><td>id</td><td style="text-align:center">int</td><td>推广链接自增主键</td></tr><tr><td>title</td><td style="text-align:center">varcahr</td><td>推广标题</td></tr><tr><td>partner_id</td><td style="text-align:center">int</td><td>推广员ID</td></tr><tr><td>params</td><td style="text-align:center">text</td><td>推广参数</td></tr><tr><td>type</td><td style="text-align:center">tinyint</td><td>推广类型</td></tr><tr><td>url_type</td><td style="text-align:center">tinyint</td><td>URL类型</td></tr><tr><td>create_time</td><td style="text-align:center">timestamp</td><td>创建时间</td></tr><tr><td>update_time</td><td style="text-align:center">timestamp</td><td>更新时间</td></tr><tr><td>status</td><td style="text-align:center">tinyint</td><td>启用状态</td></tr></tbody></table><p>字段解读：  </p><ol><li><p>我这里的 id 直接设置为了自增主键的值，当然为了安全点，也可以设置为其他的值，比如 UUID；  </p></li><li><p>title 对于同一个推广员，可能会生成多条推广链接，用于区别。</p></li><li><p>partner_id 这个就不必多说，表明推广链接属于哪一个推广员</p></li><li><p>params 注意这个参数类型为 <strong>text</strong>， 因为为了方便扩展业务参数，因此此字段存储的是一段 JSON，若使用 varchar 长度会不够用。业务参数在我司，可以是：赠送 VIP 天数，赠送阅读券数量，推广费用等。这个字段可以自由发挥，在绑定用户的时候获取该字段，解析成 JSON 对象，读取对应的业务参数，进行相对应的设置。</p></li><li><p>因为运营同学的脑洞一般都很大，因此推广方式会有很多种，也是为了日后分析推广效果，因此加上 type 字段用于区分推广类型，推广类型有比如： CPS推广、微信公众推广等；</p></li><li><p>url_type 用于区分需要推广的页面是相对路径还是绝对路径。</p></li><li><p>status 用于标记此推广链接是否有效，比如终止推广合作，就可以设置为关闭，不再将用户绑定到此链接。</p></li></ol><p>后台推广链接生成页面参考：  </p><p><img src="http://img12345.5-project.com/20171203151228736175519.png" alt=""></p><h3 id="推广链接的跳转"><a href="#推广链接的跳转" class="headerlink" title="推广链接的跳转"></a>推广链接的跳转</h3><p>首先再看看推广的流程</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/20171203151228877937882.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>首先用户通过点击推广链接，进入了推广的页面，我司就是小说的某一免费章节的阅读页面，之后到收费章节的时候，就会提示用户进行登录。<br>注册的用户，如何知道是从哪一个链接过来的呢？这就需要在用户注册之前就将推广链接的标记进行存储，最好的方式就是写入 Cookie。之前公司项目写 Cookie 是在前端进行，但是运行之后，发现不太可靠，因此我们将写 Cookie 的操作放在后端进行。</p><p>推广链接地址是 <code>http://m.domain.com/cp?code=xx</code>，访问如下接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 用于推广链接的统一跳转</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@RequestMapping</span> (value = <span class="string">"/cp"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">companionRedirect</span><span class="params">(String code,</span></span></span><br><span class="line"><span class="function"><span class="params">        HttpServletRequest request, Model m, HttpServletResponse response)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> id = Integer.parseInt(code);</span><br><span class="line">        <span class="comment">// 查询出推广链接记录</span></span><br><span class="line">        CompanionLink link = companionService.getCompanionLink(id);</span><br><span class="line">        <span class="keyword">if</span> (link != <span class="keyword">null</span> &amp;&amp; link.getStatus() != Constants.STATUS_DELETE) &#123;</span><br><span class="line">            JSONObject obj = JSONObject.parseObject(link.getParams());</span><br><span class="line">            <span class="comment">// 获取推广页面的地址</span></span><br><span class="line">            String url = obj.getString(<span class="string">"url"</span>);</span><br><span class="line">            <span class="comment">// 将 code 值即推广链接的 id 写入Cookie 中， EXP为有效期 3 天</span></span><br><span class="line">            CookieUtil.setCookie(request, response, Constants.COMPANION_COOKIE_NAME, code, EXP);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 跳转到推广页面</span></span><br><span class="line">            <span class="keyword">if</span> (link.getUrlType() == Constants.ABS) &#123;</span><br><span class="line">                <span class="comment">// 绝对路径直接跳转</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"redirect:"</span> + url;</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 相对路径拼接域名后跳转</span></span><br><span class="line">                <span class="keyword">return</span> <span class="string">"redirect:"</span> + Constants.MOBILE_SERVER_DOMAIN + url;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (NumberFormatException e) &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 出现异常，跳转到首页</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">"redirect:"</span> + Constants.MOBILE_SERVER_DOMAIN;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>写这篇文章的时候，发现之前设计推广链接的时候有所疏漏，有的推广方式是相对路径，而有的是绝对路径。<br>而我在代码中是通过 String 的 Contains方法是否包含域名来判断是相对的还是绝对的路径，其实没有必要，完全可以添加一个推广链接的 url 的路径类型。判断类型即可，如果是绝对路径直接跳转，否则拼接域名后跳转。</p><h3 id="推广关系的绑定"><a href="#推广关系的绑定" class="headerlink" title="推广关系的绑定"></a>推广关系的绑定</h3><p>用户浏览器的 Cookie 中已经保存好了推广链接的 code 值，绑定关系就好办了，可以在用户注册的时候，读取浏览器的 Cookie，获取这个 Cookie，得到推广链接的 id, 将用户的 id 与推广的 partner_id 进行绑定，保存到绑定关系的表中即可，比如我司的赠送操作也一在绑定后执行。</p><p>至于绑定关系的表设计，主要将 partner_id 与 user_id 作为联合主键保存，其他字段如绑定时间就不用多说了吧。</p><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>如果你看完觉得有什么疑问，可以留言评论，有需要改进的地方也请提出，共同进步！</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;公司新站由于运营需求，需要开发一套推广系统，用于网站用户引流，衍生出的推广套路目前便已经有四种，为了降低运营上手推广系统的难度，因此推广系统务必要便于使用，所以每种推广方式的配置需要保持足够明了简单。&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="http://nullpointer.pw/categories/Java/"/>
    
    
      <category term="推广系统" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF%E7%B3%BB%E7%BB%9F/"/>
    
      <category term="推广" scheme="http://nullpointer.pw/tags/%E6%8E%A8%E5%B9%BF/"/>
    
      <category term="链接推广" scheme="http://nullpointer.pw/tags/%E9%93%BE%E6%8E%A5%E6%8E%A8%E5%B9%BF/"/>
    
  </entry>
  
  <entry>
    <title>Maven 私服上传jar包</title>
    <link href="http://nullpointer.pw/Maven%20%E7%A7%81%E6%9C%8D%E4%B8%8A%E4%BC%A0jar%E5%8C%85.html"/>
    <id>http://nullpointer.pw/Maven 私服上传jar包.html</id>
    <published>2017-11-30T13:09:28.000Z</published>
    <updated>2020-01-22T14:41:12.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>前段时间，公司开了新站，主要由我来负责新站的搭建工作，基础的系统比如登录系统，支付系统的搭建。  </p><p>今天在11月末尾补上这一篇文章，不然放出去的话做不到就不好了（一个月至少两篇博客）</p><a id="more"></a><p>在接入支付宝支付的时候，遇到了一些问题，在此记录一下。  </p><p>我们公司的之前项目接入的是支付宝 mapi 支付，这是比较早的支付接口，前一阵子，该接口的授权也到期了，我也负责后续接口的升级。</p><p>接口升级后，支付宝对其 SDK 也进行了升级，按照网站文档编写代码发现有些方法不存在，才知道是由于 项目中 SDK 的版本过低导致的。既然知道了问题，就要解决问题，于是在官网下载最新版的 SDK。</p><p>我们公司的项目全部基于 Maven 进行构建，但是官网的 SDK 只是 JAR 包，在中央仓库是没有的，因此使用的话需要上传到公司的 Maven 私服上。</p><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>需要上传的 Jar 包，我这里是支付宝的 SDK 的 Jar 包</li><li>私服环境： <a href="http://www.jfrogchina.com/open-source/">Artifactory</a></li></ul><p>我们公司的 maven 私服就是这货啦  </p><p><img src="http://img12345.5-project.com/20171130151204452196528.png" alt=""></p><h2 id="上传-Jar-包到-Maven"><a href="#上传-Jar-包到-Maven" class="headerlink" title="上传 Jar 包到 Maven"></a>上传 Jar 包到 Maven</h2><h3 id="选择上传-Jar-包"><a href="#选择上传-Jar-包" class="headerlink" title="选择上传 Jar 包"></a>选择上传 Jar 包</h3><p>登录 Artifactory 后，选择 Deploy，选择要上传的 Jar 包，我这里选择上传支付宝的 SDK 的 Jar 包。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20171102/113134666.png?imageslim" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="设置上传-Jar-包信息"><a href="#设置上传-Jar-包信息" class="headerlink" title="设置上传 Jar 包信息"></a>设置上传 Jar 包信息</h3><p>在这里选择要上传的仓库，以及设置 “GAV” 参数  </p><p><img src="http://img12345.5-project.com/blog/20171102/113157073.png?imageslim" alt=""></p><p>由于支付宝的 Jar 包名称太长了，所以我这里精简了不必要的信息。</p><p><img src="http://img12345.5-project.com/blog/20171102/113402039.png?imageslim" alt=""></p><p>设置完之后，点击完成即可。</p><h3 id="查找上传-Jar-的-Maven-坐标"><a href="#查找上传-Jar-的-Maven-坐标" class="headerlink" title="查找上传 Jar 的 Maven 坐标"></a>查找上传 Jar 的 Maven 坐标</h3><p>找到刚才保存的库，找到上传的 Jar 包  </p><p><img src="http://img12345.5-project.com/blog/20171102/113450326.png?imageslim" alt=""></p><p>点击 对应的 pom 文件，查看 Maven 坐标   </p><p><img src="http://img12345.5-project.com/blog/20171102/113512171.png?imageslim" alt=""></p><p>将此坐标写入 pom.xml 中即可，需要先将私服的地址写到 pom.xml 文件中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">repositories</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">repository</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">id</span>&gt;</span>repos<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://192.168.1.222:8088/artifactory/repos<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">repository</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">repositories</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="上传源码-Jar-包到私服仓库"><a href="#上传源码-Jar-包到私服仓库" class="headerlink" title="上传源码 Jar 包到私服仓库"></a>上传源码 Jar 包到私服仓库</h2><p>想要在开发时看可以查看源码的时候，需要将对应的源码 Jar 包一起上传到私服中去，与前面步骤相同，此时选择对应的源码的 Jar 包。</p><p><img src="http://img12345.5-project.com/blog/20171102/114351967.png?imageslim" alt=""></p><p>需要注意这里的 目标仓库与 GAV 参数保持与上面上传对应的 Jar 包保持一致。唯一不同的地方是 <strong>Classifier</strong> 为 <strong>sources</strong>。</p><p><img src="http://img12345.5-project.com/blog/20171102/133357044.png?imageslim" alt=""></p><p>上传成功后如图，源码包与工程包在同一级目录中。此时在项目中可以刷新 pom.xml 文件后，对应的源码就会一同下载下载下来了，可以愉快的看源码了。</p><p><img src="http://img12345.5-project.com/20171130151204689848191.png" alt=""></p><p>End.</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;前段时间，公司开了新站，主要由我来负责新站的搭建工作，基础的系统比如登录系统，支付系统的搭建。  &lt;/p&gt;
&lt;p&gt;今天在11月末尾补上这一篇文章，不然放出去的话做不到就不好了（一个月至少两篇博客）&lt;/p&gt;
    
    </summary>
    
      <category term="Maven" scheme="http://nullpointer.pw/categories/Maven/"/>
    
    
      <category term="Maven私服" scheme="http://nullpointer.pw/tags/Maven%E7%A7%81%E6%9C%8D/"/>
    
      <category term="jar包上传" scheme="http://nullpointer.pw/tags/jar%E5%8C%85%E4%B8%8A%E4%BC%A0/"/>
    
  </entry>
  
  <entry>
    <title>微信支付开发本地接收异步通知回调【实战】</title>
    <link href="http://nullpointer.pw/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98%E5%BC%80%E5%8F%91%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5%E5%9B%9E%E8%B0%83%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/微信支付开发本地接收异步通知回调【实战】.html</id>
    <published>2017-11-08T14:18:34.000Z</published>
    <updated>2020-01-22T14:35:11.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近在调试微信相关的接口，但是由于微信官方出于安全的考虑，对于调用接口的域名有限制。微信授权与微信支付统一下单接口在本地可以通过更改 host 的方式来调试，微信服务器也能跳转回来，但是微信支付异步通知这里；微信官方强制让设置支付授权目录，且是通过 ICP 备案的域名，因此不采取特殊手段，<strong>本地是无法接收到微信的异步通知回调请求的，只能部署到线上环境测试</strong>。  </p><a id="more"></a><h2 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h2><p>为了解决这个问题，折腾了好几天，才搞出来了，究其根本原因，还是对于 <strong>Nginx</strong> 不太熟悉。所以在此记录一下。</p><h3 id="内网转发"><a href="#内网转发" class="headerlink" title="内网转发"></a>内网转发</h3><p>如果想本地进行调试，并且想让微信服务器请求回调回来，则本地必须要有一个外网域名，这里我们是用 <a href="https://www.ngrok.cc">Ngrok内网转发</a> 来实现；Ngrok 的配置就是将本地项目的端口映射到分配的外网域名，具体配置参考官网教程文档，此处不再赘述。</p><p>我的配置是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://vcmq.free.ngrok.cc -&gt; 127.0.0.1:8080</span><br></pre></td></tr></table></figure></p><h3 id="配置测试支付目录"><a href="#配置测试支付目录" class="headerlink" title="配置测试支付目录"></a>配置测试支付目录</h3><p>前面提到了，微信支付异步通知会对支付域名<strong>目录</strong>有要求，因此，支付时的域名必须要在设置的支付域名目录下。</p><p>首先需要在 <a href="https://pay.weixin.qq.com">微信商户平台</a> 中配置 商户秘钥，支付授权目录。  </p><p><img src="http://img12345.5-project.com/blog/20171108/215523458.png" alt="mark"></p><p>这里支付授权目录配置的是以后线上的支付授权目录<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pay.domain.com/wechat/public/</span><br></pre></td></tr></table></figure></p><p>然后再加一条本地测试支付的临时授权目录，这个目录最好在本地测试完成后，进行删除。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://pay.domain.com/testpay/</span><br></pre></td></tr></table></figure></p><h2 id="必知的-Nginx-语法"><a href="#必知的-Nginx-语法" class="headerlink" title="必知的 Nginx 语法"></a>必知的 Nginx 语法</h2><h3 id="proxy-pass-后的-url-加不加-的区别"><a href="#proxy-pass-后的-url-加不加-的区别" class="headerlink" title="proxy_pass 后的 url 加不加 / 的区别"></a>proxy_pass 后的 url 加不加 / 的区别</h3><p>这里列举 nginx 的 proxy_pass 语法，是为了下一步针对 nginx 的配置进行修改。  </p><p>这里访问 <code>http://127.0.0.1/proxy/test.html</code> 测试 <strong>proxy_pass</strong> 后面的 url 加与不加 / 的区别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http://192.168.0.100/;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 location 会代理到 <strong><a href="http://192.168.0.100/test.html">http://192.168.0.100/test.html</a></strong> 即相当于是绝对根路径，则 Nginx 不会把 location 中的路径部分代理走。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 127.0.0.1;</span><br><span class="line"></span><br><span class="line">    location  /proxy/ &#123;</span><br><span class="line">          proxy_pass http://192.168.0.100;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上 location 会代理到 <strong><a href="http://192.168.0.100/proxy/test.html">http://192.168.0.100/proxy/test.html</a></strong> 即相当于相对路径。</p><hr><h2 id="代理支付域名到第三方域名"><a href="#代理支付域名到第三方域名" class="headerlink" title="代理支付域名到第三方域名"></a>代理支付域名到第三方域名</h2><p>知道上一步 proxy_pass 后 / 的作用后，就开始来配置支付域名指向的服务器上的 nginx 的配置文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name pay.domain.com;</span><br><span class="line"></span><br><span class="line">    location /testpay/ &#123;</span><br><span class="line">        proxy_set_header Host vcmq.free.ngrok.cc;</span><br><span class="line">        proxy_pass http://vcmq.free.ngrok.cc/wide/;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://payServer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配置中的 <em>wide</em> 是我项目的名称；<br>注意：这里的 <strong>proxy_set_header Host</strong> 必须配置，否则进入 location 块后，会提示 <code>tunnel pay.domain.com not found</code>。</p><p>当访问 <strong>pay.domain.com/testpay/create</strong> 微信统一下单接口时， 会代理到 <strong><a href="http://vcmq.free.ngrok.cc/wide/create">http://vcmq.free.ngrok.cc/wide/create</a></strong>；</p><p>需要注意的是，在统一下单接口，设置 <strong>notify_url</strong> 的值要为配置的支付授权目录，比如我的 <strong><a href="http://pay.domain.com/testpay/notify">http://pay.domain.com/testpay/notify</a></strong>，这个异步通知回调 URL 限定是 POST 请求，可以在异步回调方法打断点，然后通过 postman 工具发送 post 请求到 <strong><a href="http://pay.domain.com/testpay/notify">http://pay.domain.com/testpay/notify</a></strong>，看是否可以正常进入断点，如果正常进入断点，恭喜你配置好了 Nginx 回调这一块。</p><blockquote><p>注意： 统一下单接口参数中提交的参数 notify_url ，如果链接无法访问，商户将无法接收到微信通知。<br>通知 url 必须为直接可访问的 url ，不能携带参数。示例：notify_url：“<a href="https://pay.weixin.qq.com/wxpay/pay.action”">https://pay.weixin.qq.com/wxpay/pay.action”</a></p></blockquote><p>另外要注意，如果支付目录中配置的是 https 的，那么 notify_url 也一定要保持一致是 https 的。</p><p>统一下单并完成支付完成后，微信服务器会请求统一下单接口中的 <strong>notify_url</strong>，经过服务器 nginx 进行代理后，会代理到 本地的内网转发域名异步通知回调接口 <strong><a href="http://vcmq.free.ngrok.cc/wide/notify">http://vcmq.free.ngrok.cc/wide/notify</a></strong>， 从而达到了本地接收微信支付异步通知回调请求的目的。  </p><p>如果地址不在支付授权目录下，会提示当前 Url 未注册。因为是代理过去，因此地址栏的地址不会改变，这也是不能简单使用 nginx 的 rewrite 的原因。</p><p>如有疑问，可以联系我。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="http://www.cnop.net/html/web/nginx/2017/0330/4953.html">nginx proxy_pass后的url加不加/的区别</a></p></li><li><p><a href="http://blog.csdn.net/faye0412/article/details/75200607">跳转第三方域名</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近在调试微信相关的接口，但是由于微信官方出于安全的考虑，对于调用接口的域名有限制。微信授权与微信支付统一下单接口在本地可以通过更改 host 的方式来调试，微信服务器也能跳转回来，但是微信支付异步通知这里；微信官方强制让设置支付授权目录，且是通过 ICP 备案的域名，因此不采取特殊手段，&lt;strong&gt;本地是无法接收到微信的异步通知回调请求的，只能部署到线上环境测试&lt;/strong&gt;。  &lt;/p&gt;
    
    </summary>
    
      <category term="微信支付" scheme="http://nullpointer.pw/categories/%E5%BE%AE%E4%BF%A1%E6%94%AF%E4%BB%98/"/>
    
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="nginx转发" scheme="http://nullpointer.pw/tags/nginx%E8%BD%AC%E5%8F%91/"/>
    
      <category term="proxy_pass" scheme="http://nullpointer.pw/tags/proxy-pass/"/>
    
      <category term="本地接收异步通知" scheme="http://nullpointer.pw/tags/%E6%9C%AC%E5%9C%B0%E6%8E%A5%E6%94%B6%E5%BC%82%E6%AD%A5%E9%80%9A%E7%9F%A5/"/>
    
  </entry>
  
  <entry>
    <title>Nginx图片防盗链【实战】</title>
    <link href="http://nullpointer.pw/Nginx%E5%9B%BE%E7%89%87%E9%98%B2%E7%9B%97%E9%93%BE%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/Nginx图片防盗链【实战】.html</id>
    <published>2017-10-29T06:28:46.000Z</published>
    <updated>2020-01-22T14:42:56.913Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>博主目前在一家原创小说网站公司工作，由于站内的作品全部是原创，于是乎不可避免地会被一些盗版网站爬取盗版，对于防盗版一直没有很好的对策，让公司很是苦恼。<br>最近去一些盗版网站上搜索我们网站作品时，发现他们所用的封面图片的来源是我们网站的地址，即所谓的盗链，这对于我们网站服务器的带宽是一种损失，因此需要采取对应的手段应对。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><p>这里我使用两台虚拟机  虚拟机的快速安装可以参考我另外一篇博文 <a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/">CentOS快速安装</a></p><ul><li>服务器 A：192.168.200.130</li><li>服务器 B：192.168.200.131</li></ul><h2 id="Nginx-安装"><a href="#Nginx-安装" class="headerlink" title="Nginx 安装"></a>Nginx 安装</h2><p>参考博文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a> 的 Nginx 环境搭建部分。</p><h2 id="Nginx-防盗链设置"><a href="#Nginx-防盗链设置" class="headerlink" title="Nginx 防盗链设置"></a>Nginx 防盗链设置</h2><h3 id="一、配置-Nginx-的防盗链"><a href="#一、配置-Nginx-的防盗链" class="headerlink" title="一、配置 Nginx 的防盗链"></a>一、配置 Nginx 的防盗链</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># 修改 nginx.conf 配置文件</span><br><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br><span class="line"></span><br><span class="line"># 添加 server 节点</span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.vcmq.com;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location ~* \.(jpg|png|gif)$ &#123;</span><br><span class="line">        root /home/resources;</span><br><span class="line">        valid_referers none server_names *.test1.com ~\.test2\.;</span><br><span class="line">        if ($invalid_referer)&#123;</span><br><span class="line">            rewrite ^/ http://img12345.5-project.com/blog/20171028/214345352.png;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">root   html;</span><br><span class="line">index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，我新增的 server 的地址是 <em>www.vcmq.com</em>。  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">location ~* \.(jpg|png|gif)$</span><br></pre></td></tr></table></figure><p>此行配置的作用是<strong>匹配以 jpg/png/gif  结尾的文件请求</strong>， 如果匹配就执行 括号内的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com ~\.test2\.;</span><br><span class="line">if ($invalid_referer)&#123;</span><br><span class="line">    rewrite ^/ http://img12345.5-project.com/blog/20171028/214345352.png;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首先看第一行，这行的作用是配置可以识别 refer，即可以正常获取资源文件的请求，<strong>在这里配置加入白名单的请求 refer 域名</strong>。<br>参数说明：    </p><ul><li><strong>none</strong> 代表请求的 refer 为空，也就是直接访问，比如在浏览器中直接访问图片 <code>www.vcmq.com/test1.png</code>，直接访问时，refer 会为空。</li><li><strong>blocked</strong> refer 来源不为空，但是里面的值被代理或者防火墙删除了</li><li><strong>server_names</strong> refer 来源包含当前的 <code>server_names</code> 即 <code>location</code> 的父节点 <code>server</code> 节点的 <code>server_name</code> 的值。</li><li><strong>字符串</strong> 定义服务器名称，比如 <code>*.test1.com</code>，配置后，来源是从 <code>test1.com</code> 就会被认为是合法的请求。</li><li><strong>正则表达式</strong> 匹配合法请求来源， 如 <code>~\.test2\.</code></li></ul><p>当请求的 <code>refer</code> 是合法的，即可以被后面任一参数所匹配， <code>$invalid_referer</code> 的值为0， 若不匹配则值为 1， 进入 <code>if</code> 的代码中。我这里的设置是，如果是不合法的请求，就统一返回一张图片，也可以直接返回 <code>403</code>。</p><h3 id="二、配置-html-文件"><a href="#二、配置-html-文件" class="headerlink" title="二、配置 html 文件"></a>二、配置 html 文件</h3><p>1.在 <code>/home</code> 目录下创建目录 <code>resources</code> ,在 <code>/home/resources</code> 目录下放入一张图片 <strong>test.png</strong>。  </p><p>2.修改 <code>nginx</code> 安装目录下 <code>html</code> 中的 <code>index.html</code> 文件。添加一个 <strong>img</strong> 标签，src 访问上一步中的图片文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.vcmq.com/test.png&quot; /&gt;</span><br></pre></td></tr></table></figure></p><p>3.启动 nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure></p><p>4.以上所有配置是对于服务器 A 的配置，以下讲解服务器 B 的配置  </p><ol><li>服务器 B 和 服务器 A一样安装好 nginx</li><li><p>修改 nginx.conf 配置文件, 添加两个 server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  www.test1.com;</span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  logs/host.access.log  main;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root   html;</span><br><span class="line">        index  index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;   </span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">    listen  80;</span><br><span class="line">    server_name www.test2.com;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root html;</span><br><span class="line">        index index.html index.htm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改服务器 B  Nginx 安装目录下 html 目录中的 index.html 文件,同样添加 img 标签。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src=&quot;http://www.vcmq.com/test.png&quot; /&gt;</span><br></pre></td></tr></table></figure></li><li><p>启动 服务器 B 的 Nginx</p></li></ol><h2 id="配置注意事项"><a href="#配置注意事项" class="headerlink" title="配置注意事项"></a>配置注意事项</h2><ol><li>配置资源的 <strong>location</strong> 需要在 <strong>location /</strong> 之前。</li><li>如果在 <strong>location</strong> 或者其父节点 <strong>server</strong> 中没有配置 <strong>root</strong> 的值， 当请求时合法的时候，会 404 找不到资源文件，因此需要在 <strong>location</strong> 或者 <strong>server</strong> 节点设置 <strong>root</strong> 的值</li><li>注意调试的时候，务必使用 <strong>Ctrl + F5</strong> 进行刷新网页，因为 nginx 会缓存图片！</li></ol><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><p>我上面配置的 <strong>server_name</strong> 配置的域名是 <strong>www.vcmq.com</strong> ，因此测试时，需要将我电脑的 host 指向虚拟机的 ip, 可以使用 <strong>SwitchHosts</strong> 来便捷切换。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 指向服务器A</span><br><span class="line">192.168.200.130 www.vcmq.com</span><br><span class="line"></span><br><span class="line"># 指向服务器B</span><br><span class="line">192.168.200.131 www.test1.com www.test2.com</span><br></pre></td></tr></table></figure><ol><li>浏览器访问 www.vcmq.com，图片正常加载  </li></ol><p><img src="http://img12345.5-project.com/blog/20171029/130449251.png" alt="">  </p><ol><li>浏览器访问 <code>www.test1.com</code> 与 <code>www.test2.com</code> 还有直接访问图片 <code>http://www.vcmq.com/test.png</code> 都正常加载   </li></ol><p><img src="http://img12345.5-project.com/blog/20171029/140651035.png" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20171029/140624686.png" alt="">  </p><p><img src="http://img12345.5-project.com/blog/20171029/140828400.png" alt="">  </p><ol><li>修改 服务器 A 的 nginx.conf 配置文件</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com ~\.test2\.;</span><br></pre></td></tr></table></figure><p>将此行修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names;</span><br></pre></td></tr></table></figure><p>即只允许当前 server_name 与 无 refer 的请求，其他请求都返回 rewrite 的图片, 然后重启 nginx</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>再次分别访问 ,<strong>注意需要使用 ctrl+F5 刷新一下缓存</strong></p><p><code>www.vcmq.com</code>、<code>www.test1.com</code>、<code>www.test2.com</code>、<code>http://www.vcmq.com/test.png</code>。</p><p>发现只有 <code>www.vcmq.com</code> 与 <code>http://www.vcmq.com/test.png</code> 正常显示，其他请求皆返回 rewrite 的图片  </p><p><img src="http://img12345.5-project.com/blog/20171029/141839955.png" alt=""></p><p>同理再次修改 nginx.conf 文件, 允许来自 test1 的访问请求</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">valid_referers none server_names *.test1.com;</span><br></pre></td></tr></table></figure><p>结果发现<br><code>www.test1.com</code>可以获取正常图片，而<code>www.test2.com</code>还是 rewrite 之后的图片</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20171029/142030191.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>至此，已经实现了基于 Nginx 的简单图片防盗链。  </p><p>实际应用中，可以设置允许来自公司下的域名与空 refer 的请求通过。  </p><p>这里允许 空 refer 的请求通过的原因是，有些合法的请求可能会没有带上 refer。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://img12345.5-project.com/%E9%85%8D%E7%BD%AE%E6%96%87%E4%BB%B6.zip">文章涉及配置文件下载</a></li></ul><h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><ul><li><a href="https://www.bbsmax.com/A/xl56LLwxzr/">https://www.bbsmax.com/A/xl56LLwxzr/</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;博主目前在一家原创小说网站公司工作，由于站内的作品全部是原创，于是乎不可避免地会被一些盗版网站爬取盗版，对于防盗版一直没有很好的对策，让公司很是苦恼。&lt;br&gt;最近去一些盗版网站上搜索我们网站作品时，发现他们所用的封面图片的来源是我们网站的地址，即所谓的盗链，这对于我们网站服务器的带宽是一种损失，因此需要采取对应的手段应对。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="图片防盗链" scheme="http://nullpointer.pw/tags/%E5%9B%BE%E7%89%87%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    
      <category term="防盗链" scheme="http://nullpointer.pw/tags/%E9%98%B2%E7%9B%97%E9%93%BE/"/>
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
  </entry>
  
  <entry>
    <title>Nginx配置资源下载目录</title>
    <link href="http://nullpointer.pw/Nginx%E9%85%8D%E7%BD%AE%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD%E7%9B%AE%E5%BD%95.html"/>
    <id>http://nullpointer.pw/Nginx配置资源下载目录.html</id>
    <published>2017-10-26T22:25:24.000Z</published>
    <updated>2020-01-22T14:42:36.406Z</updated>
    
    <content type="html"><![CDATA[<p>之前在网上找 CentOs 的镜像的时候，发现了阿里云的这个镜像源，速度蛮快的。今天也来搭建一个类似的站，使用 nginx 作为资源下载服务器。<br><a id="more"></a><br>图片详情：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20171027/055339109.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="安装-Nginx"><a href="#安装-Nginx" class="headerlink" title="安装 Nginx"></a>安装 Nginx</h2><p><a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">参考这篇教程的 Nginx 环境搭建部分</a></p><h2 id="设置资源存储路径"><a href="#设置资源存储路径" class="headerlink" title="设置资源存储路径"></a>设置资源存储路径</h2><p>1、 资源准备  </p><p>在 <strong>home</strong> 的用户目录下，建立文件夹，如 <strong>softs</strong> ,在 <strong>softs</strong> 目录中放入文件内容。</p><h2 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h2><p>2、 修改 Nginx 配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim conf/nginx.conf</span><br></pre></td></tr></table></figure><p>添加 server</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen       80;</span><br><span class="line">        server_name  down.vcmq.com;</span><br><span class="line">        #sendfile        on;</span><br><span class="line">        location / &#123;</span><br><span class="line">            alias  /home/softs/;</span><br><span class="line">            sendfile on;</span><br><span class="line">            autoindex on;</span><br><span class="line">            autoindex_exact_size off;</span><br><span class="line">            autoindex_localtime on;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>alias 设置为第一步中的资源目录，我这里是 <strong>/home/softs/</strong></p><p>3、 访问测试<br>将本机 hosts 指向服务器，<br>访问地址 down.vcmq.com  显示目录列表  </p><p><img src="http://img12345.5-project.com/blog/20171027/061943005.png" alt="">  </p><p><strong>注意不能是/root 目录下的文件路径 ，会显示403无权限</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;之前在网上找 CentOs 的镜像的时候，发现了阿里云的这个镜像源，速度蛮快的。今天也来搭建一个类似的站，使用 nginx 作为资源下载服务器。&lt;br&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="资源下载" scheme="http://nullpointer.pw/tags/%E8%B5%84%E6%BA%90%E4%B8%8B%E8%BD%BD/"/>
    
  </entry>
  
  <entry>
    <title>如何做笔记？</title>
    <link href="http://nullpointer.pw/%E5%A6%82%E4%BD%95%E8%AE%B0%E7%AC%94%E8%AE%B0%EF%BC%9F.html"/>
    <id>http://nullpointer.pw/如何记笔记？.html</id>
    <published>2017-10-26T14:10:02.000Z</published>
    <updated>2020-01-22T14:33:56.881Z</updated>
    
    <content type="html"><![CDATA[<p>最近在公司开会，我分享了一些个人日常关于如何记笔记的心得，结合在网上看的相关文章，整理一下，然后做了一些补充，写出这篇博文，文章涉及工具的选择和记笔记的步骤以及记笔记的技巧与注意事项，欢迎留言探讨。  </p><a id="more"></a>  <h2 id="工具的选择"><a href="#工具的选择" class="headerlink" title="工具的选择"></a>工具的选择</h2><p>工欲善其事必先利其器，首先说说工具的选择，<br>好的工具会让你记笔记得心应手，拥有良好的用户体验，不好的工具则做不到这点，达不到记笔记的目的。</p><p>常见的主流云笔记有：  </p><ol><li>有道云笔记</li><li>OneNote  </li><li>为知笔记  </li><li>印象笔记  </li></ol><p>先说说我最熟悉的为知笔记，在一年以前，一直用的是为知笔记，记了上千的笔记，用的很不错，逢人推荐那种；但是有一天，为知笔记突然就宣布必须要付费才能继续使用，否则的话，笔记将不能同步！<br>对应一个云笔记产品来说，没有了最最基础的同步功能，和在本地文档里写有什么区别呢？没有合适的变现方式，就完全抛弃了免费用户，给我感觉这家公司不太靠谱，所以我就转战使用有道云笔记。<br>但是之前的笔记还在为知笔记里，懒得去转移了。所以选择笔记软件的时候也要考虑转移成本，万一一不小心产品就黄了呢！因此尽量选择大公司的成熟笔记产品。  </p><p>再说说现在用的有道云笔记，用一个词来形容就是很鸡贼，以前可以导出笔记为其他笔记软件识别的格式，现在只能导出有道能识别的格式。假如是重度用户，想转移笔记，很困难。<br>好在有道云笔记支持 MarkDown 笔记，所以我现在尽量写的笔记都用 MarkDown 方式，因为 MarkDown 格式的直接在笔记中就能直接复制走，转移笔记很轻松。MarkDown，语法很简单，可以学习一下，轻松排版，语法可以参考有道云的文档， 记笔记不需要去学习太复杂的语法,  看下面链接的第二点就可以。</p><ul><li><a href="http://note.youdao.com/iyoudao/?p=2411">有道云笔记Markdown简明版</a></li></ul><p>然后说说印象笔记，是国外 EverNote 的大陆版本，其免费版只能提供两个终端同步，假如你公司登陆一个，家里登陆一个，还想要在移动设备上登录就需要付费，还有每月上传60M流量的限制，付费版一年一百多，想要最稳定的可以考虑使用。</p><p>最后说说 OneNote, 巨硬出品，但是国内 GFW 的存在，同步很慢，然后也没太弄清楚是怎么用的，和上面介绍的笔记产品组织格式不同，也没怎么会用，就不置点评了。</p><p><strong>我推荐使用有道云笔记和印象笔记(或EverNote)</strong></p><h2 id="记笔记的作用"><a href="#记笔记的作用" class="headerlink" title="记笔记的作用"></a>记笔记的作用</h2><p>最大的作用就是对抗遗忘，用好了笔记，笔记就是你的第二大脑，人的记忆力有限，我们通过记笔记来拓展。</p><p>记笔记三步走：  </p><ol><li>收集</li><li>整理</li><li>输出  </li></ol><p>以下进行详细步骤叙述：  </p><h2 id="记笔记的步骤"><a href="#记笔记的步骤" class="headerlink" title="记笔记的步骤"></a>记笔记的步骤</h2><h3 id="收集"><a href="#收集" class="headerlink" title="收集"></a>收集</h3><p>第一步是确定所要写的笔记内容，即收集，收集这里我分为两部分。</p><ol><li><p>收集他人的内容<br>他人的内容指的是他人所产生的内容，比如别人写的书，博客文章，公众号文章等等，当你遇到了比如一篇你觉得写的很有道理或者对你有用的文章，觉得有保存下来的价值，你可以将其纳入你的笔记当中去。</p></li><li><p>收集自己的内容<br>自己的内容指的是自己所产生的内容，比如突发的灵光一现，如果不立即记录下来，可能就忘掉了，然后再想的时候无论如何也记不起来了，就感觉自己错过了一个亿。所以要趁着你的想法还没有消失之前，立即记录到笔记当中去。现在人手都有一副手机，而云笔记都有其对应的移动端，记录起来很方便。</p></li><li><p>收集的诀窍<br>有时候在某个网站看到一篇文章想要保存下来时候，一般人的做法是讲文章选择拷贝到笔记当中去，这么做是可行，但是会完全没有了排版，看起来乱糟糟的一片，所以需要借助浏览器插件或者分享功能来实现快速美观地保存。有道云笔记的谷歌浏览器插件就很好用，在手机上可以关注公众号，分享到公众号，也可以直接分享到对应的笔记 App 中，从而实现快速收集。</p></li></ol><h3 id="整理"><a href="#整理" class="headerlink" title="整理"></a>整理</h3><p>收集完的内容，只是堆叠到了你的笔记当中，如果不加以整理总结，其实和散布在网络上的文章毫无区别，对你<strong>没有任何的意义，也没有任何的价值</strong>；<br>也许你想找笔记里面某一篇文章，但是你却死活也找不到，这种情况下记与不记都一样；正如去一座图书馆看书，但是图书馆却没有图书查阅系统，在浩渺书海中想找到一本书的困难程度可想而知！因此收集后的整理十分重要。     </p><p>整理分为重新排版与分类以及加标签（<strong>在下文详谈分类与标签</strong>）：</p><ul><li><p>通过浏览器插件等工具抓取保存的内容可能会与原文中的内容排版相差甚远，比如有道云笔记对于代码块的抓取排版支持就很差（其他很不错），这种情况，就需要我们自己对内容重新排版，便于以后自己查看。个人一般是新建立一个 Markdown 笔记，拷贝原文进行编排，并在文末标注文章来源链接。</p></li><li><p>良好的笔记分类有利于快速准确地定位笔记，提升效率。</p></li><li><p>一篇笔记只能放在一个分类中（对应笔记的文件夹)，但是却能够添加多个标签，我认为标签是对分类的一种补充。当分类不足以准确定位笔记，此时需要通过添加标签来弥补。</p></li></ul><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>单单只是将内容收集，归类加标签，并不能够对自己产生很大的用处，最多的是自己想起来就去笔记中寻找，此时笔记的作用最多是充当备忘录的作用。而真正想要利用好笔记，就是需要我们来对笔记进行总结思考，来达到在头脑中深化该篇笔记的作用。  </p><p>举例而言，现在你写了一篇《拆掉思维里的墙》的读书笔记，但笔记的内容只有对于书中原文的部分摘抄；其实这样的笔记作用不大，时间长了，你甚至不记得你曾经读过这本书并写过读书笔记。但是你对文章进行了思考，概括书的主要中心思想，写了自己的感受，在豆瓣上留下了书评，就算时间久了，翻看笔记也能够回想起当时自己的想法，这书也就没有白读，笔记也就没有白写。</p><p>上文提到了在豆瓣中写书评，这和写笔记进行总结思考一样都是对于知识的一种输出。输出的方式还有很多种，比如在简书上、个人博客上、CSDN、博客园等地方发表文章。</p><p>当然，也并非所有的分类下面都需要进行这三步。</p><h2 id="细谈笔记分类与标签"><a href="#细谈笔记分类与标签" class="headerlink" title="细谈笔记分类与标签"></a>细谈笔记分类与标签</h2><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><p>按照个人的习惯与经验，我将笔记分为了五大类，如图：        </p><p><img src="http://img12345.5-project.com/blog/20171026/211942811.png" alt="">  </p><p>1、 <strong>收集</strong>（指的是上图中的<em>我的资源</em>文件夹，因为是有道云笔记自动创建的文件夹，改名字之后他还会创建这个，所以就没有改名字）<br>收集作为一个单独的分类，用于存放未进行整理的收集，有道云笔记生成的<em>我的资源</em>这个文件夹下，会根据你使用的插件，自动生成对应来源的子文件夹，比如来自网页剪报、微信收藏等，我新建了一个 <em>思绪万千</em>  文件夹，用于保存突发的想法。</p><p>2、 <strong>备忘</strong></p><p>顾名思义，备忘分类用于一些需要查找使用，但又不需要完全记忆的内容，比如待办事项，待读书单，还有一些琐碎的文本数据备份等。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20171026/213837971.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>3、 <strong>工作</strong></p><p>工作分类下面主要是记录一些业务需求，工作难点以及工作技巧。</p><p>4、 <strong>学习</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20171026/214451709.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>主要是一些关于编程相关的子分类文件夹，这里和工作分类都因人而异。</p><p>5、 <strong>生活</strong>  </p><p><img src="http://img12345.5-project.com/blog/20171026/214954446.png" alt="">    </p><p>生活分类主要放一些生活中学习的内容，比如读书笔记、投资指南，保险相关的知识。其实这个分类和学习分类很像，因为我关于代码的笔记比较多，所以将其他和代码不相关的笔记放在生活分类当中。</p><p><strong>需要注意的是，分类的层级不宜嵌套太深，最好保持在三层以内，超过后不利于查找。(所以我把与代码不相关的放到生活分类下)</strong></p><h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>再谈笔记的标签，既然标签是对分类的一种补充，因此是非必要的，同时标签不能和分类重复，参考添加这些标签。</p><ol><li>文章来源 （知乎、简书、CSDN等）</li><li>关键词 （笔记的关键点，可以提取几个词语出来作为标签）</li><li>不要太具体 （太具体就会导致标签过多，反而不利于标签的使用）</li></ol><h2 id="后言"><a href="#后言" class="headerlink" title="后言"></a>后言</h2><h3 id="最后说说记笔记的原则"><a href="#最后说说记笔记的原则" class="headerlink" title="最后说说记笔记的原则"></a>最后说说记笔记的原则</h3><ol><li>记笔记是为了用，不用的笔记没有任何价值</li><li>不能只收集不学习</li><li>定期回顾，整理与归档（定期回顾有利于笔记内容的记忆）</li></ol><h3 id="记笔记会遇到的一些问题？"><a href="#记笔记会遇到的一些问题？" class="headerlink" title="记笔记会遇到的一些问题？"></a>记笔记会遇到的一些问题？</h3><ol><li>强迫症犯了，不知道该放在哪个分类下面， 原则是用，你认为放在哪个分类下面最可能被用到，就放在那个分类下面。</li></ol><p><a href="http://nullpointer.pw">Nullpointer的博客</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://www.zhihu.com/search?type=content&amp;q=%E7%AC%94%E8%AE%B0">https://www.zhihu.com/search?type=content&amp;q=%E7%AC%94%E8%AE%B0</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近在公司开会，我分享了一些个人日常关于如何记笔记的心得，结合在网上看的相关文章，整理一下，然后做了一些补充，写出这篇博文，文章涉及工具的选择和记笔记的步骤以及记笔记的技巧与注意事项，欢迎留言探讨。  &lt;/p&gt;
    
    </summary>
    
      <category term="分享" scheme="http://nullpointer.pw/categories/%E5%88%86%E4%BA%AB/"/>
    
    
      <category term="笔记" scheme="http://nullpointer.pw/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>Mysql行转列输出【实战】</title>
    <link href="http://nullpointer.pw/Mysql%E8%A1%8C%E8%BD%AC%E5%88%97%E8%BE%93%E5%87%BA%E3%80%90%E5%AE%9E%E6%88%98%E3%80%91.html"/>
    <id>http://nullpointer.pw/Mysql行转列输出【实战】.html</id>
    <published>2017-10-09T14:44:58.000Z</published>
    <updated>2020-01-22T14:41:50.417Z</updated>
    
    <content type="html"><![CDATA[<p>在很多场景下，需要将一行一行的数据转换成一列数据。比如每个人的每个科目都有一个分数，并分别对应一个分数，但是为了更加直观地看到一个人的所有科目成绩，所以需要将每个科目成绩由行转换成列。</p><a id="more"></a><p><strong>原始数据</strong></p><table><thead><tr><th style="text-align:center">id</th><th style="text-align:center">stuid</th><th style="text-align:center">name</th><th style="text-align:center">subject</th><th style="text-align:center">score</th></tr></thead><tbody><tr><td style="text-align:center">1</td><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">语文</td><td style="text-align:center">99</td></tr><tr><td style="text-align:center">2</td><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">数学</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">3</td><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">语文</td><td style="text-align:center">69</td></tr><tr><td style="text-align:center">4</td><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">数学</td><td style="text-align:center">100</td></tr></tbody></table><p><strong>行数据转换成列数据之后</strong></p><table><thead><tr><th style="text-align:center">stuid</th><th style="text-align:center">name</th><th style="text-align:center">语文</th><th style="text-align:center">数学</th></tr></thead><tbody><tr><td style="text-align:center">110</td><td style="text-align:center">xiaoA</td><td style="text-align:center">99</td><td style="text-align:center">88</td></tr><tr><td style="text-align:center">112</td><td style="text-align:center">xiaoB</td><td style="text-align:center">69</td><td style="text-align:center">100</td></tr></tbody></table><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> stuid, <span class="string">`name`</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="string">`subject`</span> <span class="keyword">WHEN</span> <span class="string">'C001'</span> <span class="keyword">THEN</span> score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="string">'语文'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="string">`subject`</span> <span class="keyword">WHEN</span> <span class="string">'C002'</span> <span class="keyword">THEN</span> score <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">as</span> <span class="string">'数学'</span></span><br><span class="line"><span class="keyword">FROM</span> <span class="string">`sys_user`</span> <span class="keyword">GROUP</span> <span class="keyword">BY</span> stuid;</span><br></pre></td></tr></table></figure><hr><p>以下通过两个在工作中遇到的实例，来使用 Mysql 的行转列。</p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><h3 id="实例一"><a href="#实例一" class="headerlink" title="实例一"></a>实例一</h3><p>网站进行推广，每个推广员都有一个唯一 ID 即 <strong>pid</strong>，现在要统计每个推广员的推广数据；需要统计推广过来的新增用户，以及新增用户的充值以及消费数据。这里简化了数据，便于理解。  </p><p><img src="http://img12345.5-project.com/blog/20171009/165507766.png?imageslim" alt="">  </p><p><strong>数据说明：</strong>  </p><ul><li>create_time： 数据生成时间</li><li>pid： 推广员唯一ID</li><li>type： 数据类型<ul><li>1： 新增用户</li><li>2： 新增充值</li><li>3： 新增消费</li></ul></li><li>value： 对应的数据值</li></ul><p><strong>需求结果样式：</strong>    </p><p><img src="http://img12345.5-project.com/blog/20171009/165921767.png?imageslim" alt="">  </p><p><strong>SQL 查询：</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span></span><br><span class="line">create_time,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">1</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增用户'</span>,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">2</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增充值'</span>,</span><br><span class="line"><span class="keyword">MAX</span>(<span class="keyword">CASE</span> <span class="keyword">type</span> <span class="keyword">WHEN</span> <span class="number">3</span> <span class="keyword">THEN</span> <span class="keyword">value</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="string">'新增订阅'</span></span><br><span class="line"><span class="keyword">FROM</span></span><br><span class="line">wings_companion_analytics <span class="keyword">GROUP</span> <span class="keyword">BY</span> create_time</span><br></pre></td></tr></table></figure><hr><h3 id="实例二"><a href="#实例二" class="headerlink" title="实例二"></a>实例二</h3><p>统计网站单本书的购买次数以及购买金额  </p><p><img src="http://img12345.5-project.com/blog/20171009/172010156.png?imageslim" alt="">    </p><p><strong>数据说明：</strong>  </p><ul><li>id： 主键</li><li>bookId： 书的 ID</li><li>task_id： 数据类型<ul><li>706： 购买次数</li><li>707： 购买金额</li></ul></li><li>time： 数据生成时间</li><li>value： 对应的数据值</li></ul><p><strong>需求结果样式：</strong>      </p><p><img src="http://img12345.5-project.com/blog/20171009/172401490.png?imageslim" alt="">  </p><p><strong>SQL 查询：</strong>  </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> bookId <span class="keyword">as</span> <span class="string">'作品ID'</span>,</span><br><span class="line">  <span class="keyword">DATE_FORMAT</span>(<span class="keyword">time</span>,<span class="string">'%Y-%m-%d'</span>) <span class="keyword">as</span> <span class="string">'日期'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> task_id <span class="keyword">WHEN</span> <span class="number">706</span> <span class="keyword">THEN</span> <span class="string">`value`</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'购买次数'</span>,</span><br><span class="line">  <span class="keyword">MAX</span>(<span class="keyword">CASE</span> task_id <span class="keyword">WHEN</span> <span class="number">707</span> <span class="keyword">THEN</span> <span class="string">`value`</span> <span class="keyword">ELSE</span> <span class="number">0</span> <span class="keyword">END</span>) <span class="keyword">AS</span> <span class="string">'购买金额'</span></span><br><span class="line"><span class="keyword">from</span> <span class="string">`t_task_result_day`</span></span><br><span class="line"><span class="keyword">WHERE</span> task_id <span class="keyword">IN</span> (<span class="number">706</span>, <span class="number">707</span>)</span><br><span class="line"><span class="keyword">GROUP</span> <span class="keyword">BY</span> <span class="keyword">time</span>, bookId</span><br><span class="line"><span class="keyword">ORDER</span> <span class="keyword">BY</span> bookId, <span class="keyword">time</span>;</span><br></pre></td></tr></table></figure><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><ul><li><a href="http://img12345.5-project.com/data.sql">点我下载实例所用数据</a></li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://blog.csdn.net/wulantian/article/details/52687640">http://blog.csdn.net/wulantian/article/details/52687640</a></li><li><a href="http://blog.csdn.net/u013938484/article/details/50552747">http://blog.csdn.net/u013938484/article/details/50552747</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在很多场景下，需要将一行一行的数据转换成一列数据。比如每个人的每个科目都有一个分数，并分别对应一个分数，但是为了更加直观地看到一个人的所有科目成绩，所以需要将每个科目成绩由行转换成列。&lt;/p&gt;
    
    </summary>
    
      <category term="数据库" scheme="http://nullpointer.pw/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
      <category term="实战" scheme="http://nullpointer.pw/tags/%E5%AE%9E%E6%88%98/"/>
    
      <category term="mysql" scheme="http://nullpointer.pw/tags/mysql/"/>
    
      <category term="行转列" scheme="http://nullpointer.pw/tags/%E8%A1%8C%E8%BD%AC%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存配置之手动清除缓存</title>
    <link href="http://nullpointer.pw/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE%E4%B9%8B%E6%89%8B%E5%8A%A8%E6%B8%85%E9%99%A4%E7%BC%93%E5%AD%98.html"/>
    <id>http://nullpointer.pw/Nginx缓存配置之手动清除缓存.html</id>
    <published>2017-09-10T22:15:36.000Z</published>
    <updated>2020-01-22T14:42:23.204Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>前文介绍了利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，并设置了缓存时间为一天。</p><p>但是如果前端修改了页面，比如首页，由于 Nginx 缓存的存在，网站首页并不会立即生效，而是要等到缓存过期。这样明显不是我们想要的结果，所以需要进行手动使 Nginx 缓存失效。以下为操作详解。</p></blockquote><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li>已经设置缓存的 Nginx 服务器， 参照我之前博文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a></li></ul><h2 id="Nginx-配置文件拆分"><a href="#Nginx-配置文件拆分" class="headerlink" title="Nginx 配置文件拆分"></a>Nginx 配置文件拆分</h2><p>在企业 Nginx 应用中，Nginx 配置文件应该根据域名不同来进行拆分，然后在 <strong>nginx.conf</strong>中进行<strong>include</strong>引入。这样的好处是便于管理配置文件，便于修改配置文件， 而 <strong>nginx.conf</strong> 文件中只保留 <strong>upstream</strong> 以及其他通用配置信息。</p><p>在 Nginx 的 <strong>conf</strong> 目录下创建文件夹 <strong>include</strong>， 用于保存拆分的配置文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkdir include</span><br></pre></td></tr></table></figure><p>拆分的规则可以如下：</p><ul><li>桌面版（WEB）的 Nginx 配置文件，可以命名为 <strong>nginx_web.conf</strong></li><li>手机版（WAP）的 Nginx 配置文件，可以命名为 <strong>nginx_wap.conf</strong></li><li>安卓的 Nginx 配置文件，可以命名为 <strong>nginx_apk.conf</strong></li><li>苹果的 Nginx 配置文件，可以命名为 <strong>nginx_ios.conf</strong></li><li>清除缓存的配置文件，可以命名为 <strong>purge.conf</strong></li></ul><p>在 <strong>/usr/local/nginx/conf/nginx.conf</strong> 中引入拆分的配置文件， 在配置文件中的 <strong>http</strong> 节点下进行引入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">http&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash">......</span></span><br><span class="line"></span><br><span class="line"><span class="meta">  #</span><span class="bash"> 注意 purge.conf 必须要第一个引用！！！</span></span><br><span class="line">  include include/purge.conf;</span><br><span class="line"><span class="meta">  #</span><span class="bash"> 引入其他配置文件</span></span><br><span class="line">  include include/nginx_web.conf;</span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_wap.conf;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_apk.conf;</span></span><br><span class="line"><span class="meta">  #</span><span class="bash">include include/nginx_ios.conf;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="配置缓存清除"><a href="#配置缓存清除" class="headerlink" title="配置缓存清除"></a>配置缓存清除</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/nginx/conf/include</span><br><span class="line">vi purge.conf</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">purge.conf 文件内容为：</span></span><br><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name 192.168.200.129;# 此处我配置的是本机ip</span><br><span class="line">    charset utf8;</span><br><span class="line"></span><br><span class="line">    location ~ /purge(/.*) &#123;</span><br><span class="line">        allow   all;# 访问此接口的白名单，all代表所有人都可以访问该路径</span><br><span class="line">        # tmpcache 为前文中 proxy_cache_path 里配置的 keys_zone 的值</span><br><span class="line">        # www.domain.com$1$is_args$args 表示缓存key的名称，清除某一域名下的缓存,可以指定参数</span><br><span class="line">        # $1 代表正则匹配中的第一组</span><br><span class="line">        proxy_cache_purge cachefile www.domain.com$1$is_args$args;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 保存 purge.conf 文件</span></span><br></pre></td></tr></table></figure><h2 id="测试清除缓存"><a href="#测试清除缓存" class="headerlink" title="测试清除缓存"></a>测试清除缓存</h2><p>如果要进行缓存清除，首先需要有缓存文件，此处参照前文 <a href="http://nullpointer.pw/2017/08/20/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE/">Nginx缓存配置</a> 中，访问 <strong>www.domain.com/testpage2</strong>  ，刷新页面，直到缓存已经生成，即 <strong>X-Cache</strong> 的状态为 <strong>HIT</strong>。</p><p>进入 <strong>cd /tmp/cache/</strong> ，查看已经生成了缓存文件</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170910/223443897.png" alt="mark" title="">                </div>                <div class="image-caption">mark</div>            </figure>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 测试 nginx 配置是否正确</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -t</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果提示 is ok，说明配置没有问题，否则需要修改</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启 Nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx -s reload</span><br></pre></td></tr></table></figure><p>浏览器访问（也可以通过 curl 命令来访问）：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 清除key为 www.domain.com/ 的缓存</span></span><br><span class="line">192.168.200.129/purge/    </span><br><span class="line"><span class="meta">#</span><span class="bash"> 清除 key 为 www.domain.com/testpage2 页面缓存</span></span><br><span class="line">192.168.200.129/purge/testpage2</span><br></pre></td></tr></table></figure><p>如果返回  </p><p><img src="http://img12345.5-project.com/blog/20170911/055142311.png" alt="">  </p><p>则表示清除成功。</p><h2 id="资源下载"><a href="#资源下载" class="headerlink" title="资源下载"></a>资源下载</h2><p><a href="http://img12345.5-project.com/conf.zip">示例nginx配置文件</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;前文介绍了利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，并设置了缓存时间为一天。&lt;/p&gt;
&lt;p&gt;但是如果前端修改了页面，比如首页，由于 Nginx 缓存的存在，网站首页并不会立即生效，而是要等到缓存过期。这样明显不是我们想要的结果，所以需要进行手动使 Nginx 缓存失效。以下为操作详解。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="缓存" scheme="http://nullpointer.pw/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>为什么我们会感觉到倦怠?</title>
    <link href="http://nullpointer.pw/%E4%B8%BA%E4%BB%80%E4%B9%88%E6%88%91%E4%BB%AC%E4%BC%9A%E6%84%9F%E8%A7%89%E5%88%B0%E5%80%A6%E6%80%A0%EF%BC%9F.html"/>
    <id>http://nullpointer.pw/为什么我们会感觉到倦怠？.html</id>
    <published>2017-09-04T14:14:00.000Z</published>
    <updated>2020-01-22T14:35:11.184Z</updated>
    
    <content type="html"><![CDATA[<h2 id="为什么产生倦怠？"><a href="#为什么产生倦怠？" class="headerlink" title="为什么产生倦怠？"></a>为什么产生倦怠？</h2><p>刚开始 接手新项目、学习新技能时，我们总是兴奋不已、踌躇满志、迫不及待地想大展身手。但是过了不久，新鲜感退却后，大部分热情就会消退，最终就会兴趣索然，积极性低，进展缓慢或者毫无进展。</p><a id="more"></a><p>这样的事情很多，比如：</p><ul><li>刚开始学习驾驶，是不是很兴奋？过了多久之后，就不再真正关心你的车了？多久以后，你已经觉得它已经“老”了？</li><li>雄心勃勃地想锻炼出一副好身材，办了健身卡后，去了几次之后就再没去过了？</li><li>……</li></ul><p>我们当开始倦怠，于是我们半途而废，努力寻找新事物，找回自己真正的激情。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170904/213718521.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>开始的时候我们的兴趣最高，而动机在开始阶段可能不高，但是随着取得进展，我们的动机水平开始上升。早期的成功让你感觉到有动力，冲量则推动你前进。</p><p>但是随着时间的推移，缓慢的成果进展在不断消耗你的动机，最终会发现动机和兴趣都濒临谷底，这就是那堵墙，也就是我们感觉倦怠的原因。</p><p>但是如果我们穿过了这道墙，我们的动机、兴趣会随着成果的不断取得而不断上升加强，最终我们获得了最大的回报，只是能够穿过这道墙的人很少。</p><h2 id="如何穿过这道墙？"><a href="#如何穿过这道墙？" class="headerlink" title="如何穿过这道墙？"></a>如何穿过这道墙？</h2><p>制定一个目标或计划，采取“定额工作法”，并坚决按照计划完成定额工作。</p><p>首先需要确立一个目标，规定自己要在预定确定的时间段内需要取得多大的进展。</p><p>比如：</p><ul><li>每周跑步 3 次</li><li>每周写一篇博客</li><li>每天看半小时的书</li><li>每天弹半小时的吉他</li></ul><p>将所有重复性工作的频率进行量化，有的一月一次，有的一周3次，有的则是每天两次。并承诺完成，无论刮风下雨。</p><p><strong>承诺是定额工作法的核心，除了想方设法完成自己的工作，不给自己留下任何其他的选择。</strong> 失败不能被接受，因为你让自己失信一次，就会有第二次，很快定额在你眼中就会变得一文不值。</p><p>定额工作法的优点还可以帮你克服意志力薄弱的问题。<strong>通过预先设定好的必须要遵循的过程，消除需要作出决策的部分。</strong> 即不需要做判断——你知道必须要做，只需要遵从命令，避免了意志力耗尽的问题。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;为什么产生倦怠？&quot;&gt;&lt;a href=&quot;#为什么产生倦怠？&quot; class=&quot;headerlink&quot; title=&quot;为什么产生倦怠？&quot;&gt;&lt;/a&gt;为什么产生倦怠？&lt;/h2&gt;&lt;p&gt;刚开始 接手新项目、学习新技能时，我们总是兴奋不已、踌躇满志、迫不及待地想大展身手。但是过了不久，新鲜感退却后，大部分热情就会消退，最终就会兴趣索然，积极性低，进展缓慢或者毫无进展。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>Nginx缓存配置</title>
    <link href="http://nullpointer.pw/Nginx%E7%BC%93%E5%AD%98%E9%85%8D%E7%BD%AE.html"/>
    <id>http://nullpointer.pw/Nginx缓存配置.html</id>
    <published>2017-08-20T08:09:08.000Z</published>
    <updated>2020-01-22T14:42:14.215Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote><p>本文介绍利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，前几篇文章介绍了 Nginx 的动静分离以及 CDN 技术，在其基础上，再对整个页面进行缓存，将大大提高服务器的负载能力。</p></blockquote><a id="more"></a><h2 id="基础环境"><a href="#基础环境" class="headerlink" title="基础环境"></a>基础环境</h2><ul><li><a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85">CentOS 6.8 minimal</a></li><li><a href="http://nginx.org/download/nginx-1.12.1.tar.gz">Nginx 1.12.1</a></li><li><a href="http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz">ngx_cache_purge-2.3</a></li></ul><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>Nginx 与 nginx_ngx_cache_purge 下载解压</p><p>安装 <em>wget</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install wget</span><br></pre></td></tr></table></figure><p>下载 <em>Nginx</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget  http://nginx.org/download/nginx-1.12.1.tar.gz</span><br></pre></td></tr></table></figure><p>解压 <em>Nginx</em> 到 <em>/usr/local/src/</em> 目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf nginx-1.8.1.tar.gz -C /usr/local/src/</span><br></pre></td></tr></table></figure><p>下载 <em>ngx_cache_purge</em></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://labs.frickle.com/files/ngx_cache_purge-2.3.tar.gz</span><br></pre></td></tr></table></figure><p>解压到 Nginx 同一级目录  </p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf ngx_cache_purge-2.3.tar.gz -C /usr/local/src/</span><br></pre></td></tr></table></figure><p>目录结构为<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">---/usr/local/src</span><br><span class="line">   --nginx-1.8.1</span><br><span class="line">   --ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure></p><p>进入 Nginx 解压目录<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cd nginx-1.8.1</span><br></pre></td></tr></table></figure></p><p>安装必要依赖<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum -y install gcc pcre-devel openssl openssl-devel</span><br></pre></td></tr></table></figure></p><p>检查安装环境,并指定将来要安装的路径和要安装的插件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./configure --prefix=/usr/local/nginx/ --with-http_realip_module --add-module=../ngx_cache_purge-2.3</span><br></pre></td></tr></table></figure></p><p>参数说明：<br>–prefix： 将 nginx 安装到此目录<br>–with-http_realip_module 启用获取用户真实 IP 模块<br>–add-module=../ngx_cache_purge-2.3 添加 ngx_cache_purge 模块，用于缓存  </p><p>进行编译安装<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><p>编译完成后，没有出现 error 为编译安装成功</p><h2 id="设置-Nginx-缓存"><a href="#设置-Nginx-缓存" class="headerlink" title="设置 Nginx 缓存"></a>设置 Nginx 缓存</h2><p>编辑 <em>nginx.conf</em> 配置文件<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure></p><p>添加如下配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 需要在 /tmp 目录下创建 cache 文件夹！</span></span><br><span class="line"><span class="meta">#</span><span class="bash">设置缓存区的名称为 tmpcache，内存缓存空间大小为 200MB，1 天没有被访问的内容自动清除，硬盘缓存空间大小为 5GB， 如果访问频率不高的话， inactive 时间可以设置长一些。</span></span><br><span class="line">proxy_cache_path /tmp/cache levels=1:2 keys_zone=tmpcache:200m inactive=1d max_size=5g;</span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line">listen       80;</span><br><span class="line">server_name  www.domain.com;#你的域名</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">proxy_set_header        Host            $host;</span><br><span class="line">proxy_set_header        X-Real-IP       $remote_addr;</span><br><span class="line">proxy_set_header        X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">proxy_set_header        X-Up-Calling-Line-Id $http_x_up_calling_line_id;</span><br><span class="line">proxy_ignore_headers    X-Accel-Expires Expires Cache-Control Set-Cookie;</span><br><span class="line"></span><br><span class="line">access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line"><span class="meta">#</span><span class="bash">proxy_cache 的值是 proxy_cache_path 中的 keys_zone 的值</span></span><br><span class="line">proxy_cache tmpcache;</span><br><span class="line"><span class="meta">#</span><span class="bash">缓存 key 的值</span></span><br><span class="line">proxy_cache_key $host$uri$is_args$args;</span><br><span class="line">proxy_cache_valid 200 301 5m;</span><br><span class="line">proxy_cache_use_stale updating error timeout invalid_header http_500 http_502 http_503 http_504;</span><br><span class="line"></span><br><span class="line">expires 1m;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 将缓存的状态添加到 Header 中</span></span><br><span class="line">add_header X-Cache '$upstream_cache_status';</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="启动-Nginx"><a href="#启动-Nginx" class="headerlink" title="启动 Nginx"></a>启动 Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/local/nginx/sbin/nginx</span><br></pre></td></tr></table></figure><h2 id="启动-Tomcat"><a href="#启动-Tomcat" class="headerlink" title="启动 Tomcat"></a>启动 Tomcat</h2><p>可以使用自己的项目，或者使用我提供的项目来进行测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget http://img12345.5-project.com/SpringDemo.war</span><br></pre></td></tr></table></figure><p>将下载的 war 包放到 Tomcat 的 webapps 目录下，修改 war 包名称为 ROOT.war ，启动 Tomcat。</p><h2 id="测试-Nginx-缓存"><a href="#测试-Nginx-缓存" class="headerlink" title="测试 Nginx 缓存"></a>测试 Nginx 缓存</h2><p>缓存之前</p><p>查看 <strong>/tmp/cache</strong> 目录， 目录下面没有任何文件</p><p>修改本机（windows）的 hosts 文件，将配置的域名指向服务器 IP</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.129 www.domain.com</span><br></pre></td></tr></table></figure><p>打开浏览器访问 <strong>www.domain.com/testpage1</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170820/131820402.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>发现 <strong>X-Cache</strong> 的状态为 <strong>MISS</strong> ，说明没有缓存。</p><p>再次刷新页面后  </p><p><img src="http://img12345.5-project.com/blog/20170820/133616261.png" alt=""></p><p><strong>X-Cache</strong> 的状态已经变成了 <strong>HIT</strong></p><p>同时在服务器上查看 <strong>/tmp/cache</strong> 目录</p><p><code>cd /tmp/cache/</code></p><p>发现该目录下面已经多了文件目录，进去之后打开文件，发现正是刚刚访问页面的源码，说明 Nginx 的缓存已经配置成功了。只要是配置的域名下面的页面， 如果没有进行过滤，都会缓存到服务器。当第二次访问的时候，请求经过 Nginx 服务器时，Nginx 直接返回已经缓存的静态页面，这样将大大降低应用服务器 Tomcat 的负载。</p><p><strong>需要注意的是：并不是该域名下的所有页面都需要进行缓存，如果缓存有误，会出现很严重的问题。比如不正确的将域名下的用户中心进行了缓存，当其他用户也进入页面的时候，显示的全部都是第一个进入该页面用户的信息。因此建议做缓存时，最好根据域名来做， 根据用户不同显示不同的页面的地址就不要做缓存。当然，如果接口地址规范，亦可以通过 Nginx 正则匹配路径的方式，只将某些匹配的路径做缓存。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文介绍利用 nginx 的 nginx_ngx_cache_purge 模块来实现缓存功能，前几篇文章介绍了 Nginx 的动静分离以及 CDN 技术，在其基础上，再对整个页面进行缓存，将大大提高服务器的负载能力。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="缓存" scheme="http://nullpointer.pw/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>阿里云CDN实现网站文件动静分离</title>
    <link href="http://nullpointer.pw/%E9%98%BF%E9%87%8C%E4%BA%91CDN%E5%AE%9E%E7%8E%B0%E7%BD%91%E7%AB%99%E6%96%87%E4%BB%B6%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.html"/>
    <id>http://nullpointer.pw/阿里云CDN实现网站文件动静分离.html</id>
    <published>2017-08-19T23:21:04.000Z</published>
    <updated>2020-01-22T14:30:40.096Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>上一篇文章介绍了如何利用 Nginx 来实现静态资源请求与动态请求的分离，虽然不是所有的请求都压到 Tomcat 应用服务器，但是静态资源请求还是都会到 主机上给主机带来压力，因此本文通过利用阿里云的 CDN 技术来更加彻底地降低应用访问的负载。</p><a id="more"></a><h2 id="配置静态资源域名"><a href="#配置静态资源域名" class="headerlink" title="配置静态资源域名"></a>配置静态资源域名</h2><p>建立一个只用于请求静态资源文件的二级域名，将动态请求与静态请求分离开。</p><p>比如静态资源请求的域名是 <strong>res.domain.com</strong> ， 动态请求的域名是 <strong>www.domain.com</strong></p><h2 id="配置-Nginx-静态资源设置"><a href="#配置-Nginx-静态资源设置" class="headerlink" title="配置 Nginx  静态资源设置"></a>配置 Nginx  静态资源设置</h2><p>参考我的上一篇文章 <a href="http://nullpointer.pw/2017/08/19/Nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/">Nginx动静分离</a></p><h2 id="阿里云-CDN-配置"><a href="#阿里云-CDN-配置" class="headerlink" title="阿里云 CDN 配置"></a>阿里云 CDN 配置</h2><p>登录阿里云 CDN 控制台，添加域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170820/070050098.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>需要注意的是资源文件只需要放到一台主机上即可，方便管理。</p><p>添加 CDN 域名成功后，回到域名管理页面， 在域名列表中找到新加的域名，光标悬浮到该域名上，会出现一个 <strong>复制 CNAME</strong> 的按钮，选择复制，会得到一个类似于 <strong>res.domain.com.w.kunlunle.com</strong> 的域名。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170820/070354748.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h2 id="DNS-配置"><a href="#DNS-配置" class="headerlink" title="DNS 配置"></a>DNS 配置</h2><p>进入你的域名的 DNS 服务提供商控制台，我这里是 <a href="https://www.dnspod.cn/">DNSPOD</a> ， 找到静态资源域名，我的是 <strong>res.domain.com</strong> 修改记录类型为 CNAME ，记录值修改为上一步复制的 域名，如 <strong>res.domain.com.w.kunlunle.com。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170820/071213172.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>选择保存，等待几分钟 DNS 生效后，访问域名试试吧！</p><p>比如我的 <strong>res.domain.com/_res/a.jpg</strong> （需要事先在资源服务器上事先放置该静态文件） 如果访问不到说明配置有误或者缓存还未生效。这里有一个坑就是，自己的电脑有可能因为缓存没刷新访问不到该路径静态资源，而别人的电脑可以，可以换一台电脑尝试访问，或者通过手机浏览器访问尝试。</p><p>End。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;上一篇文章介绍了如何利用 Nginx 来实现静态资源请求与动态请求的分离，虽然不是所有的请求都压到 Tomcat 应用服务器，但是静态资源请求还是都会到 主机上给主机带来压力，因此本文通过利用阿里云的 CDN 技术来更加彻底地降低应用访问的负载。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="动静分离" scheme="http://nullpointer.pw/tags/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>Nginx动静分离</title>
    <link href="http://nullpointer.pw/Nginx%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB.html"/>
    <id>http://nullpointer.pw/Nginx动静分离.html</id>
    <published>2017-08-19T09:44:23.000Z</published>
    <updated>2020-01-22T14:42:14.215Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最新公司新开了一个项目，项目由我来配置基础环境，会写一系列的教程来展示，一个网站从零到上线的整个过程。首先本文介绍资源文件的隔离。  </p><a id="more"></a><h2 id="为什么要实现动静分离"><a href="#为什么要实现动静分离" class="headerlink" title="为什么要实现动静分离"></a>为什么要实现动静分离</h2><p>为什么要将静态资源文件与动态请求进行分离？ 为了降低 Tomcat 服务器的负载，可以通过本文设置并结合 CDN 来实现来更彻底地降低服务器的负载。  </p><p><img src="http://img12345.5-project.com/blog/20170819/192205341.png" alt=""></p><p>如图所示，所有的请求都压到了同一台服务器上， 无论静态还是动态的请求，这样流量大的话势必会造成服务器的负载过高，因为动静分离是必不可少的。</p><h2 id="环境介绍"><a href="#环境介绍" class="headerlink" title="环境介绍"></a>环境介绍</h2><p>首先这是我们项目的目录结构， <strong>resource</strong> 目录和 <strong>_res</strong> 目录中都是静态资源文件，存放比如 js/css/img 等资源。这两个目录下的文件有所不同，<strong>_res</strong> 目录下面是压缩版本的，比如压缩的js/css。通过 Git 或者 SVN 将项目上传到服务器上后，配置 Nginx 来完成静态资源的分离。  </p><p><img src="http://img12345.5-project.com/blog/20170819/131159884.png" alt=""></p><p>首先看一张图(图的来源是：<a href="http://www.cnblogs.com/xiaoblog/p/4241086.html">http://www.cnblogs.com/xiaoblog/p/4241086.html</a>)  </p><p><img src="http://img12345.5-project.com/blog/20170819/130334830.png" alt=""></p><p>当请求经过 Nginx 时，如果是静态资源的请求，就直接返回主机上静态资源即可， 如果是动态请求，则去请求 Tomcat 服务器后再返回。如果流量不是很大，静态资源可以和 Tomcat 服务器放在同一台主机上，否则需要将静态资源与 Tomcat 服务器分开。</p><p>我司对于资源文件的做法是新建一个二级域名，该域名只用于加载静态资源文件。如 <strong>res.domain.com</strong>，这样做的好处是简化了在 Nginx 的 配置。</p><h2 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title="配置 Nginx"></a>配置 Nginx</h2><p>首先需要安装 Nginx， 可以参考我的另外一篇文章 <a href="http://nullpointer.pw/2017/05/05/Nginx%E5%AE%9E%E7%8E%B0Tomcat%E9%9B%86%E7%BE%A4/">Nginx实现Tomcat集群</a>。这里只需要参考到安装 Nginx 即可。</p><p>Nginx 静态资源配置</p><p>打开 Nginx 配置文件</p><p><code>vim /usr/local/nginx/conf/nginx.conf</code></p><p>添加 server</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line"><span class="comment"># 只接收静态资源请求</span></span><br><span class="line">listen       80;</span><br><span class="line">server_name   res.domain.com;</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">default_type            text/plain;</span><br><span class="line">add_header Access-Control-Allow-Origin *;</span><br><span class="line"><span class="comment">#access_log logs/heiyan.image.access.log  click;</span></span><br><span class="line"></span><br><span class="line">location ~* \.(zip|rar|gz|tar.gz|gz|exe)$ &#123;</span><br><span class="line"><span class="built_in">return</span> 500;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line"><span class="comment">#资源文件的目录</span></span><br><span class="line">root /home/resources;</span><br><span class="line">index index.html;</span><br><span class="line"></span><br><span class="line">expires 30d;</span><br><span class="line">default_type      text/plain;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">server &#123;</span><br><span class="line"><span class="comment"># 接收动态请求</span></span><br><span class="line">listen       80;</span><br><span class="line">server_name  www.domain.com;</span><br><span class="line">charset utf8;</span><br><span class="line"></span><br><span class="line">access_log logs/access.log  main;</span><br><span class="line"></span><br><span class="line">location / &#123;</span><br><span class="line">proxy_pass http://127.0.0.1:8080;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="拷贝项目中资源文件到指定的资源目录"><a href="#拷贝项目中资源文件到指定的资源目录" class="headerlink" title="拷贝项目中资源文件到指定的资源目录"></a>拷贝项目中资源文件到指定的资源目录</h2><p>在 Nginx 的配置文件中指定了资源文件的目录为 <strong>/home/resources</strong> ，所以需要将资源拷贝到该目录下，进入上文下载的项目的目录中，将资源目录（我这里是<strong>_res</strong>目录)拷贝到 <strong>/home/resources</strong>目录下面。</p><p><code>cp -rf _res /home/resources</code></p><p>拷贝完成后的目录应该是： <code>/home/resources/_res</code></p><p>在 <strong>/home/resources/_res</strong> 目录下放一张图片 a.jpg ，用于测试。</p><h2 id="测试静态资源获取"><a href="#测试静态资源获取" class="headerlink" title="测试静态资源获取"></a>测试静态资源获取</h2><p>启动 Nginx</p><p>打开浏览器访问： <code>http://res.domain.com/_res/a.jpg</code></p><p>如果是动态请求，则使用 <code>http://www.domain.com</code> 域名</p><p>返回结果：  </p><p><img src="http://img12345.5-project.com/blog/20170819/174007494.png" alt=""></p><p>因为静态资源文件包含 css/js 等文件，修改提交后需要拷贝增量与修改的文件到 <strong>/home/resources</strong> 目录下，如果嫌麻烦，可以直接在 Nginx 配置文件中，配置 路径为项目的资源文件夹根路径，比如 <strong>/home/wide-api/src/main/java/resources/_res</strong>， 这种在更新代码之后，可以直接请求到新的资源文件。之后会写一篇通过阿里云CDN来完成静态分离。</p><p>注： 由于我的是在虚拟机上的 Nginx 进行测试，也没有域名，且是minimal版本系统，没有桌面环境，所以需要配置宿主机的hosts， 在宿主机的浏览器中访问。在真实服务器且有自己绑定到服务器上域名的就直接测试即可。</p><p>使用 <em>SwitchHosts</em> 软件 配置 hosts，我的虚拟机 ip 为192.168.200.129</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.168.200.129 www.domain.com res.domain.com</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最新公司新开了一个项目，项目由我来配置基础环境，会写一系列的教程来展示，一个网站从零到上线的整个过程。首先本文介绍资源文件的隔离。  &lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="动静分离" scheme="http://nullpointer.pw/tags/%E5%8A%A8%E9%9D%99%E5%88%86%E7%A6%BB/"/>
    
  </entry>
  
  <entry>
    <title>CentOS快速安装</title>
    <link href="http://nullpointer.pw/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85.html"/>
    <id>http://nullpointer.pw/CentOS快速安装.html</id>
    <published>2017-08-18T23:40:27.000Z</published>
    <updated>2020-01-22T14:35:27.703Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>最近学习过程中需要使用到 Linux 系统，但是并没有服务器，因此通过虚拟机来完成。本文不从头开始介绍虚拟机的安装，只讲解 <strong>虚拟机自制镜像</strong> 备份的快速还原，如果你需要从头开始安装的，请另寻教程。<strong>本文中涉及的镜像会提供下载地址，以供参考</strong>。</p><p>学习过程中安装虚拟机时总是会遇到一些需要花费大量时间才能解决的问题，比如不能联网、数据库连接不上、ssh 连接不了等问题，为了便于学习，本人将安装好的系统导出为镜像文件，以后如果需要添加虚拟机时，直接还原镜像修改部分配置即可，以下为教程。</p><a id="more"></a><h2 id="环境准备"><a href="#环境准备" class="headerlink" title="环境准备"></a>环境准备</h2><ul><li>虚拟机软件 VMware Workstation 11</li><li>系统镜像版本 CentOS 6.8 minimal (命令行版本，无桌面)  </li><li>自定义镜像以及VMware下载   链接：<a href="http://pan.baidu.com/s/1nuKxhpf">http://pan.baidu.com/s/1nuKxhpf</a> 密码：8dt8<br>若链接失效，发邮件给我补链接 <a href="http://mail.qq.com/cgi-bin/qm_share?t=qm_mailme&amp;email=JVNGSFRlQ0pdSERMSQtGSkg">联系我</a></li></ul><h2 id="VMware-配置"><a href="#VMware-配置" class="headerlink" title="VMware 配置"></a>VMware 配置</h2><p>需要安装的虚拟机采取 NAT 方式联网，因此 需要在 VMware 中配置网关地址。  </p><p>打开虚拟网络编辑器，设置子网 IP</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170819/070316487.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>点击 NAT 设置，设置网关地址IP （网关相当于一个路由器），注意网关 IP 要和子网 IP 处于同一个网段。如192.168.200.x    </p><p><img src="http://img12345.5-project.com/blog/20170819/070502251.png" alt=""></p><h2 id="导入镜像文件"><a href="#导入镜像文件" class="headerlink" title="导入镜像文件"></a>导入镜像文件</h2><p>依次选择菜单， 文件–&gt;打开–&gt; 找到下载镜像解压的文件夹，选择192.168.200.129.ovf 文件  </p><p><img src="http://img12345.5-project.com/blog/20170819/071206741.png" alt=""></p><p>设置虚拟机名称和虚拟机保存路径，选择导入。</p><p>稍等一会儿导入成功后，开启虚拟机。</p><h2 id="虚拟机网络配置"><a href="#虚拟机网络配置" class="headerlink" title="虚拟机网络配置"></a>虚拟机网络配置</h2><p>登录账号：root   密码：123456</p><p>刚安装完是无法 ping 通外网的，需要修改网络配置， 当前镜像已经设置了静态 ip，便于使用。</p><ol><li>修改 70-persistent-net.rules 文件  </li></ol><p><code>vi /etc/udev/rules.d/70-persistent-net.rules</code></p><p>注释掉 eth0 所在行，结果应该为：<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span> PCI device 0x8086:0x100f (e1000)</span><br><span class="line"><span class="meta">#</span>SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR&#123;address&#125;=="00:0c:29:30:a4:b5", ATTR&#123;type&#125;=="1", KERNEL=="eth*", NAME="eth0"</span><br><span class="line"><span class="meta">#</span> PCI device 0x8086:0x100f (e1000)</span><br><span class="line">SUBSYSTEM=="net", ACTION=="add", DRIVERS=="?*", ATTR&#123;address&#125;=="00:0c:29:cd:05:ea", ATTR&#123;type&#125;=="1", KERNEL=="eth*", NAME="eth1"</span><br></pre></td></tr></table></figure></p><ol><li>修改网络配置文件，设置静态IP地址和网关地址<br><code>vi /etc/sysconfig/network-scripts/ifcfg-eth0</code></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">DEVICE=eth1 # 修改eth0 为eth1</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">ONBOOT=yes</span><br><span class="line">NM_CONTROLLED=yes</span><br><span class="line">BOOTPROTO=static</span><br><span class="line">IPADDR=192.168.200.132  # 修改为想要的静态ip地址， 如果网关地址为192.168.100.2  则ip地址为 192.168.100.x  x为1-254，且不与网关地址重复</span><br><span class="line">GATEWAY=192.168.200.2   # 修改为你虚拟机的网关地址 IP</span><br><span class="line">NAME="System eth0"</span><br><span class="line">NETMASK=255.255.255.0</span><br><span class="line">DNS1=8.8.8.8</span><br><span class="line">DNS2=4.4.4.4</span><br></pre></td></tr></table></figure><ol><li><p>重启虚拟机  <strong>reboot</strong> 这是必须的步骤！</p></li><li><p>检验是否修改生效</p><p>重启登录成功后， 输入 <strong>ip addr</strong>， 如果你显示的和我一致，则是正确的。</p><p><img src="http://img12345.5-project.com/blog/20170819/072943215.png" alt=""></p></li></ol><p>如果你的出现了两条 inet， 说明第 1 步， 和第 2 步没有配置正确。此时 <strong>ping</strong> 一下百度，发现已经可以 ping 通了。  </p><p><img src="http://img12345.5-project.com/blog/20170819/073150774.png" alt=""></p><p>至此，虚拟机已经配置好了。可以通过 SSH 软件进行连接了。</p><p>建议：虚拟机安装完成后，对其进行快照，防止弄坏了还需要重新安装。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170819/073454049.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>在快照管理器中，可以选择保存的快照，还原到快照时的系统。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;最近学习过程中需要使用到 Linux 系统，但是并没有服务器，因此通过虚拟机来完成。本文不从头开始介绍虚拟机的安装，只讲解 &lt;strong&gt;虚拟机自制镜像&lt;/strong&gt; 备份的快速还原，如果你需要从头开始安装的，请另寻教程。&lt;strong&gt;本文中涉及的镜像会提供下载地址，以供参考&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;学习过程中安装虚拟机时总是会遇到一些需要花费大量时间才能解决的问题，比如不能联网、数据库连接不上、ssh 连接不了等问题，为了便于学习，本人将安装好的系统导出为镜像文件，以后如果需要添加虚拟机时，直接还原镜像修改部分配置即可，以下为教程。&lt;/p&gt;
    
    </summary>
    
      <category term="服务器" scheme="http://nullpointer.pw/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    
    
      <category term="centos" scheme="http://nullpointer.pw/tags/centos/"/>
    
      <category term="虚拟机" scheme="http://nullpointer.pw/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"/>
    
  </entry>
  
  <entry>
    <title>Java之word导出下载</title>
    <link href="http://nullpointer.pw/Java%E4%B9%8Bword%E5%AF%BC%E5%87%BA%E4%B8%8B%E8%BD%BD.html"/>
    <id>http://nullpointer.pw/Java之word导出下载.html</id>
    <published>2017-07-27T14:12:07.000Z</published>
    <updated>2020-01-22T14:40:35.298Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近遇到项目需求需要将数据库中的部分数据导出到 word 中，具体是在一个新闻列表中将选中的新闻导出到一个 word 中。参考了网上一些教程，实现了该功能，在此记录下来。</p><a id="more"></a><p>导出结果如下：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170726/222116065.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>图中为导出的其中两条新闻。</p><p>搜索网上导出 word 的方式有很多种，但是很多都是一笔带过，有示例代码的只找到了 POI 导出，和通过 FreeMarker 方式导出，但是只是具有参考意义。本文采取使用 FreeMark 方式。</p><h2 id="实现步骤"><a href="#实现步骤" class="headerlink" title="实现步骤"></a>实现步骤</h2><ol><li><p>Maven 工程引入FreeMarker 的依赖，非 Maven 工程添加 jar 包</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.26-incubating<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>创建 word 模板</p><ol><li><p>新建 word 替换内容为占位符  </p><p> <img src="http://img12345.5-project.com/blog/20170726/223450741.png" alt=""></p></li><li><p>另存模板为 XML 文件  </p><p><img src="http://img12345.5-project.com/blog/20170726/223613199.png" alt=""></p></li><li><p>使用 NotePad++ 打开 xml 文件</p></li><li><p>选中全部内容，到<a href="http://tool.oschina.net/codeformat/xml">这里</a>进行格式化</p></li><li><p>将原内容替换为格式化后的内容</p></li><li><p>因为我的 word 的内容是一个列表，所以需要添加一个 freemarer 标签标识</p></li><li><p>找到<code>&lt;w:document&gt;</code> 元素下面的 <code>&lt;w:body&gt;</code> 元素，添加<code>&lt;#list newsList news&gt;</code> ， 并在<code>&lt;/w:body&gt;</code>结束标签之前闭合 <code>&lt;/#list&gt;</code>， 此处的 <strong>newsList</strong> 为后台读取模板时需要需要渲染数据map集合的key， 其所对应的是一个list集合。  </p><p><img src="http://img12345.5-project.com/blog/20170726/224610046.png" alt=""></p></li><li><p>替换模板中的占位符 <code>&lt;w:t&gt;${news.title}&lt;/w:t&gt;</code> 与 <code>&lt;w:t&gt;${news.content}&lt;/w:t&gt;</code> 为遍历集合的值，这里的 FreeMarker 语法可以参考网上的教程。</p></li><li><p>保存为 FreeMarker 的模板文件，后缀为 ftl 格式，拷贝到项目中  </p><p><img src="http://img12345.5-project.com/blog/20170726/224037421.png" alt=""></p></li></ol></li><li><p>编写代码</p><ol><li><p>从数据中查询数据集合放入Map中， 调用工具方法，返回流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Map&lt;String, Object&gt; root = <span class="keyword">new</span> HashMap&lt;String, Object&gt;();</span><br><span class="line">root.put(<span class="string">"newsList"</span>, newsList);<span class="comment">//newsList为新闻对象集合</span></span><br><span class="line">String template = <span class="string">"/temp.ftl"</span>;  <span class="comment">//模板文件的地址</span></span><br><span class="line">ByteArrayOutputStream outputStream = WordUtil.process(root, template);</span><br><span class="line"><span class="keyword">return</span> outputStream;</span><br></pre></td></tr></table></figure></li><li><p>调用下载工具类进行下载即可。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DownloadUtil.download(byteArrayOutputStream, response, returnname);</span><br></pre></td></tr></table></figure></li></ol><p>注：在实现功能的时候，由于采取的是 ajax 请求方式，导致只是将流写入 Response 时， Response 为 xml 格式的数据。但是想要实现的效果是弹出下载框，下载 word 文档。最后查询资料，修改ajax请求为form表单提交方式(ajax form)，才弹出下载框实现了功能。</p></li></ol><h2 id="文章涉及工具类"><a href="#文章涉及工具类" class="headerlink" title="文章涉及工具类"></a>文章涉及工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//WordUtil.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStreamWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">WordUtil</span> </span>&#123;</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Configuration configuration = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">WordUtil</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AssertionError();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * 根据模板生成相应的文件</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> root 保存数据的map</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> template 模板文件的地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> path 生成的word文档输出地址</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> ByteArrayOutputStream <span class="title">process</span><span class="params">(Map&lt;?, ?&gt; root, String template)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == root ) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"数据不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == template) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"模板文件不能为空"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ByteArrayOutputStream outputStream = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">String templatePath = template.substring(<span class="number">0</span>, template.lastIndexOf(<span class="string">"/"</span>));</span><br><span class="line">String templateName = template.substring(template.lastIndexOf(<span class="string">"/"</span>) + <span class="number">1</span>, template.length());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">null</span> == configuration) &#123;</span><br><span class="line">  configuration = <span class="keyword">new</span> Configuration(Configuration.VERSION_2_3_23);  <span class="comment">// 这里Configurantion对象不能有两个，否则多线程访问会报错</span></span><br><span class="line">  configuration.setDefaultEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">  configuration.setClassicCompatible(<span class="keyword">true</span>);</span><br><span class="line">&#125;</span><br><span class="line">configuration.setClassForTemplateLoading(WordUtil.class, templatePath);</span><br><span class="line"></span><br><span class="line">Template t = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  t = configuration.getTemplate(templateName);</span><br><span class="line">  Writer w = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(outputStream, <span class="string">"utf-8"</span>));</span><br><span class="line">  t.process(root, w);  <span class="comment">// 这里w是一个输出地址，可以输出到任何位置，如控制台，网页等</span></span><br><span class="line">  w.close();</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(e);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> outputStream;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//DownloadUtil.java</span></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.OutputStream;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletOutputStream;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/**</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> byteArrayOutputStream 将文件内容写入ByteArrayOutputStream</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> response HttpServletResponse写入response</span></span><br><span class="line"><span class="comment">   * <span class="doctag">@param</span> returnName 返回的文件名</span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">download</span><span class="params">(ByteArrayOutputStream byteArrayOutputStream, HttpServletResponse response, String returnName)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">  response.setContentType(<span class="string">"application/msword"</span>);</span><br><span class="line">  response.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment; filename="</span> + returnName);</span><br><span class="line">  response.setContentLength(byteArrayOutputStream.size());</span><br><span class="line">  OutputStream outputstream = response.getOutputStream();<span class="comment">//取得输出流</span></span><br><span class="line">  byteArrayOutputStream.writeTo(outputstream);<span class="comment">//写到输出流</span></span><br><span class="line">  byteArrayOutputStream.close();<span class="comment">//关闭</span></span><br><span class="line">  outputstream.flush();<span class="comment">//刷数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="源码下载"><a href="#源码下载" class="headerlink" title="源码下载"></a>源码下载</h2><p><a href="http://img12345.5-project.com/wordDemo.zip">点我下载</a></p><h2 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h2><ul><li><a href="http://itindex.net/detail/55080-springboot-freemarker-%E6%A0%BC%E5%BC%8F">http://itindex.net/detail/55080-springboot-freemarker-%E6%A0%BC%E5%BC%8F</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近遇到项目需求需要将数据库中的部分数据导出到 word 中，具体是在一个新闻列表中将选中的新闻导出到一个 word 中。参考了网上一些教程，实现了该功能，在此记录下来。&lt;/p&gt;
    
    </summary>
    
    
      <category term="word" scheme="http://nullpointer.pw/tags/word/"/>
    
      <category term="freemarker" scheme="http://nullpointer.pw/tags/freemarker/"/>
    
  </entry>
  
  <entry>
    <title>Java配置分离之Spring远程配置</title>
    <link href="http://nullpointer.pw/Java%E9%85%8D%E7%BD%AE%E5%88%86%E7%A6%BB%E4%B9%8B%E8%BF%9C%E7%A8%8B%E9%85%8D%E7%BD%AE.html"/>
    <id>http://nullpointer.pw/Java配置分离之远程配置.html</id>
    <published>2017-07-16T01:14:30.000Z</published>
    <updated>2020-01-22T14:39:16.461Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>集群应用的配置文件如果写在项目的 <strong>resources</strong> 目录下面，当遇到需要修改某一个配置值时，需要将集群的所有应用的配置信息进行修改，并且将机密的配置信息比如数据库账号密码如果不进行加密配置在项目中很危险，一旦发生代码泄露问题，后果很严重。</p><p>为了避免上述情况发生，将配置信息存储到数据库中，比如数据库连接、用户名、以及密码，通过 Config 项目的一个<strong>接口</strong>提供获取配置信息。Config 项目只用于读取配置信息。</p><a id="more"></a><h2 id="远程配置"><a href="#远程配置" class="headerlink" title="远程配置"></a>远程配置</h2><p>一）新建类 <strong>RemoteProperties</strong>   </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONArray;</span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteProperties</span> <span class="keyword">implements</span> <span class="title">InitializingBean</span>, <span class="title">FactoryBean</span>&lt;<span class="title">Properties</span>&gt; </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String url = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Properties <span class="title">getObject</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> properties;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Class&lt;?&gt; getObjectType() &#123;</span><br><span class="line">        <span class="keyword">return</span> properties.getClass();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterPropertiesSet</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        loadProperty();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setUrl</span><span class="params">(String url)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">loadProperty</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (StringUtil.strIsNull(url)) <span class="keyword">return</span>;</span><br><span class="line">        String content = HttpClientUtil.urlGet(url);</span><br><span class="line"></span><br><span class="line">        JSONObject object = JSONObject.parseObject(content);</span><br><span class="line">        JSONArray data = object.getJSONArray(<span class="string">"datasource"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Object obj : data) &#123;</span><br><span class="line">            JSONObject jsonObject = (JSONObject) obj;</span><br><span class="line">            String key = obj.getString(<span class="string">"key"</span>);</span><br><span class="line">            String value = obj.getString(<span class="string">"value"</span>);</span><br><span class="line">            properties.put(key, value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此类用于发送请求获取配置信息，请求返回格式为 JSON 的配置信息, 如：<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"datasource"</span>:[</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"com.mysql.jdbc.Driver"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.driver"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"jdbc:mysql://localhost:3306/test?useUnicode=true&amp;characterEncoding=utf8"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.url"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.username"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"value"</span>:<span class="string">"root"</span>,</span><br><span class="line">            <span class="attr">"key"</span>:<span class="string">"jdbc.password"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二）编写 Spring 配置文件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">beans</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns</span>=<span class="string">"http://www.springframework.org/schema/beans"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:context</span>=<span class="string">"http://www.springframework.org/schema/context"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:dubbo</span>=<span class="string">"http://code.alibabatech.com/schema/dubbo"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:tx</span>=<span class="string">"http://www.springframework.org/schema/tx"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xmlns:aop</span>=<span class="string">"http://www.springframework.org/schema/aop"</span> <span class="attr">xmlns:p</span>=<span class="string">"http://www.springframework.org/schema/p"</span></span></span><br><span class="line"><span class="tag"><span class="attr">xsi:schemaLocation</span>=<span class="string">"http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">http://code.alibabatech.com/schema/dubbo http://code.alibabatech.com/schema/dubbo/dubbo.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd</span></span></span><br><span class="line"><span class="tag"><span class="string">            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"propertyConfigurerUserServer"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"properties"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"remoteProperties"</span> <span class="attr">class</span>=<span class="string">"com.craft.partner.server.util.RemoteProperties"</span>    </span></span><br><span class="line"><span class="tag"><span class="attr">p:url</span>=<span class="string">"http://api.xxx.com/config"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!--远程配置提供接口--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--还可以加载本地的properties文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:configure.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"dataSource"</span> <span class="attr">class</span>=<span class="string">"com.mchange.v2.c3p0.ComboPooledDataSource"</span> <span class="attr">destroy-method</span>=<span class="string">"close"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:driverClass</span>=<span class="string">"$&#123;jdbc.driver&#125;"</span> </span></span><br><span class="line"><span class="tag">  <span class="attr">p:jdbcUrl</span>=<span class="string">"$&#123;jdbc.url&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:user</span>=<span class="string">"$&#123;jdbc.username&#125;"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">p:password</span>=<span class="string">"$&#123;jdbc.password&#125;"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"initialPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"minPoolSize"</span> <span class="attr">value</span>=<span class="string">"10"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxPoolSize"</span> <span class="attr">value</span>=<span class="string">"50"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxStatements"</span> <span class="attr">value</span>=<span class="string">"0"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"maxIdleTime"</span> <span class="attr">value</span>=<span class="string">"600"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"idleConnectionTestPeriod"</span> <span class="attr">value</span>=<span class="string">"300"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"acquireIncrement"</span> <span class="attr">value</span>=<span class="string">"5"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"autoCommitOnClose"</span> <span class="attr">value</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"checkoutTimeout"</span> <span class="attr">value</span>=<span class="string">"2000"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"transactionManager"</span> <span class="attr">class</span>=<span class="string">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"dataSource"</span> <span class="attr">ref</span>=<span class="string">"dataSource"</span>&gt;</span><span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">tx:advice</span> <span class="attr">id</span>=<span class="string">"txAdvice"</span> <span class="attr">transaction-manager</span>=<span class="string">"transactionManager"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"save*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"update*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"delete*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"find*"</span> <span class="attr">read-only</span>=<span class="string">"true"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tx:method</span> <span class="attr">name</span>=<span class="string">"*"</span> <span class="attr">propagation</span>=<span class="string">"REQUIRED"</span> <span class="attr">read-only</span>=<span class="string">"true"</span>/&gt;</span><span class="comment">&lt;!--其他不符合规范的方法只允许读操作--&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">tx:attributes</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">tx:advice</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">aop:config</span> <span class="attr">expose-proxy</span>=<span class="string">"false"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:pointcut</span> <span class="attr">id</span>=<span class="string">"serviceMethod"</span> <span class="attr">expression</span>=<span class="string">"execution(* com.craft.partner.server.service.*.*(..))"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">aop:advisor</span> <span class="attr">advice-ref</span>=<span class="string">"txAdvice"</span> <span class="attr">pointcut-ref</span>=<span class="string">"serviceMethod"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">aop:config</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>注意： 通过 <strong>p:url=”地址”</strong> 的方式，调用 RemoteProperties 的方法，发送请求获取配置信息，通过 Spring 进行注入。<br>注入后，可以通过 <strong>p:属性</strong> 的方式获取配置。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://www.cnblogs.com/yjmyzz/p/how-to-load-remote-config-in-spring.html">http://www.cnblogs.com/yjmyzz/p/how-to-load-remote-config-in-spring.html</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;集群应用的配置文件如果写在项目的 &lt;strong&gt;resources&lt;/strong&gt; 目录下面，当遇到需要修改某一个配置值时，需要将集群的所有应用的配置信息进行修改，并且将机密的配置信息比如数据库账号密码如果不进行加密配置在项目中很危险，一旦发生代码泄露问题，后果很严重。&lt;/p&gt;
&lt;p&gt;为了避免上述情况发生，将配置信息存储到数据库中，比如数据库连接、用户名、以及密码，通过 Config 项目的一个&lt;strong&gt;接口&lt;/strong&gt;提供获取配置信息。Config 项目只用于读取配置信息。&lt;/p&gt;
    
    </summary>
    
    
      <category term="远程配置" scheme="http://nullpointer.pw/tags/%E8%BF%9C%E7%A8%8B%E9%85%8D%E7%BD%AE/"/>
    
  </entry>
  
  <entry>
    <title>Java上传图片到OSS的实现</title>
    <link href="http://nullpointer.pw/Java%E4%B8%8A%E4%BC%A0%E5%9B%BE%E7%89%87%E5%88%B0OSS%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://nullpointer.pw/Java上传图片到OSS的实现.html</id>
    <published>2017-05-06T15:01:57.000Z</published>
    <updated>2020-01-22T14:39:44.786Z</updated>
    
    <content type="html"><![CDATA[<p>前言：  以前做项目用的都是开源的分布式系统，如FastDFS。<br>最近几年，随着云的发展，国内外的巨头公司也相应的推出了相关商用的类似产品。<br>比如Amazon S3，阿里云的OSS，腾讯云的COS。<br>今天我选择使用阿里云的OSS来作为例子，来实现图片的上传。</p><a id="more"></a><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><a href="https://help.aliyun.com/document_detail/32008.html">阿里云OSS官方文档地址</a></p><h3 id="一、开通阿里云OSS"><a href="#一、开通阿里云OSS" class="headerlink" title="一、开通阿里云OSS"></a>一、开通阿里云OSS</h3><ol><li>登录阿里云控制台开通OSS服务，并创建<code>AccessKeyId</code>和<code>AccessKeySecret</code></li><li>在OSS控制面板上新建Bucket<br><img src="http://img12345.5-project.com/blog/20170506/221118419.png" alt=""></li><li>进入新建的Bucket<br>选择左侧的Object管理，新建一个<code>img</code>的文件夹，便于存储归类</li></ol><h3 id="二、maven项目中引入依赖"><a href="#二、maven项目中引入依赖" class="headerlink" title="二、maven项目中引入依赖"></a>二、maven项目中引入依赖</h3><p>在maven工程中的pom.xml添加依赖<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.oss<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aliyun-sdk-oss<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="编写代码"><a href="#编写代码" class="headerlink" title="编写代码"></a>编写代码</h2><blockquote><p>注：我所使用的的框架是：SpringMVC+Spring+Mybatis  </p></blockquote><h3 id="一、上传文件到OSS之HelloWorld"><a href="#一、上传文件到OSS之HelloWorld" class="headerlink" title="一、上传文件到OSS之HelloWorld"></a>一、上传文件到OSS之HelloWorld</h3><p>上传图片之前，先惯例来一个HelloWorld示例！<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> com.aliyun.oss.OSSClient;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.ObjectMetadata;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.oss.model.PutObjectResult;</span><br><span class="line"><span class="keyword">import</span> com.nullpointer.common.Constants;</span><br><span class="line"><span class="keyword">import</span> com.nullpointer.service.AliyunOSSService;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Service;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.annotation.PostConstruct;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunOSSServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliyunOSSService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMG = <span class="string">"img/"</span>;<span class="comment">//对应Object的文件夹名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxLength = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//简单上传OSS限制为5G以下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENDPOINT = File.separatorChar == <span class="string">'/'</span> ? <span class="string">"oss-cn-hangzhou-internal.aliyuncs.com"</span> : <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;<span class="comment">//用于选择不同的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSClient client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OSSClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String accessId = <span class="string">"xxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessId， 在OSS控制台可以生成</span></span><br><span class="line">        String accessKey = <span class="string">"xxxxxxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessKey</span></span><br><span class="line">        bucketName = <span class="string">"xxxxx"</span>;<span class="comment">//创建的Bucket的名称，注意要一致区分大小写</span></span><br><span class="line"></span><br><span class="line">        client = <span class="keyword">new</span> OSSClient(ENDPOINT, accessId, accessKey);<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">uploadIm</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String content = <span class="string">"Hello OSS"</span>;</span><br><span class="line">        PutObjectResult test01 = client.putObject(bucketName, <span class="string">"test01"</span>, <span class="keyword">new</span> ByteArrayInputStream(content.getBytes()));</span><br><span class="line">        <span class="keyword">return</span> test01.getETag();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>打开OSS控制台的Object管理，是不是发现新增了一个文件呢？<br><img src="http://img12345.5-project.com/blog/20170506/222456581.png" alt=""></p><h3 id="二、编写图片上传服务类"><a href="#二、编写图片上传服务类" class="headerlink" title="二、编写图片上传服务类"></a>二、编写图片上传服务类</h3><p>HelloWorld示例完成了，开始正式编写图片上传代码了。注释都有。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AliyunOSSServiceImpl</span> <span class="keyword">implements</span> <span class="title">AliyunOSSService</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String IMG = <span class="string">"img/"</span>;<span class="comment">//对应Object的文件夹名称</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> maxLength = <span class="number">5</span> * <span class="number">1024</span> * <span class="number">1024</span>;<span class="comment">//简单上传OSS限制为5G以下</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String ENDPOINT = File.separatorChar == <span class="string">'/'</span> ? <span class="string">"oss-cn-hangzhou-internal.aliyuncs.com"</span> : <span class="string">"http://oss-cn-hangzhou.aliyuncs.com"</span>;<span class="comment">//用于选择不同的域名</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> OSSClient client;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 初始化OSSClient</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@PostConstruct</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        String accessId = <span class="string">"xxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessId， 在OSS控制台可以生成</span></span><br><span class="line">        String accessKey = <span class="string">"xxxxxxxxxxxxxxxxx"</span>;<span class="comment">//你的AccessKey</span></span><br><span class="line">        bucketName = <span class="string">"xxxxx"</span>;<span class="comment">//创建的Bucket的名称，注意要一致区分大小写</span></span><br><span class="line"></span><br><span class="line">        client = <span class="keyword">new</span> OSSClient(ENDPOINT, accessId, accessKey);<span class="comment">//初始化</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public String uploadIm() &#123;</span></span><br><span class="line"><span class="comment">        String content = "Hello OSS";</span></span><br><span class="line"><span class="comment">        PutObjectResult test01 = client.putObject(bucketName, "test01", new ByteArrayInputStream(content.getBytes()));</span></span><br><span class="line"><span class="comment">        return test01.getETag();</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(MultipartFile file)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String fileName = <span class="keyword">this</span>.saveImage(file.getSize(), file.getOriginalFilename(), file.hashCode(), file.getInputStream());</span><br><span class="line">            <span class="keyword">return</span> getHttpUrl(fileName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getHttpUrl</span><span class="params">(String fileName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Constants.OSS_HTTP + <span class="string">"/"</span> + IMG + fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(<span class="keyword">long</span> size, String extName, <span class="keyword">int</span> hashCode, InputStream is)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (size &gt; maxLength)<span class="comment">//超过5G</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String name = extName.toLowerCase();</span><br><span class="line">        name = name.substring(name.indexOf(<span class="string">"."</span>));<span class="comment">//获得上传文件的后缀名称如 .jpg</span></span><br><span class="line">        String fileName = System.currentTimeMillis() + <span class="string">"_"</span> + hashCode + name;<span class="comment">//为了防止重复， 使用时间戳+hashcode的方式来命名</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.saveImage(size, fileName, is);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">saveImage</span><span class="params">(<span class="keyword">long</span> size, String fileName, InputStream is)</span> </span>&#123;</span><br><span class="line">        String key = IMG + fileName;<span class="comment">//保存到img文件夹下</span></span><br><span class="line">        <span class="keyword">this</span>.uploadObject(key, size, is);</span><br><span class="line">        <span class="keyword">return</span> fileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadObject</span><span class="params">(String key, <span class="keyword">long</span> size, InputStream is)</span> </span>&#123;</span><br><span class="line">        ObjectMetadata metadata = <span class="keyword">new</span> ObjectMetadata();<span class="comment">//设置文件的meta信息</span></span><br><span class="line">        metadata.setContentLength(size);</span><br><span class="line">        metadata.setContentType(<span class="string">"image/jpeg"</span>);</span><br><span class="line"></span><br><span class="line">        PutObjectResult result = client.putObject(bucketName, key, is);<span class="comment">//调用SDK的上传方法</span></span><br><span class="line">        System.out.println(result);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="三、编写Controller层的上传接口"><a href="#三、编写Controller层的上传接口" class="headerlink" title="三、编写Controller层的上传接口"></a>三、编写Controller层的上传接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/upload"</span>, method = RequestMethod.POST)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">uploadOSS</span><span class="params">(MultipartFile pic, HttpServletResponse response,  Model model)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"></span><br><span class="line">    String imgUrl = aliyunOSSService.saveImage(pic);</span><br><span class="line">    System.out.println(<span class="string">"path = "</span> + imgUrl);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//图片回显</span></span><br><span class="line">    JSONObject jsonObject = <span class="keyword">new</span> JSONObject();</span><br><span class="line">    jsonObject.put(<span class="string">"path"</span>, imgUrl);</span><br><span class="line">    response.setContentType(<span class="string">"application/json;charset=UTF-8"</span>);</span><br><span class="line">    response.getWriter().write(jsonObject.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是：入参中的MultipartFIle是一个接口，需要在Spring的配置文件<code>applicationContext.xml</code>中将其实现类注入。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"multipartResolver"</span> <span class="attr">class</span>=<span class="string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="四、编写页面JSP"><a href="#四、编写页面JSP" class="headerlink" title="四、编写页面JSP"></a>四、编写页面JSP</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">contentType</span>=<span class="string">"text/html;charset=UTF-8"</span> <span class="attr">language</span>=<span class="string">"java"</span> %&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"/static/js/jquery.form.js"</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">%@</span> <span class="attr">page</span> <span class="attr">isELIgnored</span>=<span class="string">"false"</span> %&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>home<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"application/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">        function uploadPic() &#123;</span></span><br><span class="line"><span class="undefined">            var options = &#123;</span></span><br><span class="line"><span class="undefined">                url: "/upload",</span></span><br><span class="line"><span class="undefined">                type: "POST",</span></span><br><span class="line"><span class="undefined">                dataType: "json",</span></span><br><span class="line"><span class="undefined">                success: function (data) &#123;</span></span><br><span class="line"><span class="undefined">                    $("#imgUrl").attr("src", data.path);</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">            $("#jform").ajaxSubmit(options);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container-fluid"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row-fluid"</span> <span class="attr">align</span>=<span class="string">"content"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"/uploadOSS"</span> <span class="attr">method</span>=<span class="string">"POST"</span> <span class="attr">id</span>=<span class="string">"jform"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"span12"</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">img</span> <span class="attr">alt</span>=<span class="string">"img"</span> <span class="attr">class</span>=<span class="string">"img-polaroid"</span> <span class="attr">id</span>=<span class="string">"imgUrl"</span>/&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"pic"</span> <span class="attr">onchange</span>=<span class="string">"uploadPic()"</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面不是我所擅长，能显示效果即可。</p><h3 id="五、测试图片上传"><a href="#五、测试图片上传" class="headerlink" title="五、测试图片上传"></a>五、测试图片上传</h3><p><strong>启动项目，进入图片上传的页面。</strong></p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170506/224108910.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p><strong>上传图片</strong><br>控制台打印了如下内容：<br><img src="http://img12345.5-project.com/blog/20170506/224449951.png" alt=""></p><p>页面显示：<br><img src="http://img12345.5-project.com/blog/20170506/224526048.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：  以前做项目用的都是开源的分布式系统，如FastDFS。&lt;br&gt;最近几年，随着云的发展，国内外的巨头公司也相应的推出了相关商用的类似产品。&lt;br&gt;比如Amazon S3，阿里云的OSS，腾讯云的COS。&lt;br&gt;今天我选择使用阿里云的OSS来作为例子，来实现图片的上传。&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="OSS" scheme="http://nullpointer.pw/tags/OSS/"/>
    
      <category term="对象存储系统" scheme="http://nullpointer.pw/tags/%E5%AF%B9%E8%B1%A1%E5%AD%98%E5%82%A8%E7%B3%BB%E7%BB%9F/"/>
    
  </entry>
  
  <entry>
    <title>Nginx实现Tomcat集群</title>
    <link href="http://nullpointer.pw/Nginx%E5%AE%9E%E7%8E%B0Tomcat%E9%9B%86%E7%BE%A4.html"/>
    <id>http://nullpointer.pw/Nginx实现Tomcat集群.html</id>
    <published>2017-05-05T14:12:54.000Z</published>
    <updated>2020-01-22T14:42:47.539Z</updated>
    
    <content type="html"><![CDATA[<p>本文介绍了利用nginx搭建了一个简单的负载均衡。</p><a id="more"></a><h2 id="一、准备工作"><a href="#一、准备工作" class="headerlink" title="一、准备工作"></a>一、准备工作</h2><p>Linux系统: CentOS 7 x64</p><p>Nginx版本:1.12.0</p><p>Tomcat版本: 7.0.77</p><h2 id="二、安装"><a href="#二、安装" class="headerlink" title="二、安装"></a>二、安装</h2><h3 id="CentOS-快速安装，见我另外一篇文章CentOS快速安装"><a href="#CentOS-快速安装，见我另外一篇文章CentOS快速安装" class="headerlink" title="CentOS 快速安装，见我另外一篇文章CentOS快速安装"></a>CentOS 快速安装，见我另外一篇文章<a href="http://nullpointer.pw/2017/08/19/CentOS%E5%BF%AB%E9%80%9F%E5%AE%89%E8%A3%85/">CentOS快速安装</a></h3><h3 id="安装Nginx依赖"><a href="#安装Nginx依赖" class="headerlink" title="安装Nginx依赖"></a>安装Nginx依赖</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> gcc 用来编译nginx</span></span><br><span class="line">yum install gcc-c++</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> PCRE nginx的http模块使用pcre来解析正则表达式</span></span><br><span class="line">yum -y install pcre*</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> zlib nginx使用zlib对http的内容进行gzip压缩</span></span><br><span class="line">yum install -y zlib zlib-devel</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> openssl https支持</span></span><br><span class="line">yum -y install openssl</span><br></pre></td></tr></table></figure><h3 id="下载Nginx"><a href="#下载Nginx" class="headerlink" title="下载Nginx"></a>下载Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 安装wget</span></span><br><span class="line">yum install wget</span><br><span class="line"><span class="meta">#</span><span class="bash"> 下载nginx</span></span><br><span class="line">wget http://nginx.org/download/nginx-1.12.0.tar.gz</span><br></pre></td></tr></table></figure><h3 id="编译安装Nginx"><a href="#编译安装Nginx" class="headerlink" title="编译安装Nginx"></a>编译安装Nginx</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 解压nginx</span></span><br><span class="line">tar -zxvf nginx-1.12.0.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入解压目录</span></span><br><span class="line">cd nginx-1.12.0</span><br><span class="line">./configure</span><br><span class="line"><span class="meta">#</span><span class="bash"> 若无错误，可以执行以下安装</span></span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line"><span class="meta">#</span><span class="bash"> 默认安装到/usr/<span class="built_in">local</span>/nginx目录</span></span><br></pre></td></tr></table></figure><h3 id="Nginx测试"><a href="#Nginx测试" class="headerlink" title="Nginx测试"></a>Nginx测试</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 启动nginx</span></span><br><span class="line">/usr/local/nginx/sbin/nginx</span><br><span class="line"><span class="meta">#</span><span class="bash"> 访问localhost</span></span><br><span class="line">wget localhost</span><br><span class="line"><span class="meta">#</span><span class="bash"> 此命令会下载一个index.html文件</span></span><br><span class="line">vim index.html</span><br><span class="line"><span class="meta">#</span><span class="bash"> index.html中有关于nginx的类似于helloworld语句</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 由于我的Linux安装在虚拟机中，想要外部访问虚拟机内，需要关闭防火墙或开放端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 编辑防火墙， CentOS 7默认的防火墙不是iptables，需要另行安装，请自行解决</span></span><br><span class="line">vim /etc/sysconfig/iptables</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加80端口</span></span><br><span class="line">-A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启防火墙</span></span><br><span class="line">service iptables restart</span><br><span class="line"><span class="meta">#</span><span class="bash"> 通过本机的浏览器访问虚拟机的ip</span></span><br><span class="line">http://192.168.243.127(此处为虚拟机的ip)</span><br></pre></td></tr></table></figure><h2 id="三、配置用于集群的Tomcat"><a href="#三、配置用于集群的Tomcat" class="headerlink" title="三、配置用于集群的Tomcat"></a>三、配置用于集群的Tomcat</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 下载Tomcat</span></span><br><span class="line">wget http://mirrors.tuna.tsinghua.edu.cn/apache/tomcat/tomcat-7/v7.0.77/bin/apache-tomcat-7.0.77.tar.gz</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建目录</span></span><br><span class="line">mkdir /usr/local/tomcats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 解压Tomcat</span></span><br><span class="line">tar -zxvf apache-tomcat-7.0.77.tar.gz -C /usr/local/tomcats</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改解压的Tomcat目录名称</span></span><br><span class="line">mv apache-tomcat-7.0.77 tomcat1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 为了测试nginx负载均衡,需要对tomcat的server.xml配置一下</span></span><br><span class="line">vim tomcat1/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 显示行号</span></span><br><span class="line">:set nu</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在105行修改为如下， 并保存退出</span></span><br><span class="line">&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm1"&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改示例程序</span></span><br><span class="line">echo 'tomcat1:&lt;%=session.getId()%&gt;' &gt; tomcat1/webapps/ROOT/index.jsp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 拷贝tomcat1目录为tomcat2</span></span><br><span class="line">cp -r tomcat1 tomcat2</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改tomcat2的server.xml中的端口号</span></span><br><span class="line">vim tomcat2/conf/server.xml</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改22行/71行/93行的端口</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改105行</span></span><br><span class="line">&lt;Engine name="Catalina" defaultHost="localhost" jvmRoute="jvm2"&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改示例程序</span></span><br><span class="line">echo 'tomcat2:&lt;%=session.getId()%&gt;' &gt; tomcat1/webapps/ROOT/index.jsp</span><br></pre></td></tr></table></figure><h2 id="四、配置Nginx"><a href="#四、配置Nginx" class="headerlink" title="四、配置Nginx"></a>四、配置Nginx</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim /usr/local/nginx/conf/nginx.conf</span><br></pre></td></tr></table></figure><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170505/220704835.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="启动tomcat"><a href="#启动tomcat" class="headerlink" title="启动tomcat"></a>启动tomcat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  启动两个tomcat</span></span><br><span class="line">./tomat2/bin/startup.sh</span><br><span class="line">./tomat1/bin/startup.sh</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><p>外部访问虚拟机</p><p><code>http://192.168.243.127(此处为虚拟机的ip)</code></p><p>多刷新几次，可以看到页面的内容在变化，在tomcat1和tomcat2之间进行切换，至此完成了简单nginx负载均衡的搭建。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文介绍了利用nginx搭建了一个简单的负载均衡。&lt;/p&gt;
    
    </summary>
    
      <category term="Nginx" scheme="http://nullpointer.pw/categories/Nginx/"/>
    
    
      <category term="nginx" scheme="http://nullpointer.pw/tags/nginx/"/>
    
      <category term="tomcat" scheme="http://nullpointer.pw/tags/tomcat/"/>
    
  </entry>
  
  <entry>
    <title>《聪明人都用方格笔记本》读书笔记</title>
    <link href="http://nullpointer.pw/%E3%80%8A%E8%81%AA%E6%98%8E%E4%BA%BA%E9%83%BD%E7%94%A8%E6%96%B9%E6%A0%BC%E7%AC%94%E8%AE%B0%E6%9C%AC%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://nullpointer.pw/《聪明人都用方格笔记本》读书笔记.html</id>
    <published>2017-01-22T10:08:00.000Z</published>
    <updated>2020-01-22T14:29:40.868Z</updated>
    
    <content type="html"><![CDATA[<p>2017年读的第一本书，读完了一直没有写读书笔记，拖延到今天，才勉强写完。中途看到《如何有效阅读一本书》，就一起读了，学学读书笔记的写法。    </p><p>此书主要讲了笔记本对于笔记的影响，好的笔记本让笔记发挥它应有的功能，而不好的笔记本体现不出笔记的价值所在。作者以三个著名机构使用的笔记本为例，列举了方格笔记本的种种益处，并通过配图的方式，让读者一目了然地了解方格笔记本记录笔记的方式。</p><a id="more"></a><table><thead><tr><th style="text-align:center">书名</th><th style="text-align:center">作者</th><th style="text-align:center">开始时间</th><th style="text-align:center">结束时间</th></tr></thead><tbody><tr><td style="text-align:center">聪明人都用方格笔记本</td><td style="text-align:center">高桥政史</td><td style="text-align:center">2017.01.01</td><td style="text-align:center">2017.01.04</td></tr></tbody></table><blockquote><p>将方格笔记本“分为三部分”记录。从左向右依次将笔记本分为三部分，按照“事实<br>→解释→行动”的顺序记录笔记。</p></blockquote><h2 id="一）笔记本的区别"><a href="#一）笔记本的区别" class="headerlink" title="一）笔记本的区别"></a>一）笔记本的区别</h2><h4 id="1-☆笔记本的对比"><a href="#1-☆笔记本的对比" class="headerlink" title="1. ☆笔记本的对比"></a>1. ☆笔记本的对比</h4><table><thead><tr><th>使头脑变聪明的笔记本</th><th>阻碍能力发挥的笔记本</th><th>对比</th></tr></thead><tbody><tr><td>看起来工整</td><td>第一印象给人脏乱的感觉，使人不愿再看第二眼</td><td>理解力、积极性低下</td></tr><tr><td>比A4纸大</td><td>比A6纸小、记事本型</td><td>思考复杂问题的能力、逻辑思维能力低下</td></tr><tr><td>颜色不超过三种</td><td>用了四种以上的颜色</td><td>判断优先顺序的能力、判断力低下</td></tr><tr><td>每一页都有一个主题</td><td>这也写、那也写</td><td>舍弃能力、整理能力低下</td></tr><tr><td>是黑板、白板板书内容的提炼</td><td>照抄黑板、白板板书</td><td>记忆力、独立思考能力低下</td></tr><tr><td>留有空白区域</td><td>无空隙，写得满满当当</td><td>理解能力、复习能力低下</td></tr><tr><td>画有许多图、表、画</td><td>无图、表、画，只有文字</td><td>视觉把握能力、表现力低下</td></tr><tr><td>日后看笔记时依然可再现当时的内容</td><td>日后看笔记时无法再现当时的内容</td><td>学习能力、理解力低下</td></tr></tbody></table><h4 id="2-★好与坏的笔记本的区别"><a href="#2-★好与坏的笔记本的区别" class="headerlink" title="2. ★好与坏的笔记本的区别"></a>2. ★好与坏的笔记本的区别</h4><p>好笔记本看上去一目了然，能够迅速把握重点，复现记笔记时的场景；<br>而坏笔记就是让你根本没有看的欲望，即使是看了，也不能提取有效内容，大多数情况下，坏笔记本的作用就是没有作用。</p><h2 id="二）记笔记的目的"><a href="#二）记笔记的目的" class="headerlink" title="二）记笔记的目的"></a>二）记笔记的目的</h2><h4 id="1-☆记笔记的误区"><a href="#1-☆记笔记的误区" class="headerlink" title="1. ☆记笔记的误区"></a>1. ☆记笔记的误区</h4><p>不管你参加的是多么优秀的培训、讲座、研讨，如果你的笔记无法再现当时的学习内容，那么，你好不容易学到的知识、技巧化为乌有的可能性将很大。  </p><blockquote><p><strong>笔记的生命线是“再现性”，这是记笔记的最终目的。</strong>  </p></blockquote><p>可是，没有学习过笔记本使用方法的人日后再看自己的笔记时，只能看到上面的词语和句子，却回忆不出“为何需要这些信息”“这些信息有什么作用”这些更为重要的部分。</p><p>也就是说，他们用的是缺乏再现性的记笔记法。</p><p>为什么要做笔记？</p><ul><li>我是怕日后忘记才记的</li><li>我只是照抄板书罢了</li><li>我有记笔记的习惯</li></ul><h4 id="2-★记笔记需要克服的困难"><a href="#2-★记笔记需要克服的困难" class="headerlink" title="2. ★记笔记需要克服的困难"></a>2. ★记笔记需要克服的困难</h4><p>作者说，抱着以上这几种目的而做笔记的人需要变化记笔记的方式，应当停止当前这种记笔记的方法。一直以来，记了很多笔记，但是我每次记完的笔记只是当成了备忘，把笔记本当成了字典。  </p><p>需要使用以前记过的笔记的时候，就借助个人良好的分类习惯查找对应的笔记，以及借助软件的全文检索功能查找我所需要的笔记。  </p><p>长而久之，便养成了依赖的习惯，记笔记记完也只是在脑海中保留一份关键字，而内容却一概忘记，这恐怕是我的记笔记方式的最大弊病，再现笔记的内容是个人需要克服的难点。</p><h2 id="三）框架·黄金三分法"><a href="#三）框架·黄金三分法" class="headerlink" title="三）框架·黄金三分法"></a>三）框架·黄金三分法</h2><h4 id="1-☆谁采取了这种框架"><a href="#1-☆谁采取了这种框架" class="headerlink" title="1. ☆谁采取了这种框架"></a>1. ☆谁采取了这种框架</h4><ul><li><p>康奈尔笔记本分为“Note”（板书）、“Queue”（发现点）、“Summary”（总结）三部分。  </p></li><li><p>东大录取生中的大多数学生将笔记本的左右两页作为一页使用，左侧记录“板书”，右侧写“发现点”和“总结”，和康奈尔笔记本的构造完全相同。  </p></li><li><p>麦肯锡公司的“空·雨·伞”，埃森哲公司的“Point Sheet”，所有外资管理咨询公司的咨询顾问都是按照“事实→解释→行动”的三分法展开思考的。   </p></li></ul><h4 id="2-☆框架的组成"><a href="#2-☆框架的组成" class="headerlink" title="2. ☆框架的组成"></a>2. ☆框架的组成</h4><table><thead><tr><th>内容</th><th>对应</th></tr></thead><tbody><tr><td>板书</td><td>事实</td></tr><tr><td>发现</td><td>解释</td></tr><tr><td>总结</td><td>行动</td></tr></tbody></table><h4 id="3-★框架的使用步骤"><a href="#3-★框架的使用步骤" class="headerlink" title="3. ★框架的使用步骤"></a>3. ★框架的使用步骤</h4><ol><li>摘抄原文：加深对原文的印象</li><li>提出问题，做出解释：基于原文进行思考，并给出结果</li><li>进行总结：对于整篇文章的总体概述  </li></ol><p>按照黄金三分法来做笔记，可以提高笔记对知识的再现性，知名机构都采取的是黄金三分法这种框架来做笔记。</p><h2 id="四）笔记本的结构"><a href="#四）笔记本的结构" class="headerlink" title="四）笔记本的结构"></a>四）笔记本的结构</h2><h4 id="1-☆笔记本的方向"><a href="#1-☆笔记本的方向" class="headerlink" title="1. ☆笔记本的方向"></a>1. ☆笔记本的方向</h4><p>人的思考会受到眼睛构造的左右，所以进入视野的是“纵向”框架还是“横向”框架，能够影响人们的理解速度以及对信息的把握程度。  </p><p>在把握整体情况时，需要解决的问题越复杂、参考的信息量越庞大，就越需要在短时间内迅速抓住重点。  </p><p>随着学习、工作层次的提升，“既见树木，又见森林”这一思考方式的重要性也就更为突显。</p><h4 id="2-☆笔记本的大小"><a href="#2-☆笔记本的大小" class="headerlink" title="2. ☆笔记本的大小"></a>2. ☆笔记本的大小</h4><p>“不善于提炼想法”“很难按逻辑性思维思考”“不会言简意赅地表达”的原因是什<br>么？  </p><p>笔记本的大小意味着思考能力的强弱。</p><h4 id="3-☆笔记的颜色"><a href="#3-☆笔记的颜色" class="headerlink" title="3. ☆笔记的颜色"></a>3. ☆笔记的颜色</h4><p>用黑色或蓝色书写笔记，用红色作为判断，也就是遇到非常重要或需要修改的地方时使用红色。 用此种简单方法区分使用颜色的话，便会在记笔记的同时自然舍弃掉无用的内容，将思考重点放在主要问题上，养成判断主次先后的习惯，逐步提高解决问题的速度和质量。  </p><blockquote><p><strong>颜色最多用三种。</strong></p></blockquote><p>只要能做到这一点，事后再翻看笔记时，仅看颜色就能立刻区分出主次顺序，记笔记时的思路也能在大脑中清晰重现，进一步提升信息整理和输出的效率。</p><h4 id="4-☆笔记标题区域的利用"><a href="#4-☆笔记标题区域的利用" class="headerlink" title="4. ☆笔记标题区域的利用"></a>4. ☆笔记标题区域的利用</h4><p>通常会在笔记本上部的空白区域写入论点和结论。<br>以解决工作问题的笔记本为例，“论点=问题的核心是什么”“结论=这样做便可以解决问题”。  </p><p><img src="http://img12345.5-project.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122151804.png" alt=""></p><h4 id="5-★笔记本结构对于笔记的影响"><a href="#5-★笔记本结构对于笔记的影响" class="headerlink" title="5. ★笔记本结构对于笔记的影响"></a>5. ★笔记本结构对于笔记的影响</h4><ul><li>笔记采取横向结构，可以起到一目了然的作用，参考的文章信息便于提取到大脑中。</li><li>小笔记本不利于总结想法，来回地翻页会打断思考的书写。因此使用大笔记本来记笔记。</li><li>太多的颜色会导致找不到重点，处处是重点的情况，</li><li>合理标记标题，梳理核心内容，有助于快速理解笔记内容。</li></ul><h2 id="五）笔记本的功能"><a href="#五）笔记本的功能" class="headerlink" title="五）笔记本的功能"></a>五）笔记本的功能</h2><h4 id="1-☆记忆性笔记本"><a href="#1-☆记忆性笔记本" class="headerlink" title="1. ☆记忆性笔记本"></a>1. ☆记忆性笔记本</h4><p>上课、研讨或是要记忆、理解学习内容时记录的笔记，为了记在脑子里而写的笔记。本书将这类笔记本称为“学习笔记本”。  </p><h4 id="2-☆思考性笔记本"><a href="#2-☆思考性笔记本" class="headerlink" title="2. ☆思考性笔记本"></a>2. ☆思考性笔记本</h4><p>为看出事物本质、理解重点、得出结论而写的笔记，常见于工作中。本书将这类笔记本称为“工作笔记本”。</p><h4 id="3-☆传达性笔记本"><a href="#3-☆传达性笔记本" class="headerlink" title="3. ☆传达性笔记本"></a>3. ☆传达性笔记本</h4><p>传达性笔记即能够从丰富的信息中筛选出对方所需的改善策略及解决方法，为了说服对方而写的笔记。本书将写这类笔记的笔记本称为“提案笔记本”或“博弈笔记本”。</p><h4 id="4-★不同功能笔记本对的记法"><a href="#4-★不同功能笔记本对的记法" class="headerlink" title="4. ★不同功能笔记本对的记法"></a>4. ★不同功能笔记本对的记法</h4><p>作者的这本书所描述的黄金三分法最适合于做思考性笔记，而对于记忆性笔记本的记法，采取这种方式，也能起到一定加深印象的作用。对于传达性笔记本而言，既列出事实，又给出合理解释，也是不错的方式。</p><h2 id="六）-提高笔记本的作用"><a href="#六）-提高笔记本的作用" class="headerlink" title="六） 提高笔记本的作用"></a>六） 提高笔记本的作用</h2><h4 id="1-☆能形成“永久记忆”的用眼方法"><a href="#1-☆能形成“永久记忆”的用眼方法" class="headerlink" title="1. ☆能形成“永久记忆”的用眼方法"></a>1. ☆能形成“永久记忆”的用眼方法</h4><p>如果你之前是一边看着老师在黑板上写下的内容，一边原封不动地抄写在笔记本上的话，那么，请你改变一下抄写笔记时的“用眼方法”吧！</p><p>将此前：×“看黑板→写笔记”的记录方法改为： “看黑板→印在大脑中→不看黑板，将印在大脑中的内容重现在笔记本上”。 不是一边看黑板一边抄写，而是在“看黑板→抄写”之间加入“印在大脑中的一秒钟”。 我把这一秒钟称为“空白的一秒钟”。</p><p>只需要这一秒钟，你的笔记本就能升级成能使大脑越变越聪明的笔记本。</p><h4 id="2-★方法的效果"><a href="#2-★方法的效果" class="headerlink" title="2. ★方法的效果"></a>2. ★方法的效果</h4><p>在抄写的这一步骤中加入<strong>映入大脑</strong>，可以加深对所抄写内容的记忆。</p><p>记得以前在背日语单词时，采取的就是这种方法，看一下单词，然后闭上眼睛，让单词在脑海中浮现出来，效果比直接抄写到本上的方法要好。</p><h4 id="3-☆逻辑连接词的种类与用途"><a href="#3-☆逻辑连接词的种类与用途" class="headerlink" title="3. ☆逻辑连接词的种类与用途"></a>3. ☆逻辑连接词的种类与用途</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122154035.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="4-★连接词的效果"><a href="#4-★连接词的效果" class="headerlink" title="4. ★连接词的效果"></a>4. ★连接词的效果</h4><p>找到适合自己的逻辑连接词，将思考进行流程化。（在中部区域使用）</p><h4 id="5-☆三个箭头的使用"><a href="#5-☆三个箭头的使用" class="headerlink" title="5. ☆三个箭头的使用"></a>5. ☆三个箭头的使用</h4><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/%E6%90%9C%E7%8B%97%E6%88%AA%E5%9B%BE20170122161754.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h4 id="6-☆两个能力的实质"><a href="#6-☆两个能力的实质" class="headerlink" title="6. ☆两个能力的实质"></a>6. ☆两个能力的实质</h4><ul><li>提问能力</li><li>概括能力</li></ul><p>所谓“提问能力”，就是得到某个信息后并不会直接一口吞下，而是会提出类似“这到底是什么意思”“为什么会这么说”之类问题的能力。  </p><p>所谓“概括能力”，就是能看透事物本质，并且将梳理后的重点内容记在脑子里，然后简单明了地讲给别人听。</p><h4 id="7-★两个能力的作用"><a href="#7-★两个能力的作用" class="headerlink" title="7. ★两个能力的作用"></a>7. ★两个能力的作用</h4><p>如何应用学习的知识，是由这两个能力来决定。这两个能力的提高与每天的脑力训练是密不可分的，只有不断地联系，逐渐强化，这二者的能力对于个人的提升就会越发明显。</p><h4 id="8-☆不要让你的笔记本变得代谢不良"><a href="#8-☆不要让你的笔记本变得代谢不良" class="headerlink" title="8. ☆不要让你的笔记本变得代谢不良"></a>8. ☆不要让你的笔记本变得代谢不良</h4><p>“代谢不良笔记本”是不分有用信息和无用信息、什么都往上写的、不进行整理总结的“阻碍能力发挥的笔记本”的典型例子。</p><p>如果这也记、那也记的话，那么不知不觉中，笔记本中的“结论和论点”就会变得模糊，什么是“该舍弃的无用信息”，什么是“应该留下的重点内容”，也会变得难以区分。</p><p>“这也记、那也记”“先记下再说”“说不定以后会用到”……按照这样的想法记笔记的话，记在笔记上的信息日后被使用的概率几乎为零。</p><h4 id="9-★代谢不良笔记本的坏处"><a href="#9-★代谢不良笔记本的坏处" class="headerlink" title="9. ★代谢不良笔记本的坏处"></a>9. ★代谢不良笔记本的坏处</h4><p>如果什么都记、也不进行整理总结，这样记录的笔记只是摘抄罢了，就像中学时使用的摘抄本， 如果不对摘抄进行分类，不时常去翻看，摘抄的内容是不会被完整地存储到记忆当中。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;2017年读的第一本书，读完了一直没有写读书笔记，拖延到今天，才勉强写完。中途看到《如何有效阅读一本书》，就一起读了，学学读书笔记的写法。    &lt;/p&gt;
&lt;p&gt;此书主要讲了笔记本对于笔记的影响，好的笔记本让笔记发挥它应有的功能，而不好的笔记本体现不出笔记的价值所在。作者以三个著名机构使用的笔记本为例，列举了方格笔记本的种种益处，并通过配图的方式，让读者一目了然地了解方格笔记本记录笔记的方式。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>《如何有效阅读一本书:超实用读书笔记法》读书笔记</title>
    <link href="http://nullpointer.pw/%E3%80%8A%E5%A6%82%E4%BD%95%E6%9C%89%E6%95%88%E9%98%85%E8%AF%BB%E4%B8%80%E6%9C%AC%E4%B9%A6%EF%BC%9A%E8%B6%85%E5%AE%9E%E7%94%A8%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%E6%B3%95%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0.html"/>
    <id>http://nullpointer.pw/《如何有效阅读一本书：超实用读书笔记法》读书笔记.html</id>
    <published>2017-01-15T12:37:00.000Z</published>
    <updated>2020-01-22T14:27:15.593Z</updated>
    
    <content type="html"><![CDATA[<p>买完Kindle读的第三本书，作者的观点部分适用于现在的我，可能是由于环境的不同（作者在日本）。<br>作者提倡使用纸质笔记本来记录读书笔记，但是对于一个出门不喜欢背包的人来说，这很muli~<br>原文对于如何选书、购书说了很多，对于如何记笔记的内容不太多，不过，还是很有参考价值。</p><a id="more"></a><table><thead><tr><th>书名</th><th>作者</th><th>开始时间</th><th>结束时间</th></tr></thead><tbody><tr><td>如何有效阅读一本书：超实用读书笔记法</td><td>奥野宣之</td><td>2017.01.11</td><td>2017.01.15</td></tr></tbody></table><h1 id="一、购书"><a href="#一、购书" class="headerlink" title="一、购书"></a>一、购书</h1><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/17-1-15/34562477-file_1484461118342_161ce.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>☆只有从日常生活中取材，才能列出反映自己真正需求的购书清单。</p><p>★ 书单内容来源于生活，可能是别人的推荐、也可能是宣传、或者自己脑海中蹦出的关键词。收集这些内容，这样到了书店，在书海中就不会茫然若失，不知道想要买些什么样的书了。<strong>有目的地逛书店，买自己想要的书</strong></p><h1 id="二、如何做读书笔记"><a href="#二、如何做读书笔记" class="headerlink" title="二、如何做读书笔记"></a>二、如何做读书笔记</h1><h2 id="1-坚持做读书笔记"><a href="#1-坚持做读书笔记" class="headerlink" title="1)坚持做读书笔记"></a>1)坚持做读书笔记</h2><p>☆ 2013年8月5日，我读了《XXXX》。这本书比我想象中有意思。  </p><p>如果写得这样简单，就更容易坚持下去了.第一步要做到的就是坚持下去，毫不夸张地说，只有坚持下去，读书笔记才能发挥作用。读书时应该时刻记得这个目的，正确地对待写读书笔记这件事。  </p><p>人们经常说“你为别人讲解书中的内容时，才会真正理解它。”把记读书笔记作为目标去读书，得到的效果也是一样的。当你<strong>以思想输出为前提</strong>去读书时，思想输入的质量也会有所提升，而且亲手写文章的好处比口头叙述要多。</p><p>★ 刚开始学习做读书笔记时，不必苛刻自己要做得多么好，总结得多么妙，最开始的时候，最重要的是培养自己做读书笔记的习惯。读书笔记主要是对自己读书的一种总结，吸收书中的精华，而并非是为了他人而写。</p><h2 id="2-读书笔记从一句话开始"><a href="#2-读书笔记从一句话开始" class="headerlink" title="2)读书笔记从一句话开始"></a>2)读书笔记从一句话开始</h2><p>☆ 书写这一动作，也有整理自己想法的含义。  </p><p>举个例子，读完冒险题材的纪实文学以后，就会想在读书笔记里写上“<strong>这个人真厉害</strong>”。你拿起笔时，会想到。等一下，不写上这个人是哪里厉害、为什么厉害的话，下次再读到这句话时会看不懂吧”，于是你会这样写<br>作者的体力和精神承受力都太强了。普通人在失明后一定会感到绝望，就算他比一般人强壮，在这样的环境下也很难生还。为什么作者可以如此坚强?  </p><p>本来只想写一句话，却把自己的感受一股脑儿地写了下来，并由此展开思考，读书笔记就这样充实了起来。</p><p>★ 一篇上万字的文章也是从一句话开始的，上百万字的小说可能也只是通过一份不过千字的大纲逐渐扩展而来。不怕写不出一万字的长文，只怕连一句最最简单的话都不写。</p><h2 id="3-无法坚持做笔记的原因"><a href="#3-无法坚持做笔记的原因" class="headerlink" title="3)无法坚持做笔记的原因"></a>3)无法坚持做笔记的原因</h2><p>☆ 需要注意的是，千万不要为了坚持写读书笔记而走形式主义。不管采用什么方式，都要踏实地写笔记，并真正理解书的内容。</p><p>★ 并非如作者所说，我们不可能真正理解所有读过的书的内容，但是写笔记一定要踏实地去做便是。</p><h1 id="三-做笔记的步骤"><a href="#三-做笔记的步骤" class="headerlink" title="三) 做笔记的步骤"></a>三) 做笔记的步骤</h1><h2 id="1-针对纸质书"><a href="#1-针对纸质书" class="headerlink" title="1) 针对纸质书"></a>1) 针对纸质书</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/17-1-15/68426691-file_1484463761370_db52.jpg" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><p>★ 刚开始认为这样是对于书的一种不爱护的表现，现在才觉得其实这么做的方式并没有多么不好，前提是书的主人是自己。与其看过一遍就扔掉或者再也不看；不如让看过的书留下自己读过的痕迹，更好的吸收书中的内容。</p><h2 id="2-针对电子书Kindle"><a href="#2-针对电子书Kindle" class="headerlink" title="2) 针对电子书Kindle"></a>2) 针对电子书Kindle</h2><p>★ 以下针对Kindle的部分为个人总结，书中并未提及。</p><h3 id="1-通读"><a href="#1-通读" class="headerlink" title="1.通读:"></a>1.通读:</h3><p>把读起来觉得不错的那一页的中间部分的两个字加入笔记、笔记内容为1（1只是做的一个标记）</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/17-1-15/26283815-file_1484464293276_bf8f.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure>  <p>由于Kindle在添加笔记时会同时插入一条笔记和一条标注记录、所以需要删除标记那条记录。删除第一条记录、保留笔记内容为1的记录。</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/17-1-15/18334103-file_1484464451004_11366.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="2-重读"><a href="#2-重读" class="headerlink" title="2.重读"></a>2.重读</h3><p>读完一遍之后，再把笔记列表中的几页重新读一遍。如果仍然觉得很好，添加书签</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/17-1-15/61173486-file_1484464665024_11516.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><h3 id="3-标记"><a href="#3-标记" class="headerlink" title="3.标记"></a>3.标记</h3><p>再重新读一遍加有书签的几页，如果第三次阅读后仍然觉得值得一读，就用标记功能在上面做记号。<br>最后留下来的就是你认为最有用的部分了。这一页上会有通读步骤的笔记记录、有重读步骤加的书签、有标记步骤时划的标记。</p><p>可以通过<a href="http://kmate.me/cn/">Kindle Mate</a>这个软件将标记的内容导出来，便于做读书笔记。读书笔记可以用有道云笔记，个人使用有道云的Markdown做笔记，如果想保存Kindle电子书中的图片，可以按住左下角和右上角进行截图，会自动保存，连接电脑后Kindel所在盘的根目录可以找到。</p><h1 id="四-葱鲔-wei-锅式读书笔记"><a href="#四-葱鲔-wei-锅式读书笔记" class="headerlink" title="四)葱鲔[wěi]锅式读书笔记"></a>四)葱鲔[wěi]锅式读书笔记</h1><p>☆ <strong>葱鲔火锅式读书笔记=摘抄+评论</strong><br>写读书笔记之前注意的三个事项:</p><ol><li><p>写读书笔记的日期</p></li><li><p>书名</p></li><li><p>作者名  </p><p>除了以上三个要素、也可以加上以下两个要素。</p></li><li><p>对自己来说重要的内容（摘抄）</p></li><li><p>自己对这篇文章的感想（评论）  </p></li></ol><p>步骤:</p><ol><li>写上日期，每次换行都要留一行空白，而每个段落之间留两行空白，便于日后重读、插入文字和更正修改。</li><li>摘抄和写评论，重读做过记号的内容，严格筛选出自己认为可以多读几遍的部分、最后在摘抄完的文章后面留出一些空白，写上自己的评论。摘抄部分用☆表示，而用自己语言表达的感想和补充说明则标上★以此作为区分，交替标在每个段落前。</li></ol><h1 id="五-示例"><a href="#五-示例" class="headerlink" title="五)示例"></a>五)示例</h1><p>【080715】《决定人类未来的50件事》/杰西卡·威廉姆斯/草思社  </p><p>☆自杀者中有三分之二是因为抑郁。(P180)  </p><p>★作者说，世界上的自杀者比在战争中死去的人还要多。人类在战争平代会死亡，在和平年代也会死亡，真是不容易。</p><p>☆所谓奴隶，就是被剥夺了人权的人。即使是这样，奴隶社会中也存在对待奴隶人性化的情况，奴隶们在饥饿或者生病的时候是可以不工作的。但在现代社会、奴隶就是一次性的财产，被贱买贱卖。</p><p>★以前的奴隶是长期雇佣制，而现在的则是因为抵押贷款而被人身买卖。为了事后不留麻烦，奴隶们被送去做合同工或零工，被任意驱使。一个人活在世上，最不可或缺的到底是人权还是金钱呢?</p><p>“☆”。后面是摘抄。注意不要省略，要保持原汁原味。</p><p>“★”后面则是自己的评论，写一些对摘抄内容的感想</p><p>并非所有的书都要按照这种方法，所以我们要根据对作品的重视程度改变笔记的写法</p><p>比如像“文件整理技巧”一类的纯实用技巧书、可以不去摘抄，而是只标记“★”并总结要点。如果是小说等休闲读物，可以直接分条书写自己对这本书的感想。</p><h1 id="六-寻找最具代表性的语句"><a href="#六-寻找最具代表性的语句" class="headerlink" title="六)寻找最具代表性的语句"></a>六)寻找最具代表性的语句</h1><ol><li>☆ 只有让自己感动的段落才值得摘抄，一定是摘抄让自己心动的语句。</li><li>另一方面，选择摘抄段落时，不是找让人觉得“理应如此”的文章，而是觉得“这么一说确实有道理”的内容。</li></ol><p>读过一本书以后，对书中内容感同身受固然让人心情愉悦，但这也代表这次读书没有给你带来新东西。相反，如果一篇文章颠覆了你之前的想法，使你的认识发生动摇，在抄写和重读的过程中仍然会让人信服或是感觉震撼，这种文章才是值得摘抄的。</p><h1 id="七-激发思想的火花"><a href="#七-激发思想的火花" class="headerlink" title="七)激发思想的火花"></a>七)激发思想的火花</h1><p>☆ 在摘抄的同时，附上自己的感想和思考，把作者的话和自己的话放在一起，感受落差。好主意不会凭空出现。不论是什么想法，都一定是对某种刺激做出的回应。<br>只有在读完书后对书中内容做出反应，进行主动思考，才能真正掌握这本书的内容。  </p><p>两个概念</p><p>“吸取精华”:原封不动地吸取书上的知识。</p><p>“读书体验”:</p><p>  ● “书上写的这些，我是这么理解的”</p><p>  ● “以此为契机，我想到了一件事……”</p><p>★ 没有主动思考的阅读，书中的内容被掌握的极其有限，甚至于未读过一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;买完Kindle读的第三本书，作者的观点部分适用于现在的我，可能是由于环境的不同（作者在日本）。&lt;br&gt;作者提倡使用纸质笔记本来记录读书笔记，但是对于一个出门不喜欢背包的人来说，这很muli~&lt;br&gt;原文对于如何选书、购书说了很多，对于如何记笔记的内容不太多，不过，还是很有参考价值。&lt;/p&gt;
    
    </summary>
    
      <category term="读书" scheme="http://nullpointer.pw/categories/%E8%AF%BB%E4%B9%A6/"/>
    
    
      <category term="读书" scheme="http://nullpointer.pw/tags/%E8%AF%BB%E4%B9%A6/"/>
    
  </entry>
  
  <entry>
    <title>点击按钮拷贝代码的实现</title>
    <link href="http://nullpointer.pw/%E7%82%B9%E5%87%BB%E6%8C%89%E9%92%AE%E6%8B%B7%E8%B4%9D%E4%BB%A3%E7%A0%81%E7%9A%84%E5%AE%9E%E7%8E%B0.html"/>
    <id>http://nullpointer.pw/点击按钮拷贝代码的实现.html</id>
    <published>2016-10-09T06:33:00.000Z</published>
    <updated>2020-01-22T14:30:55.446Z</updated>
    
    <content type="html"><![CDATA[<p>例子：</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="http://img12345.5-project.com/blog/20170216/071218636.png" alt="" title="">                </div>                <div class="image-caption"></div>            </figure><hr><p>1、 head中引入一个js <code>clipboard.js</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"//cdn.bootcss.com/clipboard.js/1.5.15/clipboard.js"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>2、初始化对象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script type=<span class="string">"text/javascript"</span>&gt;</span><br><span class="line"><span class="keyword">new</span> Clipboard(<span class="string">'.btn'</span>);<span class="comment">//此处btn是copy按钮的id</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>3、使用copy</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"col-lg-6 col-md-8 col-sm-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">class</span>=<span class="string">"form-control"</span>  <span class="attr">id</span>=<span class="string">"murl"</span> <span class="attr">value</span>=<span class="string">"$&#123;murl&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">data-clipboard-target</span>=<span class="string">"#murl"</span> &gt;</span>复制<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">data-clipboard-target 要复制的目标</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure><h4 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h4><blockquote><p><a href="http://clipboardjs.52fhy.com/">http://clipboardjs.52fhy.com/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;例子：&lt;/p&gt;
&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=&quot;img-lightbox&quot;&gt;
                    &lt;div class=&quot;overlay&quot;&gt;&lt;/div&gt;
        
      
    
    </summary>
    
    
      <category term="JS" scheme="http://nullpointer.pw/tags/JS/"/>
    
  </entry>
  
  <entry>
    <title>Ons消息队列</title>
    <link href="http://nullpointer.pw/Ons%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97.html"/>
    <id>http://nullpointer.pw/Ons消息队列.html</id>
    <published>2016-10-02T04:17:00.000Z</published>
    <updated>2020-01-22T14:43:08.198Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Ons消息队列"><a href="#Ons消息队列" class="headerlink" title="Ons消息队列"></a>Ons消息队列</h2><p><strong>前引：公司项目需要写一个推广系统，推广系统是一个项目，和主项目分离，项目间的通信使用Ons来完成，以下是公司代码略微修改的结果，以供参考。</strong></p><a id="more"></a><blockquote><p>术语：</p><p>Producer：消息生产者，负责产生消息，一般由业务系统负责产生消息。</p><p>Consumer：消息消费者，负责消费消息，一般是后台系统负责异步消费。</p><p>Producer ID：一类 Producer 的集合名称，这类 Producer 通常发送一类消息，丏发送逻辑一致。</p><p>Consumer ID：一类 Consumer 的集合名称，这类 Consumer 通常消费一类消息，丏消费逻辑一致。</p><p>广播消费：一条消息被多个 Consumer 消费，即使这些 Consumer 属于同一个 Consumer ID，消息也会被 Consumer ID中的每个 Consumer 都消费一次，广播消费中的 Consumer ID 概念可以讣为在消息划分方面无意义。</p><p>集群消费：一个 Consumer ID 中的 Consumer 实例平均分摊消费消息。 例如某个 Topic 有 9 条消息， 其中一个 ConsumerId 有 3 个实例（可能是 3 个进程，或者 3 台机器） ，那么每个实例只消费其中的 3 条消息</p></blockquote><ul><li><p>引入依赖</p><ul><li>Maven方式</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.aliyun.openservices<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ons-client<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>jar包方式</p><p><code>http://onsall.oss-cn-hangzhou.aliyuncs.com/aliyun-ons-client-java.tar.gz</code></p></li></ul></li></ul><hr><h2 id="一、发送消息"><a href="#一、发送消息" class="headerlink" title="一、发送消息"></a>一、发送消息</h2><h3 id="1、在阿里云控制台的消息队列中配置-Topic、Producer-ID，-Consumer-ID"><a href="#1、在阿里云控制台的消息队列中配置-Topic、Producer-ID，-Consumer-ID" class="headerlink" title="1、在阿里云控制台的消息队列中配置 Topic、Producer ID， Consumer ID"></a>1、在阿里云控制台的消息队列中配置 Topic、Producer ID， Consumer ID</h3><h3 id="2、创建Ons消息生产者"><a href="#2、创建Ons消息生产者" class="headerlink" title="2、创建Ons消息生产者"></a>2、创建Ons消息生产者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProducerService</span> <span class="keyword">implements</span> <span class="title">IProducerService</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Producer producer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String topic, String tag, String content)</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line"><span class="keyword">byte</span>[] bytes = content.getBytes(<span class="string">"UTF-8"</span>);</span><br><span class="line">Message msg = <span class="keyword">new</span> Message(topic, tag, bytes);</span><br><span class="line"></span><br><span class="line">SendResult sendResult = producer.send(msg);</span><br><span class="line">System.out.println(<span class="string">"SendMessageIng... topic:"</span> + topic + <span class="string">" tag:"</span> + tag + <span class="string">" "</span>+ sendResult);</span><br><span class="line">&#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">e.printStackTrace();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">                <span class="comment">//PropertyKeyConst 是Ons官方定义的常量</span></span><br><span class="line">               <span class="comment">//需要在阿里云控制台创建 AccessKey，SecretKey</span></span><br><span class="line">properties.put(PropertyKeyConst.ProducerId, ProducerConstants.PRODUCERID_PCHOME);</span><br><span class="line">              <span class="comment">//PRODUCERID_PCHOME是在控制台配置Topic 的 Producer ID</span></span><br><span class="line">properties.put(PropertyKeyConst.AccessKey, ProducerConstants.ACCESSID);</span><br><span class="line">properties.put(PropertyKeyConst.SecretKey, ProducerConstants.ACCESSKEY);</span><br><span class="line">producer = ONSFactory.createProducer(properties);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在发送消息前，必须调用start方法来启动Producer，只需调用一次即可。</span></span><br><span class="line">producer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destory</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">// 在应用退出前，销毁Producer对象</span></span><br><span class="line"><span class="comment">// 注意：如果不销毁也没有问题</span></span><br><span class="line">producer.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3、创建发送消息类"><a href="#3、创建发送消息类" class="headerlink" title="3、创建发送消息类"></a>3、创建发送消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> net.minidev.json.JSONObject;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.Action;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.ConsumeContext;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.Message;</span><br><span class="line"><span class="keyword">import</span> com.aliyun.openservices.ons.api.MessageListener;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnsService</span> <span class="keyword">implements</span> <span class="title">IOnsService</span>, <span class="title">MessageListener</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IProducerService producerService;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"TopicTestONS"</span>;</span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC_TAG = <span class="string">"TagA"</span>;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendBindObject</span><span class="params">(<span class="keyword">int</span> uid, <span class="keyword">int</span> tid, <span class="keyword">int</span> eid, String pageUrl)</span> </span>&#123;</span><br><span class="line">JSONObject json = <span class="keyword">new</span> JSONObject();</span><br><span class="line">json.put(<span class="string">"uid"</span>, uid);</span><br><span class="line">json.put(<span class="string">"tid"</span>, tid);</span><br><span class="line">json.put(<span class="string">"eid"</span>, eid);</span><br><span class="line">json.put(<span class="string">"pageUrl"</span>, pageUrl);</span><br><span class="line">producerService.sendMessage(TOPIC, TOPIC_TAG, json.toJSONString());</span><br><span class="line">      <span class="comment">//第三个参数就是需要发送的内容，公司使用的Json</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="二、订阅消息"><a href="#二、订阅消息" class="headerlink" title="二、订阅消息"></a>二、订阅消息</h2><h3 id="1、创建Ons消息消费者"><a href="#1、创建Ons消息消费者" class="headerlink" title="1、创建Ons消息消费者"></a>1、创建Ons消息消费者</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="meta">@Lazy</span>(value=<span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerService</span> <span class="keyword">implements</span> <span class="title">IConsumerService</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> Consumer consumer;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"init...."</span>);</span><br><span class="line">Properties properties = <span class="keyword">new</span> Properties();</span><br><span class="line">properties.put(PropertyKeyConst.ConsumerId, ConsumerConstants.CONSUMERID);</span><br><span class="line">properties.put(PropertyKeyConst.AccessKey,ConsumerConstants.ACCESSID);</span><br><span class="line">properties.put(PropertyKeyConst.SecretKey,ConsumerConstants.ACCESSKEY);</span><br><span class="line">properties.put(PropertyKeyConst.MessageModel,PropertyValueConst.CLUSTERING);</span><br><span class="line">consumer = ONSFactory.createConsumer(properties);</span><br><span class="line">consumer.start();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//MessageListener 是阿里Ons包内的消息监听器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(<span class="keyword">final</span> String topic, <span class="keyword">final</span> String subExpression,</span></span></span><br><span class="line"><span class="function"><span class="params"><span class="keyword">final</span> MessageListener listener)</span> </span>&#123;</span><br><span class="line">consumer.subscribe(topic, subExpression, listener);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreDestroy</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">desotry</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (consumer != <span class="keyword">null</span>) &#123;</span><br><span class="line">consumer.shutdown();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、创建消费消息类"><a href="#2、创建消费消息类" class="headerlink" title="2、创建消费消息类"></a>2、创建消费消息类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OnsConsumerService</span> <span class="keyword">implements</span> <span class="title">IOnsConsumerService</span> </span>&#123;</span><br><span class="line"><span class="meta">@Resource</span></span><br><span class="line"><span class="keyword">private</span> IConsumerService consumerService;</span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> String TOPIC = <span class="string">"TopicTestONS"</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostConstruct</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"starting..."</span>);</span><br><span class="line">onsConsumerService.subscribe(TOPIC, <span class="string">"*"</span>, <span class="keyword">new</span> MessageListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> Action <span class="title">consume</span><span class="params">(Message message, ConsumeContext context)</span> </span>&#123;</span><br><span class="line">JSONObject parse = (JSONObject) JSONValue.parse(message.getBody());</span><br><span class="line"><span class="keyword">int</span> uid = JsonUtil.getInt(parse, <span class="string">"uid"</span>);</span><br><span class="line"><span class="keyword">int</span> tid = JsonUtil.getInt(parse, <span class="string">"tid"</span>);</span><br><span class="line"><span class="keyword">int</span> eid = JsonUtil.getInt(parse, <span class="string">"eid"</span>);</span><br><span class="line">String pageUrl = JsonUtil.getString(parse, <span class="string">"pageUrl"</span>);</span><br><span class="line"></span><br><span class="line">System.out.println(uid + tid + eid + pageUrl);</span><br><span class="line"><span class="keyword">return</span> Action.CommitMessage;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上为Ons的集群订阅消息代码。</p><blockquote><p>参考：</p><p>Ons官方文档</p><p><a href="http://onsteam.oss-cn-hangzhou.aliyuncs.com/ALIYUN_ONS_USER_GUIDE.pdf">http://onsteam.oss-cn-hangzhou.aliyuncs.com/ALIYUN_ONS_USER_GUIDE.pdf</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Ons消息队列&quot;&gt;&lt;a href=&quot;#Ons消息队列&quot; class=&quot;headerlink&quot; title=&quot;Ons消息队列&quot;&gt;&lt;/a&gt;Ons消息队列&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;前引：公司项目需要写一个推广系统，推广系统是一个项目，和主项目分离，项目间的通信使用Ons来完成，以下是公司代码略微修改的结果，以供参考。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="阿里云" scheme="http://nullpointer.pw/categories/%E9%98%BF%E9%87%8C%E4%BA%91/"/>
    
    
      <category term="Ons" scheme="http://nullpointer.pw/tags/Ons/"/>
    
      <category term="消息队列" scheme="http://nullpointer.pw/tags/%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
</feed>
